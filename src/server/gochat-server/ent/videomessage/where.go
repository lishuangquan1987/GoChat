// Code generated by ent, DO NOT EDIT.

package videomessage

import (
	"gochat_server/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldLTE(FieldID, id))
}

// MsgId applies equality check predicate on the "msgId" field. It's identical to MsgIdEQ.
func MsgId(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldEQ(FieldMsgId, v))
}

// VideoUrl applies equality check predicate on the "videoUrl" field. It's identical to VideoUrlEQ.
func VideoUrl(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldEQ(FieldVideoUrl, v))
}

// MsgIdEQ applies the EQ predicate on the "msgId" field.
func MsgIdEQ(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldEQ(FieldMsgId, v))
}

// MsgIdNEQ applies the NEQ predicate on the "msgId" field.
func MsgIdNEQ(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldNEQ(FieldMsgId, v))
}

// MsgIdIn applies the In predicate on the "msgId" field.
func MsgIdIn(vs ...string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldIn(FieldMsgId, vs...))
}

// MsgIdNotIn applies the NotIn predicate on the "msgId" field.
func MsgIdNotIn(vs ...string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldNotIn(FieldMsgId, vs...))
}

// MsgIdGT applies the GT predicate on the "msgId" field.
func MsgIdGT(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldGT(FieldMsgId, v))
}

// MsgIdGTE applies the GTE predicate on the "msgId" field.
func MsgIdGTE(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldGTE(FieldMsgId, v))
}

// MsgIdLT applies the LT predicate on the "msgId" field.
func MsgIdLT(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldLT(FieldMsgId, v))
}

// MsgIdLTE applies the LTE predicate on the "msgId" field.
func MsgIdLTE(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldLTE(FieldMsgId, v))
}

// MsgIdContains applies the Contains predicate on the "msgId" field.
func MsgIdContains(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldContains(FieldMsgId, v))
}

// MsgIdHasPrefix applies the HasPrefix predicate on the "msgId" field.
func MsgIdHasPrefix(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldHasPrefix(FieldMsgId, v))
}

// MsgIdHasSuffix applies the HasSuffix predicate on the "msgId" field.
func MsgIdHasSuffix(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldHasSuffix(FieldMsgId, v))
}

// MsgIdEqualFold applies the EqualFold predicate on the "msgId" field.
func MsgIdEqualFold(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldEqualFold(FieldMsgId, v))
}

// MsgIdContainsFold applies the ContainsFold predicate on the "msgId" field.
func MsgIdContainsFold(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldContainsFold(FieldMsgId, v))
}

// VideoUrlEQ applies the EQ predicate on the "videoUrl" field.
func VideoUrlEQ(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldEQ(FieldVideoUrl, v))
}

// VideoUrlNEQ applies the NEQ predicate on the "videoUrl" field.
func VideoUrlNEQ(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldNEQ(FieldVideoUrl, v))
}

// VideoUrlIn applies the In predicate on the "videoUrl" field.
func VideoUrlIn(vs ...string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldIn(FieldVideoUrl, vs...))
}

// VideoUrlNotIn applies the NotIn predicate on the "videoUrl" field.
func VideoUrlNotIn(vs ...string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldNotIn(FieldVideoUrl, vs...))
}

// VideoUrlGT applies the GT predicate on the "videoUrl" field.
func VideoUrlGT(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldGT(FieldVideoUrl, v))
}

// VideoUrlGTE applies the GTE predicate on the "videoUrl" field.
func VideoUrlGTE(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldGTE(FieldVideoUrl, v))
}

// VideoUrlLT applies the LT predicate on the "videoUrl" field.
func VideoUrlLT(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldLT(FieldVideoUrl, v))
}

// VideoUrlLTE applies the LTE predicate on the "videoUrl" field.
func VideoUrlLTE(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldLTE(FieldVideoUrl, v))
}

// VideoUrlContains applies the Contains predicate on the "videoUrl" field.
func VideoUrlContains(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldContains(FieldVideoUrl, v))
}

// VideoUrlHasPrefix applies the HasPrefix predicate on the "videoUrl" field.
func VideoUrlHasPrefix(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldHasPrefix(FieldVideoUrl, v))
}

// VideoUrlHasSuffix applies the HasSuffix predicate on the "videoUrl" field.
func VideoUrlHasSuffix(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldHasSuffix(FieldVideoUrl, v))
}

// VideoUrlEqualFold applies the EqualFold predicate on the "videoUrl" field.
func VideoUrlEqualFold(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldEqualFold(FieldVideoUrl, v))
}

// VideoUrlContainsFold applies the ContainsFold predicate on the "videoUrl" field.
func VideoUrlContainsFold(v string) predicate.VideoMessage {
	return predicate.VideoMessage(sql.FieldContainsFold(FieldVideoUrl, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VideoMessage) predicate.VideoMessage {
	return predicate.VideoMessage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VideoMessage) predicate.VideoMessage {
	return predicate.VideoMessage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VideoMessage) predicate.VideoMessage {
	return predicate.VideoMessage(sql.NotPredicates(p))
}
