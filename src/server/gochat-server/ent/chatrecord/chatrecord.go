// Code generated by ent, DO NOT EDIT.

package chatrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the chatrecord type in the database.
	Label = "chat_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMsgId holds the string denoting the msgid field in the database.
	FieldMsgId = "msg_id"
	// FieldFromUserId holds the string denoting the fromuserid field in the database.
	FieldFromUserId = "from_user_id"
	// FieldToUserId holds the string denoting the touserid field in the database.
	FieldToUserId = "to_user_id"
	// FieldMsgType holds the string denoting the msgtype field in the database.
	FieldMsgType = "msg_type"
	// FieldCreateTime holds the string denoting the createtime field in the database.
	FieldCreateTime = "create_time"
	// Table holds the table name of the chatrecord in the database.
	Table = "chat_records"
)

// Columns holds all SQL columns for chatrecord fields.
var Columns = []string{
	FieldID,
	FieldMsgId,
	FieldFromUserId,
	FieldToUserId,
	FieldMsgType,
	FieldCreateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// MsgIdValidator is a validator for the "msgId" field. It is called by the builders before save.
	MsgIdValidator func(string) error
	// FromUserIdValidator is a validator for the "fromUserId" field. It is called by the builders before save.
	FromUserIdValidator func(string) error
	// ToUserIdValidator is a validator for the "toUserId" field. It is called by the builders before save.
	ToUserIdValidator func(string) error
	// MsgTypeValidator is a validator for the "msgType" field. It is called by the builders before save.
	MsgTypeValidator func(string) error
	// DefaultCreateTime holds the default value on creation for the "createTime" field.
	DefaultCreateTime func() time.Time
)

// OrderOption defines the ordering options for the ChatRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMsgId orders the results by the msgId field.
func ByMsgId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMsgId, opts...).ToFunc()
}

// ByFromUserId orders the results by the fromUserId field.
func ByFromUserId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromUserId, opts...).ToFunc()
}

// ByToUserId orders the results by the toUserId field.
func ByToUserId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToUserId, opts...).ToFunc()
}

// ByMsgType orders the results by the msgType field.
func ByMsgType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMsgType, opts...).ToFunc()
}

// ByCreateTime orders the results by the createTime field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}
