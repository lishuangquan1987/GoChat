// Code generated by ent, DO NOT EDIT.

package chatrecord

import (
	"gochat_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldLTE(FieldID, id))
}

// MsgId applies equality check predicate on the "msgId" field. It's identical to MsgIdEQ.
func MsgId(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldEQ(FieldMsgId, v))
}

// FromUserId applies equality check predicate on the "fromUserId" field. It's identical to FromUserIdEQ.
func FromUserId(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldEQ(FieldFromUserId, v))
}

// ToUserId applies equality check predicate on the "toUserId" field. It's identical to ToUserIdEQ.
func ToUserId(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldEQ(FieldToUserId, v))
}

// MsgType applies equality check predicate on the "msgType" field. It's identical to MsgTypeEQ.
func MsgType(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldEQ(FieldMsgType, v))
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldEQ(FieldCreateTime, v))
}

// MsgIdEQ applies the EQ predicate on the "msgId" field.
func MsgIdEQ(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldEQ(FieldMsgId, v))
}

// MsgIdNEQ applies the NEQ predicate on the "msgId" field.
func MsgIdNEQ(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldNEQ(FieldMsgId, v))
}

// MsgIdIn applies the In predicate on the "msgId" field.
func MsgIdIn(vs ...string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldIn(FieldMsgId, vs...))
}

// MsgIdNotIn applies the NotIn predicate on the "msgId" field.
func MsgIdNotIn(vs ...string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldNotIn(FieldMsgId, vs...))
}

// MsgIdGT applies the GT predicate on the "msgId" field.
func MsgIdGT(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldGT(FieldMsgId, v))
}

// MsgIdGTE applies the GTE predicate on the "msgId" field.
func MsgIdGTE(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldGTE(FieldMsgId, v))
}

// MsgIdLT applies the LT predicate on the "msgId" field.
func MsgIdLT(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldLT(FieldMsgId, v))
}

// MsgIdLTE applies the LTE predicate on the "msgId" field.
func MsgIdLTE(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldLTE(FieldMsgId, v))
}

// MsgIdContains applies the Contains predicate on the "msgId" field.
func MsgIdContains(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldContains(FieldMsgId, v))
}

// MsgIdHasPrefix applies the HasPrefix predicate on the "msgId" field.
func MsgIdHasPrefix(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldHasPrefix(FieldMsgId, v))
}

// MsgIdHasSuffix applies the HasSuffix predicate on the "msgId" field.
func MsgIdHasSuffix(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldHasSuffix(FieldMsgId, v))
}

// MsgIdEqualFold applies the EqualFold predicate on the "msgId" field.
func MsgIdEqualFold(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldEqualFold(FieldMsgId, v))
}

// MsgIdContainsFold applies the ContainsFold predicate on the "msgId" field.
func MsgIdContainsFold(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldContainsFold(FieldMsgId, v))
}

// FromUserIdEQ applies the EQ predicate on the "fromUserId" field.
func FromUserIdEQ(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldEQ(FieldFromUserId, v))
}

// FromUserIdNEQ applies the NEQ predicate on the "fromUserId" field.
func FromUserIdNEQ(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldNEQ(FieldFromUserId, v))
}

// FromUserIdIn applies the In predicate on the "fromUserId" field.
func FromUserIdIn(vs ...string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldIn(FieldFromUserId, vs...))
}

// FromUserIdNotIn applies the NotIn predicate on the "fromUserId" field.
func FromUserIdNotIn(vs ...string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldNotIn(FieldFromUserId, vs...))
}

// FromUserIdGT applies the GT predicate on the "fromUserId" field.
func FromUserIdGT(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldGT(FieldFromUserId, v))
}

// FromUserIdGTE applies the GTE predicate on the "fromUserId" field.
func FromUserIdGTE(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldGTE(FieldFromUserId, v))
}

// FromUserIdLT applies the LT predicate on the "fromUserId" field.
func FromUserIdLT(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldLT(FieldFromUserId, v))
}

// FromUserIdLTE applies the LTE predicate on the "fromUserId" field.
func FromUserIdLTE(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldLTE(FieldFromUserId, v))
}

// FromUserIdContains applies the Contains predicate on the "fromUserId" field.
func FromUserIdContains(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldContains(FieldFromUserId, v))
}

// FromUserIdHasPrefix applies the HasPrefix predicate on the "fromUserId" field.
func FromUserIdHasPrefix(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldHasPrefix(FieldFromUserId, v))
}

// FromUserIdHasSuffix applies the HasSuffix predicate on the "fromUserId" field.
func FromUserIdHasSuffix(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldHasSuffix(FieldFromUserId, v))
}

// FromUserIdEqualFold applies the EqualFold predicate on the "fromUserId" field.
func FromUserIdEqualFold(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldEqualFold(FieldFromUserId, v))
}

// FromUserIdContainsFold applies the ContainsFold predicate on the "fromUserId" field.
func FromUserIdContainsFold(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldContainsFold(FieldFromUserId, v))
}

// ToUserIdEQ applies the EQ predicate on the "toUserId" field.
func ToUserIdEQ(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldEQ(FieldToUserId, v))
}

// ToUserIdNEQ applies the NEQ predicate on the "toUserId" field.
func ToUserIdNEQ(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldNEQ(FieldToUserId, v))
}

// ToUserIdIn applies the In predicate on the "toUserId" field.
func ToUserIdIn(vs ...string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldIn(FieldToUserId, vs...))
}

// ToUserIdNotIn applies the NotIn predicate on the "toUserId" field.
func ToUserIdNotIn(vs ...string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldNotIn(FieldToUserId, vs...))
}

// ToUserIdGT applies the GT predicate on the "toUserId" field.
func ToUserIdGT(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldGT(FieldToUserId, v))
}

// ToUserIdGTE applies the GTE predicate on the "toUserId" field.
func ToUserIdGTE(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldGTE(FieldToUserId, v))
}

// ToUserIdLT applies the LT predicate on the "toUserId" field.
func ToUserIdLT(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldLT(FieldToUserId, v))
}

// ToUserIdLTE applies the LTE predicate on the "toUserId" field.
func ToUserIdLTE(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldLTE(FieldToUserId, v))
}

// ToUserIdContains applies the Contains predicate on the "toUserId" field.
func ToUserIdContains(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldContains(FieldToUserId, v))
}

// ToUserIdHasPrefix applies the HasPrefix predicate on the "toUserId" field.
func ToUserIdHasPrefix(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldHasPrefix(FieldToUserId, v))
}

// ToUserIdHasSuffix applies the HasSuffix predicate on the "toUserId" field.
func ToUserIdHasSuffix(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldHasSuffix(FieldToUserId, v))
}

// ToUserIdEqualFold applies the EqualFold predicate on the "toUserId" field.
func ToUserIdEqualFold(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldEqualFold(FieldToUserId, v))
}

// ToUserIdContainsFold applies the ContainsFold predicate on the "toUserId" field.
func ToUserIdContainsFold(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldContainsFold(FieldToUserId, v))
}

// MsgTypeEQ applies the EQ predicate on the "msgType" field.
func MsgTypeEQ(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldEQ(FieldMsgType, v))
}

// MsgTypeNEQ applies the NEQ predicate on the "msgType" field.
func MsgTypeNEQ(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldNEQ(FieldMsgType, v))
}

// MsgTypeIn applies the In predicate on the "msgType" field.
func MsgTypeIn(vs ...string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldIn(FieldMsgType, vs...))
}

// MsgTypeNotIn applies the NotIn predicate on the "msgType" field.
func MsgTypeNotIn(vs ...string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldNotIn(FieldMsgType, vs...))
}

// MsgTypeGT applies the GT predicate on the "msgType" field.
func MsgTypeGT(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldGT(FieldMsgType, v))
}

// MsgTypeGTE applies the GTE predicate on the "msgType" field.
func MsgTypeGTE(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldGTE(FieldMsgType, v))
}

// MsgTypeLT applies the LT predicate on the "msgType" field.
func MsgTypeLT(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldLT(FieldMsgType, v))
}

// MsgTypeLTE applies the LTE predicate on the "msgType" field.
func MsgTypeLTE(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldLTE(FieldMsgType, v))
}

// MsgTypeContains applies the Contains predicate on the "msgType" field.
func MsgTypeContains(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldContains(FieldMsgType, v))
}

// MsgTypeHasPrefix applies the HasPrefix predicate on the "msgType" field.
func MsgTypeHasPrefix(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldHasPrefix(FieldMsgType, v))
}

// MsgTypeHasSuffix applies the HasSuffix predicate on the "msgType" field.
func MsgTypeHasSuffix(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldHasSuffix(FieldMsgType, v))
}

// MsgTypeEqualFold applies the EqualFold predicate on the "msgType" field.
func MsgTypeEqualFold(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldEqualFold(FieldMsgType, v))
}

// MsgTypeContainsFold applies the ContainsFold predicate on the "msgType" field.
func MsgTypeContainsFold(v string) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldContainsFold(FieldMsgType, v))
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v time.Time) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v time.Time) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...time.Time) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v time.Time) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v time.Time) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v time.Time) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v time.Time) predicate.ChatRecord {
	return predicate.ChatRecord(sql.FieldLTE(FieldCreateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChatRecord) predicate.ChatRecord {
	return predicate.ChatRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChatRecord) predicate.ChatRecord {
	return predicate.ChatRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChatRecord) predicate.ChatRecord {
	return predicate.ChatRecord(sql.NotPredicates(p))
}
