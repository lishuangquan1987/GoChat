// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gochat_server/ent/chatrecord"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ChatRecord is the model entity for the ChatRecord schema.
type ChatRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 消息ID，关联Message表
	MsgId string `json:"msgId,omitempty"`
	// 发送者ID
	FromUserId int `json:"fromUserId,omitempty"`
	// 接收者ID
	ToUserId int `json:"toUserId,omitempty"`
	// 消息类型: 1-文本, 2-图片, 3-视频
	MsgType int `json:"msgType,omitempty"`
	// 是否为群聊
	IsGroup bool `json:"isGroup,omitempty"`
	// 群聊ID，仅群聊时有值
	GroupId int `json:"groupId,omitempty"`
	// 创建时间
	CreateTime   time.Time `json:"createTime,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatrecord.FieldIsGroup:
			values[i] = new(sql.NullBool)
		case chatrecord.FieldID, chatrecord.FieldFromUserId, chatrecord.FieldToUserId, chatrecord.FieldMsgType, chatrecord.FieldGroupId:
			values[i] = new(sql.NullInt64)
		case chatrecord.FieldMsgId:
			values[i] = new(sql.NullString)
		case chatrecord.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatRecord fields.
func (cr *ChatRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cr.ID = int(value.Int64)
		case chatrecord.FieldMsgId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field msgId", values[i])
			} else if value.Valid {
				cr.MsgId = value.String
			}
		case chatrecord.FieldFromUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fromUserId", values[i])
			} else if value.Valid {
				cr.FromUserId = int(value.Int64)
			}
		case chatrecord.FieldToUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field toUserId", values[i])
			} else if value.Valid {
				cr.ToUserId = int(value.Int64)
			}
		case chatrecord.FieldMsgType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field msgType", values[i])
			} else if value.Valid {
				cr.MsgType = int(value.Int64)
			}
		case chatrecord.FieldIsGroup:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isGroup", values[i])
			} else if value.Valid {
				cr.IsGroup = value.Bool
			}
		case chatrecord.FieldGroupId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field groupId", values[i])
			} else if value.Valid {
				cr.GroupId = int(value.Int64)
			}
		case chatrecord.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createTime", values[i])
			} else if value.Valid {
				cr.CreateTime = value.Time
			}
		default:
			cr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChatRecord.
// This includes values selected through modifiers, order, etc.
func (cr *ChatRecord) Value(name string) (ent.Value, error) {
	return cr.selectValues.Get(name)
}

// Update returns a builder for updating this ChatRecord.
// Note that you need to call ChatRecord.Unwrap() before calling this method if this ChatRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *ChatRecord) Update() *ChatRecordUpdateOne {
	return NewChatRecordClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the ChatRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *ChatRecord) Unwrap() *ChatRecord {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatRecord is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *ChatRecord) String() string {
	var builder strings.Builder
	builder.WriteString("ChatRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("msgId=")
	builder.WriteString(cr.MsgId)
	builder.WriteString(", ")
	builder.WriteString("fromUserId=")
	builder.WriteString(fmt.Sprintf("%v", cr.FromUserId))
	builder.WriteString(", ")
	builder.WriteString("toUserId=")
	builder.WriteString(fmt.Sprintf("%v", cr.ToUserId))
	builder.WriteString(", ")
	builder.WriteString("msgType=")
	builder.WriteString(fmt.Sprintf("%v", cr.MsgType))
	builder.WriteString(", ")
	builder.WriteString("isGroup=")
	builder.WriteString(fmt.Sprintf("%v", cr.IsGroup))
	builder.WriteString(", ")
	builder.WriteString("groupId=")
	builder.WriteString(fmt.Sprintf("%v", cr.GroupId))
	builder.WriteString(", ")
	builder.WriteString("createTime=")
	builder.WriteString(cr.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ChatRecords is a parsable slice of ChatRecord.
type ChatRecords []*ChatRecord
