// Code generated by ent, DO NOT EDIT.

package donotdisturb

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the donotdisturb type in the database.
	Label = "do_not_disturb"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTargetUserID holds the string denoting the target_user_id field in the database.
	FieldTargetUserID = "target_user_id"
	// FieldTargetGroupID holds the string denoting the target_group_id field in the database.
	FieldTargetGroupID = "target_group_id"
	// FieldIsGlobal holds the string denoting the is_global field in the database.
	FieldIsGlobal = "is_global"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the donotdisturb in the database.
	Table = "do_not_disturbs"
)

// Columns holds all SQL columns for donotdisturb fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTargetUserID,
	FieldTargetGroupID,
	FieldIsGlobal,
	FieldStartTime,
	FieldEndTime,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(int) error
	// DefaultIsGlobal holds the default value on creation for the "is_global" field.
	DefaultIsGlobal bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the DoNotDisturb queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTargetUserID orders the results by the target_user_id field.
func ByTargetUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetUserID, opts...).ToFunc()
}

// ByTargetGroupID orders the results by the target_group_id field.
func ByTargetGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetGroupID, opts...).ToFunc()
}

// ByIsGlobal orders the results by the is_global field.
func ByIsGlobal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsGlobal, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
