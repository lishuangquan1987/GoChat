// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"gochat_server/ent/migrate"

	"gochat_server/ent/chatrecord"
	"gochat_server/ent/friendrelationship"
	"gochat_server/ent/group"
	"gochat_server/ent/groupchatrecord"
	"gochat_server/ent/imagemessage"
	"gochat_server/ent/textmessage"
	"gochat_server/ent/user"
	"gochat_server/ent/videomessage"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ChatRecord is the client for interacting with the ChatRecord builders.
	ChatRecord *ChatRecordClient
	// FriendRelationship is the client for interacting with the FriendRelationship builders.
	FriendRelationship *FriendRelationshipClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// GroupChatRecord is the client for interacting with the GroupChatRecord builders.
	GroupChatRecord *GroupChatRecordClient
	// ImageMessage is the client for interacting with the ImageMessage builders.
	ImageMessage *ImageMessageClient
	// TextMessage is the client for interacting with the TextMessage builders.
	TextMessage *TextMessageClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// VideoMessage is the client for interacting with the VideoMessage builders.
	VideoMessage *VideoMessageClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ChatRecord = NewChatRecordClient(c.config)
	c.FriendRelationship = NewFriendRelationshipClient(c.config)
	c.Group = NewGroupClient(c.config)
	c.GroupChatRecord = NewGroupChatRecordClient(c.config)
	c.ImageMessage = NewImageMessageClient(c.config)
	c.TextMessage = NewTextMessageClient(c.config)
	c.User = NewUserClient(c.config)
	c.VideoMessage = NewVideoMessageClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		ChatRecord:         NewChatRecordClient(cfg),
		FriendRelationship: NewFriendRelationshipClient(cfg),
		Group:              NewGroupClient(cfg),
		GroupChatRecord:    NewGroupChatRecordClient(cfg),
		ImageMessage:       NewImageMessageClient(cfg),
		TextMessage:        NewTextMessageClient(cfg),
		User:               NewUserClient(cfg),
		VideoMessage:       NewVideoMessageClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		ChatRecord:         NewChatRecordClient(cfg),
		FriendRelationship: NewFriendRelationshipClient(cfg),
		Group:              NewGroupClient(cfg),
		GroupChatRecord:    NewGroupChatRecordClient(cfg),
		ImageMessage:       NewImageMessageClient(cfg),
		TextMessage:        NewTextMessageClient(cfg),
		User:               NewUserClient(cfg),
		VideoMessage:       NewVideoMessageClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ChatRecord.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.ChatRecord, c.FriendRelationship, c.Group, c.GroupChatRecord, c.ImageMessage,
		c.TextMessage, c.User, c.VideoMessage,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.ChatRecord, c.FriendRelationship, c.Group, c.GroupChatRecord, c.ImageMessage,
		c.TextMessage, c.User, c.VideoMessage,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ChatRecordMutation:
		return c.ChatRecord.mutate(ctx, m)
	case *FriendRelationshipMutation:
		return c.FriendRelationship.mutate(ctx, m)
	case *GroupMutation:
		return c.Group.mutate(ctx, m)
	case *GroupChatRecordMutation:
		return c.GroupChatRecord.mutate(ctx, m)
	case *ImageMessageMutation:
		return c.ImageMessage.mutate(ctx, m)
	case *TextMessageMutation:
		return c.TextMessage.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *VideoMessageMutation:
		return c.VideoMessage.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ChatRecordClient is a client for the ChatRecord schema.
type ChatRecordClient struct {
	config
}

// NewChatRecordClient returns a client for the ChatRecord from the given config.
func NewChatRecordClient(c config) *ChatRecordClient {
	return &ChatRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chatrecord.Hooks(f(g(h())))`.
func (c *ChatRecordClient) Use(hooks ...Hook) {
	c.hooks.ChatRecord = append(c.hooks.ChatRecord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chatrecord.Intercept(f(g(h())))`.
func (c *ChatRecordClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChatRecord = append(c.inters.ChatRecord, interceptors...)
}

// Create returns a builder for creating a ChatRecord entity.
func (c *ChatRecordClient) Create() *ChatRecordCreate {
	mutation := newChatRecordMutation(c.config, OpCreate)
	return &ChatRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChatRecord entities.
func (c *ChatRecordClient) CreateBulk(builders ...*ChatRecordCreate) *ChatRecordCreateBulk {
	return &ChatRecordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChatRecordClient) MapCreateBulk(slice any, setFunc func(*ChatRecordCreate, int)) *ChatRecordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChatRecordCreateBulk{err: fmt.Errorf("calling to ChatRecordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChatRecordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChatRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChatRecord.
func (c *ChatRecordClient) Update() *ChatRecordUpdate {
	mutation := newChatRecordMutation(c.config, OpUpdate)
	return &ChatRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChatRecordClient) UpdateOne(cr *ChatRecord) *ChatRecordUpdateOne {
	mutation := newChatRecordMutation(c.config, OpUpdateOne, withChatRecord(cr))
	return &ChatRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChatRecordClient) UpdateOneID(id int) *ChatRecordUpdateOne {
	mutation := newChatRecordMutation(c.config, OpUpdateOne, withChatRecordID(id))
	return &ChatRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChatRecord.
func (c *ChatRecordClient) Delete() *ChatRecordDelete {
	mutation := newChatRecordMutation(c.config, OpDelete)
	return &ChatRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChatRecordClient) DeleteOne(cr *ChatRecord) *ChatRecordDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChatRecordClient) DeleteOneID(id int) *ChatRecordDeleteOne {
	builder := c.Delete().Where(chatrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChatRecordDeleteOne{builder}
}

// Query returns a query builder for ChatRecord.
func (c *ChatRecordClient) Query() *ChatRecordQuery {
	return &ChatRecordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChatRecord},
		inters: c.Interceptors(),
	}
}

// Get returns a ChatRecord entity by its id.
func (c *ChatRecordClient) Get(ctx context.Context, id int) (*ChatRecord, error) {
	return c.Query().Where(chatrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChatRecordClient) GetX(ctx context.Context, id int) *ChatRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ChatRecordClient) Hooks() []Hook {
	return c.hooks.ChatRecord
}

// Interceptors returns the client interceptors.
func (c *ChatRecordClient) Interceptors() []Interceptor {
	return c.inters.ChatRecord
}

func (c *ChatRecordClient) mutate(ctx context.Context, m *ChatRecordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChatRecordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChatRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChatRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChatRecordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChatRecord mutation op: %q", m.Op())
	}
}

// FriendRelationshipClient is a client for the FriendRelationship schema.
type FriendRelationshipClient struct {
	config
}

// NewFriendRelationshipClient returns a client for the FriendRelationship from the given config.
func NewFriendRelationshipClient(c config) *FriendRelationshipClient {
	return &FriendRelationshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `friendrelationship.Hooks(f(g(h())))`.
func (c *FriendRelationshipClient) Use(hooks ...Hook) {
	c.hooks.FriendRelationship = append(c.hooks.FriendRelationship, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `friendrelationship.Intercept(f(g(h())))`.
func (c *FriendRelationshipClient) Intercept(interceptors ...Interceptor) {
	c.inters.FriendRelationship = append(c.inters.FriendRelationship, interceptors...)
}

// Create returns a builder for creating a FriendRelationship entity.
func (c *FriendRelationshipClient) Create() *FriendRelationshipCreate {
	mutation := newFriendRelationshipMutation(c.config, OpCreate)
	return &FriendRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FriendRelationship entities.
func (c *FriendRelationshipClient) CreateBulk(builders ...*FriendRelationshipCreate) *FriendRelationshipCreateBulk {
	return &FriendRelationshipCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FriendRelationshipClient) MapCreateBulk(slice any, setFunc func(*FriendRelationshipCreate, int)) *FriendRelationshipCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FriendRelationshipCreateBulk{err: fmt.Errorf("calling to FriendRelationshipClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FriendRelationshipCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FriendRelationshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FriendRelationship.
func (c *FriendRelationshipClient) Update() *FriendRelationshipUpdate {
	mutation := newFriendRelationshipMutation(c.config, OpUpdate)
	return &FriendRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FriendRelationshipClient) UpdateOne(fr *FriendRelationship) *FriendRelationshipUpdateOne {
	mutation := newFriendRelationshipMutation(c.config, OpUpdateOne, withFriendRelationship(fr))
	return &FriendRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FriendRelationshipClient) UpdateOneID(id int) *FriendRelationshipUpdateOne {
	mutation := newFriendRelationshipMutation(c.config, OpUpdateOne, withFriendRelationshipID(id))
	return &FriendRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FriendRelationship.
func (c *FriendRelationshipClient) Delete() *FriendRelationshipDelete {
	mutation := newFriendRelationshipMutation(c.config, OpDelete)
	return &FriendRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FriendRelationshipClient) DeleteOne(fr *FriendRelationship) *FriendRelationshipDeleteOne {
	return c.DeleteOneID(fr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FriendRelationshipClient) DeleteOneID(id int) *FriendRelationshipDeleteOne {
	builder := c.Delete().Where(friendrelationship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FriendRelationshipDeleteOne{builder}
}

// Query returns a query builder for FriendRelationship.
func (c *FriendRelationshipClient) Query() *FriendRelationshipQuery {
	return &FriendRelationshipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFriendRelationship},
		inters: c.Interceptors(),
	}
}

// Get returns a FriendRelationship entity by its id.
func (c *FriendRelationshipClient) Get(ctx context.Context, id int) (*FriendRelationship, error) {
	return c.Query().Where(friendrelationship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FriendRelationshipClient) GetX(ctx context.Context, id int) *FriendRelationship {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FriendRelationshipClient) Hooks() []Hook {
	return c.hooks.FriendRelationship
}

// Interceptors returns the client interceptors.
func (c *FriendRelationshipClient) Interceptors() []Interceptor {
	return c.inters.FriendRelationship
}

func (c *FriendRelationshipClient) mutate(ctx context.Context, m *FriendRelationshipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FriendRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FriendRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FriendRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FriendRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FriendRelationship mutation op: %q", m.Op())
	}
}

// GroupClient is a client for the Group schema.
type GroupClient struct {
	config
}

// NewGroupClient returns a client for the Group from the given config.
func NewGroupClient(c config) *GroupClient {
	return &GroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `group.Hooks(f(g(h())))`.
func (c *GroupClient) Use(hooks ...Hook) {
	c.hooks.Group = append(c.hooks.Group, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `group.Intercept(f(g(h())))`.
func (c *GroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.Group = append(c.inters.Group, interceptors...)
}

// Create returns a builder for creating a Group entity.
func (c *GroupClient) Create() *GroupCreate {
	mutation := newGroupMutation(c.config, OpCreate)
	return &GroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Group entities.
func (c *GroupClient) CreateBulk(builders ...*GroupCreate) *GroupCreateBulk {
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GroupClient) MapCreateBulk(slice any, setFunc func(*GroupCreate, int)) *GroupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GroupCreateBulk{err: fmt.Errorf("calling to GroupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GroupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Group.
func (c *GroupClient) Update() *GroupUpdate {
	mutation := newGroupMutation(c.config, OpUpdate)
	return &GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupClient) UpdateOne(gr *Group) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroup(gr))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupClient) UpdateOneID(id int) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroupID(id))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Group.
func (c *GroupClient) Delete() *GroupDelete {
	mutation := newGroupMutation(c.config, OpDelete)
	return &GroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupClient) DeleteOne(gr *Group) *GroupDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupClient) DeleteOneID(id int) *GroupDeleteOne {
	builder := c.Delete().Where(group.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupDeleteOne{builder}
}

// Query returns a query builder for Group.
func (c *GroupClient) Query() *GroupQuery {
	return &GroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a Group entity by its id.
func (c *GroupClient) Get(ctx context.Context, id int) (*Group, error) {
	return c.Query().Where(group.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupClient) GetX(ctx context.Context, id int) *Group {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GroupClient) Hooks() []Hook {
	return c.hooks.Group
}

// Interceptors returns the client interceptors.
func (c *GroupClient) Interceptors() []Interceptor {
	return c.inters.Group
}

func (c *GroupClient) mutate(ctx context.Context, m *GroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Group mutation op: %q", m.Op())
	}
}

// GroupChatRecordClient is a client for the GroupChatRecord schema.
type GroupChatRecordClient struct {
	config
}

// NewGroupChatRecordClient returns a client for the GroupChatRecord from the given config.
func NewGroupChatRecordClient(c config) *GroupChatRecordClient {
	return &GroupChatRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupchatrecord.Hooks(f(g(h())))`.
func (c *GroupChatRecordClient) Use(hooks ...Hook) {
	c.hooks.GroupChatRecord = append(c.hooks.GroupChatRecord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `groupchatrecord.Intercept(f(g(h())))`.
func (c *GroupChatRecordClient) Intercept(interceptors ...Interceptor) {
	c.inters.GroupChatRecord = append(c.inters.GroupChatRecord, interceptors...)
}

// Create returns a builder for creating a GroupChatRecord entity.
func (c *GroupChatRecordClient) Create() *GroupChatRecordCreate {
	mutation := newGroupChatRecordMutation(c.config, OpCreate)
	return &GroupChatRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupChatRecord entities.
func (c *GroupChatRecordClient) CreateBulk(builders ...*GroupChatRecordCreate) *GroupChatRecordCreateBulk {
	return &GroupChatRecordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GroupChatRecordClient) MapCreateBulk(slice any, setFunc func(*GroupChatRecordCreate, int)) *GroupChatRecordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GroupChatRecordCreateBulk{err: fmt.Errorf("calling to GroupChatRecordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GroupChatRecordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GroupChatRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupChatRecord.
func (c *GroupChatRecordClient) Update() *GroupChatRecordUpdate {
	mutation := newGroupChatRecordMutation(c.config, OpUpdate)
	return &GroupChatRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupChatRecordClient) UpdateOne(gcr *GroupChatRecord) *GroupChatRecordUpdateOne {
	mutation := newGroupChatRecordMutation(c.config, OpUpdateOne, withGroupChatRecord(gcr))
	return &GroupChatRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupChatRecordClient) UpdateOneID(id int) *GroupChatRecordUpdateOne {
	mutation := newGroupChatRecordMutation(c.config, OpUpdateOne, withGroupChatRecordID(id))
	return &GroupChatRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupChatRecord.
func (c *GroupChatRecordClient) Delete() *GroupChatRecordDelete {
	mutation := newGroupChatRecordMutation(c.config, OpDelete)
	return &GroupChatRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupChatRecordClient) DeleteOne(gcr *GroupChatRecord) *GroupChatRecordDeleteOne {
	return c.DeleteOneID(gcr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupChatRecordClient) DeleteOneID(id int) *GroupChatRecordDeleteOne {
	builder := c.Delete().Where(groupchatrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupChatRecordDeleteOne{builder}
}

// Query returns a query builder for GroupChatRecord.
func (c *GroupChatRecordClient) Query() *GroupChatRecordQuery {
	return &GroupChatRecordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroupChatRecord},
		inters: c.Interceptors(),
	}
}

// Get returns a GroupChatRecord entity by its id.
func (c *GroupChatRecordClient) Get(ctx context.Context, id int) (*GroupChatRecord, error) {
	return c.Query().Where(groupchatrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupChatRecordClient) GetX(ctx context.Context, id int) *GroupChatRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GroupChatRecordClient) Hooks() []Hook {
	return c.hooks.GroupChatRecord
}

// Interceptors returns the client interceptors.
func (c *GroupChatRecordClient) Interceptors() []Interceptor {
	return c.inters.GroupChatRecord
}

func (c *GroupChatRecordClient) mutate(ctx context.Context, m *GroupChatRecordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupChatRecordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupChatRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupChatRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupChatRecordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GroupChatRecord mutation op: %q", m.Op())
	}
}

// ImageMessageClient is a client for the ImageMessage schema.
type ImageMessageClient struct {
	config
}

// NewImageMessageClient returns a client for the ImageMessage from the given config.
func NewImageMessageClient(c config) *ImageMessageClient {
	return &ImageMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `imagemessage.Hooks(f(g(h())))`.
func (c *ImageMessageClient) Use(hooks ...Hook) {
	c.hooks.ImageMessage = append(c.hooks.ImageMessage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `imagemessage.Intercept(f(g(h())))`.
func (c *ImageMessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.ImageMessage = append(c.inters.ImageMessage, interceptors...)
}

// Create returns a builder for creating a ImageMessage entity.
func (c *ImageMessageClient) Create() *ImageMessageCreate {
	mutation := newImageMessageMutation(c.config, OpCreate)
	return &ImageMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ImageMessage entities.
func (c *ImageMessageClient) CreateBulk(builders ...*ImageMessageCreate) *ImageMessageCreateBulk {
	return &ImageMessageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ImageMessageClient) MapCreateBulk(slice any, setFunc func(*ImageMessageCreate, int)) *ImageMessageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ImageMessageCreateBulk{err: fmt.Errorf("calling to ImageMessageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ImageMessageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ImageMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ImageMessage.
func (c *ImageMessageClient) Update() *ImageMessageUpdate {
	mutation := newImageMessageMutation(c.config, OpUpdate)
	return &ImageMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImageMessageClient) UpdateOne(im *ImageMessage) *ImageMessageUpdateOne {
	mutation := newImageMessageMutation(c.config, OpUpdateOne, withImageMessage(im))
	return &ImageMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImageMessageClient) UpdateOneID(id int) *ImageMessageUpdateOne {
	mutation := newImageMessageMutation(c.config, OpUpdateOne, withImageMessageID(id))
	return &ImageMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ImageMessage.
func (c *ImageMessageClient) Delete() *ImageMessageDelete {
	mutation := newImageMessageMutation(c.config, OpDelete)
	return &ImageMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ImageMessageClient) DeleteOne(im *ImageMessage) *ImageMessageDeleteOne {
	return c.DeleteOneID(im.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ImageMessageClient) DeleteOneID(id int) *ImageMessageDeleteOne {
	builder := c.Delete().Where(imagemessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImageMessageDeleteOne{builder}
}

// Query returns a query builder for ImageMessage.
func (c *ImageMessageClient) Query() *ImageMessageQuery {
	return &ImageMessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeImageMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a ImageMessage entity by its id.
func (c *ImageMessageClient) Get(ctx context.Context, id int) (*ImageMessage, error) {
	return c.Query().Where(imagemessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImageMessageClient) GetX(ctx context.Context, id int) *ImageMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ImageMessageClient) Hooks() []Hook {
	return c.hooks.ImageMessage
}

// Interceptors returns the client interceptors.
func (c *ImageMessageClient) Interceptors() []Interceptor {
	return c.inters.ImageMessage
}

func (c *ImageMessageClient) mutate(ctx context.Context, m *ImageMessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ImageMessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ImageMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ImageMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ImageMessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ImageMessage mutation op: %q", m.Op())
	}
}

// TextMessageClient is a client for the TextMessage schema.
type TextMessageClient struct {
	config
}

// NewTextMessageClient returns a client for the TextMessage from the given config.
func NewTextMessageClient(c config) *TextMessageClient {
	return &TextMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `textmessage.Hooks(f(g(h())))`.
func (c *TextMessageClient) Use(hooks ...Hook) {
	c.hooks.TextMessage = append(c.hooks.TextMessage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `textmessage.Intercept(f(g(h())))`.
func (c *TextMessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.TextMessage = append(c.inters.TextMessage, interceptors...)
}

// Create returns a builder for creating a TextMessage entity.
func (c *TextMessageClient) Create() *TextMessageCreate {
	mutation := newTextMessageMutation(c.config, OpCreate)
	return &TextMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TextMessage entities.
func (c *TextMessageClient) CreateBulk(builders ...*TextMessageCreate) *TextMessageCreateBulk {
	return &TextMessageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TextMessageClient) MapCreateBulk(slice any, setFunc func(*TextMessageCreate, int)) *TextMessageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TextMessageCreateBulk{err: fmt.Errorf("calling to TextMessageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TextMessageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TextMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TextMessage.
func (c *TextMessageClient) Update() *TextMessageUpdate {
	mutation := newTextMessageMutation(c.config, OpUpdate)
	return &TextMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TextMessageClient) UpdateOne(tm *TextMessage) *TextMessageUpdateOne {
	mutation := newTextMessageMutation(c.config, OpUpdateOne, withTextMessage(tm))
	return &TextMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TextMessageClient) UpdateOneID(id int) *TextMessageUpdateOne {
	mutation := newTextMessageMutation(c.config, OpUpdateOne, withTextMessageID(id))
	return &TextMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TextMessage.
func (c *TextMessageClient) Delete() *TextMessageDelete {
	mutation := newTextMessageMutation(c.config, OpDelete)
	return &TextMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TextMessageClient) DeleteOne(tm *TextMessage) *TextMessageDeleteOne {
	return c.DeleteOneID(tm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TextMessageClient) DeleteOneID(id int) *TextMessageDeleteOne {
	builder := c.Delete().Where(textmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TextMessageDeleteOne{builder}
}

// Query returns a query builder for TextMessage.
func (c *TextMessageClient) Query() *TextMessageQuery {
	return &TextMessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTextMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a TextMessage entity by its id.
func (c *TextMessageClient) Get(ctx context.Context, id int) (*TextMessage, error) {
	return c.Query().Where(textmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TextMessageClient) GetX(ctx context.Context, id int) *TextMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TextMessageClient) Hooks() []Hook {
	return c.hooks.TextMessage
}

// Interceptors returns the client interceptors.
func (c *TextMessageClient) Interceptors() []Interceptor {
	return c.inters.TextMessage
}

func (c *TextMessageClient) mutate(ctx context.Context, m *TextMessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TextMessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TextMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TextMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TextMessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TextMessage mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// VideoMessageClient is a client for the VideoMessage schema.
type VideoMessageClient struct {
	config
}

// NewVideoMessageClient returns a client for the VideoMessage from the given config.
func NewVideoMessageClient(c config) *VideoMessageClient {
	return &VideoMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `videomessage.Hooks(f(g(h())))`.
func (c *VideoMessageClient) Use(hooks ...Hook) {
	c.hooks.VideoMessage = append(c.hooks.VideoMessage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `videomessage.Intercept(f(g(h())))`.
func (c *VideoMessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.VideoMessage = append(c.inters.VideoMessage, interceptors...)
}

// Create returns a builder for creating a VideoMessage entity.
func (c *VideoMessageClient) Create() *VideoMessageCreate {
	mutation := newVideoMessageMutation(c.config, OpCreate)
	return &VideoMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VideoMessage entities.
func (c *VideoMessageClient) CreateBulk(builders ...*VideoMessageCreate) *VideoMessageCreateBulk {
	return &VideoMessageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VideoMessageClient) MapCreateBulk(slice any, setFunc func(*VideoMessageCreate, int)) *VideoMessageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VideoMessageCreateBulk{err: fmt.Errorf("calling to VideoMessageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VideoMessageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VideoMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VideoMessage.
func (c *VideoMessageClient) Update() *VideoMessageUpdate {
	mutation := newVideoMessageMutation(c.config, OpUpdate)
	return &VideoMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VideoMessageClient) UpdateOne(vm *VideoMessage) *VideoMessageUpdateOne {
	mutation := newVideoMessageMutation(c.config, OpUpdateOne, withVideoMessage(vm))
	return &VideoMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VideoMessageClient) UpdateOneID(id int) *VideoMessageUpdateOne {
	mutation := newVideoMessageMutation(c.config, OpUpdateOne, withVideoMessageID(id))
	return &VideoMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VideoMessage.
func (c *VideoMessageClient) Delete() *VideoMessageDelete {
	mutation := newVideoMessageMutation(c.config, OpDelete)
	return &VideoMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VideoMessageClient) DeleteOne(vm *VideoMessage) *VideoMessageDeleteOne {
	return c.DeleteOneID(vm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VideoMessageClient) DeleteOneID(id int) *VideoMessageDeleteOne {
	builder := c.Delete().Where(videomessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VideoMessageDeleteOne{builder}
}

// Query returns a query builder for VideoMessage.
func (c *VideoMessageClient) Query() *VideoMessageQuery {
	return &VideoMessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVideoMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a VideoMessage entity by its id.
func (c *VideoMessageClient) Get(ctx context.Context, id int) (*VideoMessage, error) {
	return c.Query().Where(videomessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VideoMessageClient) GetX(ctx context.Context, id int) *VideoMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VideoMessageClient) Hooks() []Hook {
	return c.hooks.VideoMessage
}

// Interceptors returns the client interceptors.
func (c *VideoMessageClient) Interceptors() []Interceptor {
	return c.inters.VideoMessage
}

func (c *VideoMessageClient) mutate(ctx context.Context, m *VideoMessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VideoMessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VideoMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VideoMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VideoMessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VideoMessage mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ChatRecord, FriendRelationship, Group, GroupChatRecord, ImageMessage,
		TextMessage, User, VideoMessage []ent.Hook
	}
	inters struct {
		ChatRecord, FriendRelationship, Group, GroupChatRecord, ImageMessage,
		TextMessage, User, VideoMessage []ent.Interceptor
	}
)
