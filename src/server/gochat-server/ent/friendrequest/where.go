// Code generated by ent, DO NOT EDIT.

package friendrequest

import (
	"gochat_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldLTE(FieldID, id))
}

// FromUserId applies equality check predicate on the "fromUserId" field. It's identical to FromUserIdEQ.
func FromUserId(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldFromUserId, v))
}

// ToUserId applies equality check predicate on the "toUserId" field. It's identical to ToUserIdEQ.
func ToUserId(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldToUserId, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldRemark, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldStatus, v))
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldCreateTime, v))
}

// FromUserIdEQ applies the EQ predicate on the "fromUserId" field.
func FromUserIdEQ(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldFromUserId, v))
}

// FromUserIdNEQ applies the NEQ predicate on the "fromUserId" field.
func FromUserIdNEQ(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNEQ(FieldFromUserId, v))
}

// FromUserIdIn applies the In predicate on the "fromUserId" field.
func FromUserIdIn(vs ...int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldIn(FieldFromUserId, vs...))
}

// FromUserIdNotIn applies the NotIn predicate on the "fromUserId" field.
func FromUserIdNotIn(vs ...int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNotIn(FieldFromUserId, vs...))
}

// FromUserIdGT applies the GT predicate on the "fromUserId" field.
func FromUserIdGT(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldGT(FieldFromUserId, v))
}

// FromUserIdGTE applies the GTE predicate on the "fromUserId" field.
func FromUserIdGTE(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldGTE(FieldFromUserId, v))
}

// FromUserIdLT applies the LT predicate on the "fromUserId" field.
func FromUserIdLT(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldLT(FieldFromUserId, v))
}

// FromUserIdLTE applies the LTE predicate on the "fromUserId" field.
func FromUserIdLTE(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldLTE(FieldFromUserId, v))
}

// ToUserIdEQ applies the EQ predicate on the "toUserId" field.
func ToUserIdEQ(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldToUserId, v))
}

// ToUserIdNEQ applies the NEQ predicate on the "toUserId" field.
func ToUserIdNEQ(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNEQ(FieldToUserId, v))
}

// ToUserIdIn applies the In predicate on the "toUserId" field.
func ToUserIdIn(vs ...int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldIn(FieldToUserId, vs...))
}

// ToUserIdNotIn applies the NotIn predicate on the "toUserId" field.
func ToUserIdNotIn(vs ...int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNotIn(FieldToUserId, vs...))
}

// ToUserIdGT applies the GT predicate on the "toUserId" field.
func ToUserIdGT(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldGT(FieldToUserId, v))
}

// ToUserIdGTE applies the GTE predicate on the "toUserId" field.
func ToUserIdGTE(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldGTE(FieldToUserId, v))
}

// ToUserIdLT applies the LT predicate on the "toUserId" field.
func ToUserIdLT(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldLT(FieldToUserId, v))
}

// ToUserIdLTE applies the LTE predicate on the "toUserId" field.
func ToUserIdLTE(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldLTE(FieldToUserId, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldContainsFold(FieldRemark, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldLTE(FieldStatus, v))
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v time.Time) predicate.FriendRequest {
	return predicate.FriendRequest(sql.FieldLTE(FieldCreateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FriendRequest) predicate.FriendRequest {
	return predicate.FriendRequest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FriendRequest) predicate.FriendRequest {
	return predicate.FriendRequest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FriendRequest) predicate.FriendRequest {
	return predicate.FriendRequest(sql.NotPredicates(p))
}
