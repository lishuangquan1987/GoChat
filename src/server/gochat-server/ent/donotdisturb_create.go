// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/donotdisturb"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DoNotDisturbCreate is the builder for creating a DoNotDisturb entity.
type DoNotDisturbCreate struct {
	config
	mutation *DoNotDisturbMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (dndc *DoNotDisturbCreate) SetUserID(i int) *DoNotDisturbCreate {
	dndc.mutation.SetUserID(i)
	return dndc
}

// SetTargetUserID sets the "target_user_id" field.
func (dndc *DoNotDisturbCreate) SetTargetUserID(i int) *DoNotDisturbCreate {
	dndc.mutation.SetTargetUserID(i)
	return dndc
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (dndc *DoNotDisturbCreate) SetNillableTargetUserID(i *int) *DoNotDisturbCreate {
	if i != nil {
		dndc.SetTargetUserID(*i)
	}
	return dndc
}

// SetTargetGroupID sets the "target_group_id" field.
func (dndc *DoNotDisturbCreate) SetTargetGroupID(i int) *DoNotDisturbCreate {
	dndc.mutation.SetTargetGroupID(i)
	return dndc
}

// SetNillableTargetGroupID sets the "target_group_id" field if the given value is not nil.
func (dndc *DoNotDisturbCreate) SetNillableTargetGroupID(i *int) *DoNotDisturbCreate {
	if i != nil {
		dndc.SetTargetGroupID(*i)
	}
	return dndc
}

// SetIsGlobal sets the "is_global" field.
func (dndc *DoNotDisturbCreate) SetIsGlobal(b bool) *DoNotDisturbCreate {
	dndc.mutation.SetIsGlobal(b)
	return dndc
}

// SetNillableIsGlobal sets the "is_global" field if the given value is not nil.
func (dndc *DoNotDisturbCreate) SetNillableIsGlobal(b *bool) *DoNotDisturbCreate {
	if b != nil {
		dndc.SetIsGlobal(*b)
	}
	return dndc
}

// SetStartTime sets the "start_time" field.
func (dndc *DoNotDisturbCreate) SetStartTime(t time.Time) *DoNotDisturbCreate {
	dndc.mutation.SetStartTime(t)
	return dndc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (dndc *DoNotDisturbCreate) SetNillableStartTime(t *time.Time) *DoNotDisturbCreate {
	if t != nil {
		dndc.SetStartTime(*t)
	}
	return dndc
}

// SetEndTime sets the "end_time" field.
func (dndc *DoNotDisturbCreate) SetEndTime(t time.Time) *DoNotDisturbCreate {
	dndc.mutation.SetEndTime(t)
	return dndc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (dndc *DoNotDisturbCreate) SetNillableEndTime(t *time.Time) *DoNotDisturbCreate {
	if t != nil {
		dndc.SetEndTime(*t)
	}
	return dndc
}

// SetCreatedAt sets the "created_at" field.
func (dndc *DoNotDisturbCreate) SetCreatedAt(t time.Time) *DoNotDisturbCreate {
	dndc.mutation.SetCreatedAt(t)
	return dndc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dndc *DoNotDisturbCreate) SetNillableCreatedAt(t *time.Time) *DoNotDisturbCreate {
	if t != nil {
		dndc.SetCreatedAt(*t)
	}
	return dndc
}

// SetUpdatedAt sets the "updated_at" field.
func (dndc *DoNotDisturbCreate) SetUpdatedAt(t time.Time) *DoNotDisturbCreate {
	dndc.mutation.SetUpdatedAt(t)
	return dndc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dndc *DoNotDisturbCreate) SetNillableUpdatedAt(t *time.Time) *DoNotDisturbCreate {
	if t != nil {
		dndc.SetUpdatedAt(*t)
	}
	return dndc
}

// SetID sets the "id" field.
func (dndc *DoNotDisturbCreate) SetID(i int) *DoNotDisturbCreate {
	dndc.mutation.SetID(i)
	return dndc
}

// Mutation returns the DoNotDisturbMutation object of the builder.
func (dndc *DoNotDisturbCreate) Mutation() *DoNotDisturbMutation {
	return dndc.mutation
}

// Save creates the DoNotDisturb in the database.
func (dndc *DoNotDisturbCreate) Save(ctx context.Context) (*DoNotDisturb, error) {
	dndc.defaults()
	return withHooks(ctx, dndc.sqlSave, dndc.mutation, dndc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dndc *DoNotDisturbCreate) SaveX(ctx context.Context) *DoNotDisturb {
	v, err := dndc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dndc *DoNotDisturbCreate) Exec(ctx context.Context) error {
	_, err := dndc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dndc *DoNotDisturbCreate) ExecX(ctx context.Context) {
	if err := dndc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dndc *DoNotDisturbCreate) defaults() {
	if _, ok := dndc.mutation.IsGlobal(); !ok {
		v := donotdisturb.DefaultIsGlobal
		dndc.mutation.SetIsGlobal(v)
	}
	if _, ok := dndc.mutation.CreatedAt(); !ok {
		v := donotdisturb.DefaultCreatedAt()
		dndc.mutation.SetCreatedAt(v)
	}
	if _, ok := dndc.mutation.UpdatedAt(); !ok {
		v := donotdisturb.DefaultUpdatedAt()
		dndc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dndc *DoNotDisturbCreate) check() error {
	if _, ok := dndc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "DoNotDisturb.user_id"`)}
	}
	if v, ok := dndc.mutation.UserID(); ok {
		if err := donotdisturb.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "DoNotDisturb.user_id": %w`, err)}
		}
	}
	if _, ok := dndc.mutation.IsGlobal(); !ok {
		return &ValidationError{Name: "is_global", err: errors.New(`ent: missing required field "DoNotDisturb.is_global"`)}
	}
	if _, ok := dndc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DoNotDisturb.created_at"`)}
	}
	if _, ok := dndc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DoNotDisturb.updated_at"`)}
	}
	if v, ok := dndc.mutation.ID(); ok {
		if err := donotdisturb.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "DoNotDisturb.id": %w`, err)}
		}
	}
	return nil
}

func (dndc *DoNotDisturbCreate) sqlSave(ctx context.Context) (*DoNotDisturb, error) {
	if err := dndc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dndc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dndc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	dndc.mutation.id = &_node.ID
	dndc.mutation.done = true
	return _node, nil
}

func (dndc *DoNotDisturbCreate) createSpec() (*DoNotDisturb, *sqlgraph.CreateSpec) {
	var (
		_node = &DoNotDisturb{config: dndc.config}
		_spec = sqlgraph.NewCreateSpec(donotdisturb.Table, sqlgraph.NewFieldSpec(donotdisturb.FieldID, field.TypeInt))
	)
	if id, ok := dndc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dndc.mutation.UserID(); ok {
		_spec.SetField(donotdisturb.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := dndc.mutation.TargetUserID(); ok {
		_spec.SetField(donotdisturb.FieldTargetUserID, field.TypeInt, value)
		_node.TargetUserID = &value
	}
	if value, ok := dndc.mutation.TargetGroupID(); ok {
		_spec.SetField(donotdisturb.FieldTargetGroupID, field.TypeInt, value)
		_node.TargetGroupID = &value
	}
	if value, ok := dndc.mutation.IsGlobal(); ok {
		_spec.SetField(donotdisturb.FieldIsGlobal, field.TypeBool, value)
		_node.IsGlobal = value
	}
	if value, ok := dndc.mutation.StartTime(); ok {
		_spec.SetField(donotdisturb.FieldStartTime, field.TypeTime, value)
		_node.StartTime = &value
	}
	if value, ok := dndc.mutation.EndTime(); ok {
		_spec.SetField(donotdisturb.FieldEndTime, field.TypeTime, value)
		_node.EndTime = &value
	}
	if value, ok := dndc.mutation.CreatedAt(); ok {
		_spec.SetField(donotdisturb.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dndc.mutation.UpdatedAt(); ok {
		_spec.SetField(donotdisturb.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// DoNotDisturbCreateBulk is the builder for creating many DoNotDisturb entities in bulk.
type DoNotDisturbCreateBulk struct {
	config
	err      error
	builders []*DoNotDisturbCreate
}

// Save creates the DoNotDisturb entities in the database.
func (dndcb *DoNotDisturbCreateBulk) Save(ctx context.Context) ([]*DoNotDisturb, error) {
	if dndcb.err != nil {
		return nil, dndcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dndcb.builders))
	nodes := make([]*DoNotDisturb, len(dndcb.builders))
	mutators := make([]Mutator, len(dndcb.builders))
	for i := range dndcb.builders {
		func(i int, root context.Context) {
			builder := dndcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DoNotDisturbMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dndcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dndcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dndcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dndcb *DoNotDisturbCreateBulk) SaveX(ctx context.Context) []*DoNotDisturb {
	v, err := dndcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dndcb *DoNotDisturbCreateBulk) Exec(ctx context.Context) error {
	_, err := dndcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dndcb *DoNotDisturbCreateBulk) ExecX(ctx context.Context) {
	if err := dndcb.Exec(ctx); err != nil {
		panic(err)
	}
}
