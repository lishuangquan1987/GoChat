// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"gochat_server/ent/donotdisturb"
	"gochat_server/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DoNotDisturbDelete is the builder for deleting a DoNotDisturb entity.
type DoNotDisturbDelete struct {
	config
	hooks    []Hook
	mutation *DoNotDisturbMutation
}

// Where appends a list predicates to the DoNotDisturbDelete builder.
func (dndd *DoNotDisturbDelete) Where(ps ...predicate.DoNotDisturb) *DoNotDisturbDelete {
	dndd.mutation.Where(ps...)
	return dndd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dndd *DoNotDisturbDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, dndd.sqlExec, dndd.mutation, dndd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dndd *DoNotDisturbDelete) ExecX(ctx context.Context) int {
	n, err := dndd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dndd *DoNotDisturbDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(donotdisturb.Table, sqlgraph.NewFieldSpec(donotdisturb.FieldID, field.TypeInt))
	if ps := dndd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dndd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dndd.mutation.done = true
	return affected, err
}

// DoNotDisturbDeleteOne is the builder for deleting a single DoNotDisturb entity.
type DoNotDisturbDeleteOne struct {
	dndd *DoNotDisturbDelete
}

// Where appends a list predicates to the DoNotDisturbDelete builder.
func (dnddo *DoNotDisturbDeleteOne) Where(ps ...predicate.DoNotDisturb) *DoNotDisturbDeleteOne {
	dnddo.dndd.mutation.Where(ps...)
	return dnddo
}

// Exec executes the deletion query.
func (dnddo *DoNotDisturbDeleteOne) Exec(ctx context.Context) error {
	n, err := dnddo.dndd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{donotdisturb.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dnddo *DoNotDisturbDeleteOne) ExecX(ctx context.Context) {
	if err := dnddo.Exec(ctx); err != nil {
		panic(err)
	}
}
