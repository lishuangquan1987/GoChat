// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gochat_server/ent/messagestatus"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MessageStatus is the model entity for the MessageStatus schema.
type MessageStatus struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 消息记录ID，关联ChatRecord
	ChatRecordId int `json:"chatRecordId,omitempty"`
	// 状态：待发送/发送成功/发送失败/已读
	Status string `json:"status,omitempty"`
	// 失败原因
	FailReason string `json:"failReason,omitempty"`
	// 状态更新时间
	UpdateTime   time.Time `json:"updateTime,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MessageStatus) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case messagestatus.FieldID, messagestatus.FieldChatRecordId:
			values[i] = new(sql.NullInt64)
		case messagestatus.FieldStatus, messagestatus.FieldFailReason:
			values[i] = new(sql.NullString)
		case messagestatus.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MessageStatus fields.
func (ms *MessageStatus) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case messagestatus.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ms.ID = int(value.Int64)
		case messagestatus.FieldChatRecordId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chatRecordId", values[i])
			} else if value.Valid {
				ms.ChatRecordId = int(value.Int64)
			}
		case messagestatus.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ms.Status = value.String
			}
		case messagestatus.FieldFailReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field failReason", values[i])
			} else if value.Valid {
				ms.FailReason = value.String
			}
		case messagestatus.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updateTime", values[i])
			} else if value.Valid {
				ms.UpdateTime = value.Time
			}
		default:
			ms.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MessageStatus.
// This includes values selected through modifiers, order, etc.
func (ms *MessageStatus) Value(name string) (ent.Value, error) {
	return ms.selectValues.Get(name)
}

// Update returns a builder for updating this MessageStatus.
// Note that you need to call MessageStatus.Unwrap() before calling this method if this MessageStatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *MessageStatus) Update() *MessageStatusUpdateOne {
	return NewMessageStatusClient(ms.config).UpdateOne(ms)
}

// Unwrap unwraps the MessageStatus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ms *MessageStatus) Unwrap() *MessageStatus {
	_tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("ent: MessageStatus is not a transactional entity")
	}
	ms.config.driver = _tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *MessageStatus) String() string {
	var builder strings.Builder
	builder.WriteString("MessageStatus(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ms.ID))
	builder.WriteString("chatRecordId=")
	builder.WriteString(fmt.Sprintf("%v", ms.ChatRecordId))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ms.Status)
	builder.WriteString(", ")
	builder.WriteString("failReason=")
	builder.WriteString(ms.FailReason)
	builder.WriteString(", ")
	builder.WriteString("updateTime=")
	builder.WriteString(ms.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MessageStatusSlice is a parsable slice of MessageStatus.
type MessageStatusSlice []*MessageStatus
