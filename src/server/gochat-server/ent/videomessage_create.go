// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/videomessage"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideoMessageCreate is the builder for creating a VideoMessage entity.
type VideoMessageCreate struct {
	config
	mutation *VideoMessageMutation
	hooks    []Hook
}

// SetMsgId sets the "msgId" field.
func (vmc *VideoMessageCreate) SetMsgId(s string) *VideoMessageCreate {
	vmc.mutation.SetMsgId(s)
	return vmc
}

// SetVideoUrl sets the "videoUrl" field.
func (vmc *VideoMessageCreate) SetVideoUrl(s string) *VideoMessageCreate {
	vmc.mutation.SetVideoUrl(s)
	return vmc
}

// Mutation returns the VideoMessageMutation object of the builder.
func (vmc *VideoMessageCreate) Mutation() *VideoMessageMutation {
	return vmc.mutation
}

// Save creates the VideoMessage in the database.
func (vmc *VideoMessageCreate) Save(ctx context.Context) (*VideoMessage, error) {
	return withHooks(ctx, vmc.sqlSave, vmc.mutation, vmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vmc *VideoMessageCreate) SaveX(ctx context.Context) *VideoMessage {
	v, err := vmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vmc *VideoMessageCreate) Exec(ctx context.Context) error {
	_, err := vmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmc *VideoMessageCreate) ExecX(ctx context.Context) {
	if err := vmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vmc *VideoMessageCreate) check() error {
	if _, ok := vmc.mutation.MsgId(); !ok {
		return &ValidationError{Name: "msgId", err: errors.New(`ent: missing required field "VideoMessage.msgId"`)}
	}
	if v, ok := vmc.mutation.MsgId(); ok {
		if err := videomessage.MsgIdValidator(v); err != nil {
			return &ValidationError{Name: "msgId", err: fmt.Errorf(`ent: validator failed for field "VideoMessage.msgId": %w`, err)}
		}
	}
	if _, ok := vmc.mutation.VideoUrl(); !ok {
		return &ValidationError{Name: "videoUrl", err: errors.New(`ent: missing required field "VideoMessage.videoUrl"`)}
	}
	if v, ok := vmc.mutation.VideoUrl(); ok {
		if err := videomessage.VideoUrlValidator(v); err != nil {
			return &ValidationError{Name: "videoUrl", err: fmt.Errorf(`ent: validator failed for field "VideoMessage.videoUrl": %w`, err)}
		}
	}
	return nil
}

func (vmc *VideoMessageCreate) sqlSave(ctx context.Context) (*VideoMessage, error) {
	if err := vmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vmc.mutation.id = &_node.ID
	vmc.mutation.done = true
	return _node, nil
}

func (vmc *VideoMessageCreate) createSpec() (*VideoMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &VideoMessage{config: vmc.config}
		_spec = sqlgraph.NewCreateSpec(videomessage.Table, sqlgraph.NewFieldSpec(videomessage.FieldID, field.TypeInt))
	)
	if value, ok := vmc.mutation.MsgId(); ok {
		_spec.SetField(videomessage.FieldMsgId, field.TypeString, value)
		_node.MsgId = value
	}
	if value, ok := vmc.mutation.VideoUrl(); ok {
		_spec.SetField(videomessage.FieldVideoUrl, field.TypeString, value)
		_node.VideoUrl = value
	}
	return _node, _spec
}

// VideoMessageCreateBulk is the builder for creating many VideoMessage entities in bulk.
type VideoMessageCreateBulk struct {
	config
	err      error
	builders []*VideoMessageCreate
}

// Save creates the VideoMessage entities in the database.
func (vmcb *VideoMessageCreateBulk) Save(ctx context.Context) ([]*VideoMessage, error) {
	if vmcb.err != nil {
		return nil, vmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vmcb.builders))
	nodes := make([]*VideoMessage, len(vmcb.builders))
	mutators := make([]Mutator, len(vmcb.builders))
	for i := range vmcb.builders {
		func(i int, root context.Context) {
			builder := vmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VideoMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vmcb *VideoMessageCreateBulk) SaveX(ctx context.Context) []*VideoMessage {
	v, err := vmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vmcb *VideoMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := vmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmcb *VideoMessageCreateBulk) ExecX(ctx context.Context) {
	if err := vmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
