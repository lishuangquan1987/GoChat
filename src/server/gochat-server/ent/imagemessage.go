// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gochat_server/ent/imagemessage"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ImageMessage is the model entity for the ImageMessage schema.
type ImageMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 消息ID,由发送者产生
	MsgId string `json:"msgId,omitempty"`
	// 图片消息
	ImageUrl     string `json:"imageUrl,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ImageMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case imagemessage.FieldID:
			values[i] = new(sql.NullInt64)
		case imagemessage.FieldMsgId, imagemessage.FieldImageUrl:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ImageMessage fields.
func (im *ImageMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case imagemessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			im.ID = int(value.Int64)
		case imagemessage.FieldMsgId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field msgId", values[i])
			} else if value.Valid {
				im.MsgId = value.String
			}
		case imagemessage.FieldImageUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field imageUrl", values[i])
			} else if value.Valid {
				im.ImageUrl = value.String
			}
		default:
			im.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ImageMessage.
// This includes values selected through modifiers, order, etc.
func (im *ImageMessage) Value(name string) (ent.Value, error) {
	return im.selectValues.Get(name)
}

// Update returns a builder for updating this ImageMessage.
// Note that you need to call ImageMessage.Unwrap() before calling this method if this ImageMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (im *ImageMessage) Update() *ImageMessageUpdateOne {
	return NewImageMessageClient(im.config).UpdateOne(im)
}

// Unwrap unwraps the ImageMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (im *ImageMessage) Unwrap() *ImageMessage {
	_tx, ok := im.config.driver.(*txDriver)
	if !ok {
		panic("ent: ImageMessage is not a transactional entity")
	}
	im.config.driver = _tx.drv
	return im
}

// String implements the fmt.Stringer.
func (im *ImageMessage) String() string {
	var builder strings.Builder
	builder.WriteString("ImageMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", im.ID))
	builder.WriteString("msgId=")
	builder.WriteString(im.MsgId)
	builder.WriteString(", ")
	builder.WriteString("imageUrl=")
	builder.WriteString(im.ImageUrl)
	builder.WriteByte(')')
	return builder.String()
}

// ImageMessages is a parsable slice of ImageMessage.
type ImageMessages []*ImageMessage
