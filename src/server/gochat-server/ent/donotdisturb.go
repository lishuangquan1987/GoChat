// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gochat_server/ent/donotdisturb"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DoNotDisturb is the model entity for the DoNotDisturb schema.
type DoNotDisturb struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID int `json:"id,omitempty"`
	// 用户ID
	UserID int `json:"user_id,omitempty"`
	// 目标用户ID（私聊免打扰）
	TargetUserID *int `json:"target_user_id,omitempty"`
	// 目标群组ID（群聊免打扰）
	TargetGroupID *int `json:"target_group_id,omitempty"`
	// 是否全局免打扰
	IsGlobal bool `json:"is_global,omitempty"`
	// 免打扰开始时间（定时免打扰）
	StartTime *time.Time `json:"start_time,omitempty"`
	// 免打扰结束时间（定时免打扰）
	EndTime *time.Time `json:"end_time,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DoNotDisturb) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case donotdisturb.FieldIsGlobal:
			values[i] = new(sql.NullBool)
		case donotdisturb.FieldID, donotdisturb.FieldUserID, donotdisturb.FieldTargetUserID, donotdisturb.FieldTargetGroupID:
			values[i] = new(sql.NullInt64)
		case donotdisturb.FieldStartTime, donotdisturb.FieldEndTime, donotdisturb.FieldCreatedAt, donotdisturb.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DoNotDisturb fields.
func (dnd *DoNotDisturb) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case donotdisturb.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dnd.ID = int(value.Int64)
		case donotdisturb.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				dnd.UserID = int(value.Int64)
			}
		case donotdisturb.FieldTargetUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_user_id", values[i])
			} else if value.Valid {
				dnd.TargetUserID = new(int)
				*dnd.TargetUserID = int(value.Int64)
			}
		case donotdisturb.FieldTargetGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_group_id", values[i])
			} else if value.Valid {
				dnd.TargetGroupID = new(int)
				*dnd.TargetGroupID = int(value.Int64)
			}
		case donotdisturb.FieldIsGlobal:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_global", values[i])
			} else if value.Valid {
				dnd.IsGlobal = value.Bool
			}
		case donotdisturb.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				dnd.StartTime = new(time.Time)
				*dnd.StartTime = value.Time
			}
		case donotdisturb.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				dnd.EndTime = new(time.Time)
				*dnd.EndTime = value.Time
			}
		case donotdisturb.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dnd.CreatedAt = value.Time
			}
		case donotdisturb.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dnd.UpdatedAt = value.Time
			}
		default:
			dnd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DoNotDisturb.
// This includes values selected through modifiers, order, etc.
func (dnd *DoNotDisturb) Value(name string) (ent.Value, error) {
	return dnd.selectValues.Get(name)
}

// Update returns a builder for updating this DoNotDisturb.
// Note that you need to call DoNotDisturb.Unwrap() before calling this method if this DoNotDisturb
// was returned from a transaction, and the transaction was committed or rolled back.
func (dnd *DoNotDisturb) Update() *DoNotDisturbUpdateOne {
	return NewDoNotDisturbClient(dnd.config).UpdateOne(dnd)
}

// Unwrap unwraps the DoNotDisturb entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dnd *DoNotDisturb) Unwrap() *DoNotDisturb {
	_tx, ok := dnd.config.driver.(*txDriver)
	if !ok {
		panic("ent: DoNotDisturb is not a transactional entity")
	}
	dnd.config.driver = _tx.drv
	return dnd
}

// String implements the fmt.Stringer.
func (dnd *DoNotDisturb) String() string {
	var builder strings.Builder
	builder.WriteString("DoNotDisturb(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dnd.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", dnd.UserID))
	builder.WriteString(", ")
	if v := dnd.TargetUserID; v != nil {
		builder.WriteString("target_user_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := dnd.TargetGroupID; v != nil {
		builder.WriteString("target_group_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("is_global=")
	builder.WriteString(fmt.Sprintf("%v", dnd.IsGlobal))
	builder.WriteString(", ")
	if v := dnd.StartTime; v != nil {
		builder.WriteString("start_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := dnd.EndTime; v != nil {
		builder.WriteString("end_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(dnd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dnd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DoNotDisturbs is a parsable slice of DoNotDisturb.
type DoNotDisturbs []*DoNotDisturb
