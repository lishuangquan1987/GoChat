// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/group"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupCreate is the builder for creating a Group entity.
type GroupCreate struct {
	config
	mutation *GroupMutation
	hooks    []Hook
}

// SetGroupId sets the "groupId" field.
func (gc *GroupCreate) SetGroupId(s string) *GroupCreate {
	gc.mutation.SetGroupId(s)
	return gc
}

// SetGroupName sets the "groupName" field.
func (gc *GroupCreate) SetGroupName(s string) *GroupCreate {
	gc.mutation.SetGroupName(s)
	return gc
}

// SetOwnerId sets the "ownerId" field.
func (gc *GroupCreate) SetOwnerId(i int) *GroupCreate {
	gc.mutation.SetOwnerId(i)
	return gc
}

// SetCreateUserId sets the "createUserId" field.
func (gc *GroupCreate) SetCreateUserId(i int) *GroupCreate {
	gc.mutation.SetCreateUserId(i)
	return gc
}

// SetCreateTime sets the "createTime" field.
func (gc *GroupCreate) SetCreateTime(t time.Time) *GroupCreate {
	gc.mutation.SetCreateTime(t)
	return gc
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (gc *GroupCreate) SetNillableCreateTime(t *time.Time) *GroupCreate {
	if t != nil {
		gc.SetCreateTime(*t)
	}
	return gc
}

// SetMembers sets the "members" field.
func (gc *GroupCreate) SetMembers(i []int) *GroupCreate {
	gc.mutation.SetMembers(i)
	return gc
}

// Mutation returns the GroupMutation object of the builder.
func (gc *GroupCreate) Mutation() *GroupMutation {
	return gc.mutation
}

// Save creates the Group in the database.
func (gc *GroupCreate) Save(ctx context.Context) (*Group, error) {
	gc.defaults()
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GroupCreate) SaveX(ctx context.Context) *Group {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GroupCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GroupCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GroupCreate) defaults() {
	if _, ok := gc.mutation.CreateTime(); !ok {
		v := group.DefaultCreateTime()
		gc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GroupCreate) check() error {
	if _, ok := gc.mutation.GroupId(); !ok {
		return &ValidationError{Name: "groupId", err: errors.New(`ent: missing required field "Group.groupId"`)}
	}
	if v, ok := gc.mutation.GroupId(); ok {
		if err := group.GroupIdValidator(v); err != nil {
			return &ValidationError{Name: "groupId", err: fmt.Errorf(`ent: validator failed for field "Group.groupId": %w`, err)}
		}
	}
	if _, ok := gc.mutation.GroupName(); !ok {
		return &ValidationError{Name: "groupName", err: errors.New(`ent: missing required field "Group.groupName"`)}
	}
	if v, ok := gc.mutation.GroupName(); ok {
		if err := group.GroupNameValidator(v); err != nil {
			return &ValidationError{Name: "groupName", err: fmt.Errorf(`ent: validator failed for field "Group.groupName": %w`, err)}
		}
	}
	if _, ok := gc.mutation.OwnerId(); !ok {
		return &ValidationError{Name: "ownerId", err: errors.New(`ent: missing required field "Group.ownerId"`)}
	}
	if _, ok := gc.mutation.CreateUserId(); !ok {
		return &ValidationError{Name: "createUserId", err: errors.New(`ent: missing required field "Group.createUserId"`)}
	}
	if _, ok := gc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "createTime", err: errors.New(`ent: missing required field "Group.createTime"`)}
	}
	if _, ok := gc.mutation.Members(); !ok {
		return &ValidationError{Name: "members", err: errors.New(`ent: missing required field "Group.members"`)}
	}
	return nil
}

func (gc *GroupCreate) sqlSave(ctx context.Context) (*Group, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GroupCreate) createSpec() (*Group, *sqlgraph.CreateSpec) {
	var (
		_node = &Group{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(group.Table, sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt))
	)
	if value, ok := gc.mutation.GroupId(); ok {
		_spec.SetField(group.FieldGroupId, field.TypeString, value)
		_node.GroupId = value
	}
	if value, ok := gc.mutation.GroupName(); ok {
		_spec.SetField(group.FieldGroupName, field.TypeString, value)
		_node.GroupName = value
	}
	if value, ok := gc.mutation.OwnerId(); ok {
		_spec.SetField(group.FieldOwnerId, field.TypeInt, value)
		_node.OwnerId = value
	}
	if value, ok := gc.mutation.CreateUserId(); ok {
		_spec.SetField(group.FieldCreateUserId, field.TypeInt, value)
		_node.CreateUserId = value
	}
	if value, ok := gc.mutation.CreateTime(); ok {
		_spec.SetField(group.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := gc.mutation.Members(); ok {
		_spec.SetField(group.FieldMembers, field.TypeJSON, value)
		_node.Members = value
	}
	return _node, _spec
}

// GroupCreateBulk is the builder for creating many Group entities in bulk.
type GroupCreateBulk struct {
	config
	err      error
	builders []*GroupCreate
}

// Save creates the Group entities in the database.
func (gcb *GroupCreateBulk) Save(ctx context.Context) ([]*Group, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Group, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GroupCreateBulk) SaveX(ctx context.Context) []*Group {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GroupCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GroupCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
