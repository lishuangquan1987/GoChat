// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/messagestatus"
	"gochat_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageStatusUpdate is the builder for updating MessageStatus entities.
type MessageStatusUpdate struct {
	config
	hooks    []Hook
	mutation *MessageStatusMutation
}

// Where appends a list predicates to the MessageStatusUpdate builder.
func (msu *MessageStatusUpdate) Where(ps ...predicate.MessageStatus) *MessageStatusUpdate {
	msu.mutation.Where(ps...)
	return msu
}

// SetMsgId sets the "msgId" field.
func (msu *MessageStatusUpdate) SetMsgId(s string) *MessageStatusUpdate {
	msu.mutation.SetMsgId(s)
	return msu
}

// SetNillableMsgId sets the "msgId" field if the given value is not nil.
func (msu *MessageStatusUpdate) SetNillableMsgId(s *string) *MessageStatusUpdate {
	if s != nil {
		msu.SetMsgId(*s)
	}
	return msu
}

// SetUserId sets the "userId" field.
func (msu *MessageStatusUpdate) SetUserId(i int) *MessageStatusUpdate {
	msu.mutation.ResetUserId()
	msu.mutation.SetUserId(i)
	return msu
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (msu *MessageStatusUpdate) SetNillableUserId(i *int) *MessageStatusUpdate {
	if i != nil {
		msu.SetUserId(*i)
	}
	return msu
}

// AddUserId adds i to the "userId" field.
func (msu *MessageStatusUpdate) AddUserId(i int) *MessageStatusUpdate {
	msu.mutation.AddUserId(i)
	return msu
}

// SetIsDelivered sets the "isDelivered" field.
func (msu *MessageStatusUpdate) SetIsDelivered(b bool) *MessageStatusUpdate {
	msu.mutation.SetIsDelivered(b)
	return msu
}

// SetNillableIsDelivered sets the "isDelivered" field if the given value is not nil.
func (msu *MessageStatusUpdate) SetNillableIsDelivered(b *bool) *MessageStatusUpdate {
	if b != nil {
		msu.SetIsDelivered(*b)
	}
	return msu
}

// SetIsRead sets the "isRead" field.
func (msu *MessageStatusUpdate) SetIsRead(b bool) *MessageStatusUpdate {
	msu.mutation.SetIsRead(b)
	return msu
}

// SetNillableIsRead sets the "isRead" field if the given value is not nil.
func (msu *MessageStatusUpdate) SetNillableIsRead(b *bool) *MessageStatusUpdate {
	if b != nil {
		msu.SetIsRead(*b)
	}
	return msu
}

// SetDeliveredTime sets the "deliveredTime" field.
func (msu *MessageStatusUpdate) SetDeliveredTime(t time.Time) *MessageStatusUpdate {
	msu.mutation.SetDeliveredTime(t)
	return msu
}

// SetNillableDeliveredTime sets the "deliveredTime" field if the given value is not nil.
func (msu *MessageStatusUpdate) SetNillableDeliveredTime(t *time.Time) *MessageStatusUpdate {
	if t != nil {
		msu.SetDeliveredTime(*t)
	}
	return msu
}

// ClearDeliveredTime clears the value of the "deliveredTime" field.
func (msu *MessageStatusUpdate) ClearDeliveredTime() *MessageStatusUpdate {
	msu.mutation.ClearDeliveredTime()
	return msu
}

// SetReadTime sets the "readTime" field.
func (msu *MessageStatusUpdate) SetReadTime(t time.Time) *MessageStatusUpdate {
	msu.mutation.SetReadTime(t)
	return msu
}

// SetNillableReadTime sets the "readTime" field if the given value is not nil.
func (msu *MessageStatusUpdate) SetNillableReadTime(t *time.Time) *MessageStatusUpdate {
	if t != nil {
		msu.SetReadTime(*t)
	}
	return msu
}

// ClearReadTime clears the value of the "readTime" field.
func (msu *MessageStatusUpdate) ClearReadTime() *MessageStatusUpdate {
	msu.mutation.ClearReadTime()
	return msu
}

// SetCreateTime sets the "createTime" field.
func (msu *MessageStatusUpdate) SetCreateTime(t time.Time) *MessageStatusUpdate {
	msu.mutation.SetCreateTime(t)
	return msu
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (msu *MessageStatusUpdate) SetNillableCreateTime(t *time.Time) *MessageStatusUpdate {
	if t != nil {
		msu.SetCreateTime(*t)
	}
	return msu
}

// Mutation returns the MessageStatusMutation object of the builder.
func (msu *MessageStatusUpdate) Mutation() *MessageStatusMutation {
	return msu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MessageStatusUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, msu.sqlSave, msu.mutation, msu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MessageStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MessageStatusUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MessageStatusUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msu *MessageStatusUpdate) check() error {
	if v, ok := msu.mutation.MsgId(); ok {
		if err := messagestatus.MsgIdValidator(v); err != nil {
			return &ValidationError{Name: "msgId", err: fmt.Errorf(`ent: validator failed for field "MessageStatus.msgId": %w`, err)}
		}
	}
	return nil
}

func (msu *MessageStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := msu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(messagestatus.Table, messagestatus.Columns, sqlgraph.NewFieldSpec(messagestatus.FieldID, field.TypeInt))
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.MsgId(); ok {
		_spec.SetField(messagestatus.FieldMsgId, field.TypeString, value)
	}
	if value, ok := msu.mutation.UserId(); ok {
		_spec.SetField(messagestatus.FieldUserId, field.TypeInt, value)
	}
	if value, ok := msu.mutation.AddedUserId(); ok {
		_spec.AddField(messagestatus.FieldUserId, field.TypeInt, value)
	}
	if value, ok := msu.mutation.IsDelivered(); ok {
		_spec.SetField(messagestatus.FieldIsDelivered, field.TypeBool, value)
	}
	if value, ok := msu.mutation.IsRead(); ok {
		_spec.SetField(messagestatus.FieldIsRead, field.TypeBool, value)
	}
	if value, ok := msu.mutation.DeliveredTime(); ok {
		_spec.SetField(messagestatus.FieldDeliveredTime, field.TypeTime, value)
	}
	if msu.mutation.DeliveredTimeCleared() {
		_spec.ClearField(messagestatus.FieldDeliveredTime, field.TypeTime)
	}
	if value, ok := msu.mutation.ReadTime(); ok {
		_spec.SetField(messagestatus.FieldReadTime, field.TypeTime, value)
	}
	if msu.mutation.ReadTimeCleared() {
		_spec.ClearField(messagestatus.FieldReadTime, field.TypeTime)
	}
	if value, ok := msu.mutation.CreateTime(); ok {
		_spec.SetField(messagestatus.FieldCreateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagestatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	msu.mutation.done = true
	return n, nil
}

// MessageStatusUpdateOne is the builder for updating a single MessageStatus entity.
type MessageStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageStatusMutation
}

// SetMsgId sets the "msgId" field.
func (msuo *MessageStatusUpdateOne) SetMsgId(s string) *MessageStatusUpdateOne {
	msuo.mutation.SetMsgId(s)
	return msuo
}

// SetNillableMsgId sets the "msgId" field if the given value is not nil.
func (msuo *MessageStatusUpdateOne) SetNillableMsgId(s *string) *MessageStatusUpdateOne {
	if s != nil {
		msuo.SetMsgId(*s)
	}
	return msuo
}

// SetUserId sets the "userId" field.
func (msuo *MessageStatusUpdateOne) SetUserId(i int) *MessageStatusUpdateOne {
	msuo.mutation.ResetUserId()
	msuo.mutation.SetUserId(i)
	return msuo
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (msuo *MessageStatusUpdateOne) SetNillableUserId(i *int) *MessageStatusUpdateOne {
	if i != nil {
		msuo.SetUserId(*i)
	}
	return msuo
}

// AddUserId adds i to the "userId" field.
func (msuo *MessageStatusUpdateOne) AddUserId(i int) *MessageStatusUpdateOne {
	msuo.mutation.AddUserId(i)
	return msuo
}

// SetIsDelivered sets the "isDelivered" field.
func (msuo *MessageStatusUpdateOne) SetIsDelivered(b bool) *MessageStatusUpdateOne {
	msuo.mutation.SetIsDelivered(b)
	return msuo
}

// SetNillableIsDelivered sets the "isDelivered" field if the given value is not nil.
func (msuo *MessageStatusUpdateOne) SetNillableIsDelivered(b *bool) *MessageStatusUpdateOne {
	if b != nil {
		msuo.SetIsDelivered(*b)
	}
	return msuo
}

// SetIsRead sets the "isRead" field.
func (msuo *MessageStatusUpdateOne) SetIsRead(b bool) *MessageStatusUpdateOne {
	msuo.mutation.SetIsRead(b)
	return msuo
}

// SetNillableIsRead sets the "isRead" field if the given value is not nil.
func (msuo *MessageStatusUpdateOne) SetNillableIsRead(b *bool) *MessageStatusUpdateOne {
	if b != nil {
		msuo.SetIsRead(*b)
	}
	return msuo
}

// SetDeliveredTime sets the "deliveredTime" field.
func (msuo *MessageStatusUpdateOne) SetDeliveredTime(t time.Time) *MessageStatusUpdateOne {
	msuo.mutation.SetDeliveredTime(t)
	return msuo
}

// SetNillableDeliveredTime sets the "deliveredTime" field if the given value is not nil.
func (msuo *MessageStatusUpdateOne) SetNillableDeliveredTime(t *time.Time) *MessageStatusUpdateOne {
	if t != nil {
		msuo.SetDeliveredTime(*t)
	}
	return msuo
}

// ClearDeliveredTime clears the value of the "deliveredTime" field.
func (msuo *MessageStatusUpdateOne) ClearDeliveredTime() *MessageStatusUpdateOne {
	msuo.mutation.ClearDeliveredTime()
	return msuo
}

// SetReadTime sets the "readTime" field.
func (msuo *MessageStatusUpdateOne) SetReadTime(t time.Time) *MessageStatusUpdateOne {
	msuo.mutation.SetReadTime(t)
	return msuo
}

// SetNillableReadTime sets the "readTime" field if the given value is not nil.
func (msuo *MessageStatusUpdateOne) SetNillableReadTime(t *time.Time) *MessageStatusUpdateOne {
	if t != nil {
		msuo.SetReadTime(*t)
	}
	return msuo
}

// ClearReadTime clears the value of the "readTime" field.
func (msuo *MessageStatusUpdateOne) ClearReadTime() *MessageStatusUpdateOne {
	msuo.mutation.ClearReadTime()
	return msuo
}

// SetCreateTime sets the "createTime" field.
func (msuo *MessageStatusUpdateOne) SetCreateTime(t time.Time) *MessageStatusUpdateOne {
	msuo.mutation.SetCreateTime(t)
	return msuo
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (msuo *MessageStatusUpdateOne) SetNillableCreateTime(t *time.Time) *MessageStatusUpdateOne {
	if t != nil {
		msuo.SetCreateTime(*t)
	}
	return msuo
}

// Mutation returns the MessageStatusMutation object of the builder.
func (msuo *MessageStatusUpdateOne) Mutation() *MessageStatusMutation {
	return msuo.mutation
}

// Where appends a list predicates to the MessageStatusUpdate builder.
func (msuo *MessageStatusUpdateOne) Where(ps ...predicate.MessageStatus) *MessageStatusUpdateOne {
	msuo.mutation.Where(ps...)
	return msuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (msuo *MessageStatusUpdateOne) Select(field string, fields ...string) *MessageStatusUpdateOne {
	msuo.fields = append([]string{field}, fields...)
	return msuo
}

// Save executes the query and returns the updated MessageStatus entity.
func (msuo *MessageStatusUpdateOne) Save(ctx context.Context) (*MessageStatus, error) {
	return withHooks(ctx, msuo.sqlSave, msuo.mutation, msuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MessageStatusUpdateOne) SaveX(ctx context.Context) *MessageStatus {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MessageStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MessageStatusUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msuo *MessageStatusUpdateOne) check() error {
	if v, ok := msuo.mutation.MsgId(); ok {
		if err := messagestatus.MsgIdValidator(v); err != nil {
			return &ValidationError{Name: "msgId", err: fmt.Errorf(`ent: validator failed for field "MessageStatus.msgId": %w`, err)}
		}
	}
	return nil
}

func (msuo *MessageStatusUpdateOne) sqlSave(ctx context.Context) (_node *MessageStatus, err error) {
	if err := msuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(messagestatus.Table, messagestatus.Columns, sqlgraph.NewFieldSpec(messagestatus.FieldID, field.TypeInt))
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MessageStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := msuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, messagestatus.FieldID)
		for _, f := range fields {
			if !messagestatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != messagestatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := msuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msuo.mutation.MsgId(); ok {
		_spec.SetField(messagestatus.FieldMsgId, field.TypeString, value)
	}
	if value, ok := msuo.mutation.UserId(); ok {
		_spec.SetField(messagestatus.FieldUserId, field.TypeInt, value)
	}
	if value, ok := msuo.mutation.AddedUserId(); ok {
		_spec.AddField(messagestatus.FieldUserId, field.TypeInt, value)
	}
	if value, ok := msuo.mutation.IsDelivered(); ok {
		_spec.SetField(messagestatus.FieldIsDelivered, field.TypeBool, value)
	}
	if value, ok := msuo.mutation.IsRead(); ok {
		_spec.SetField(messagestatus.FieldIsRead, field.TypeBool, value)
	}
	if value, ok := msuo.mutation.DeliveredTime(); ok {
		_spec.SetField(messagestatus.FieldDeliveredTime, field.TypeTime, value)
	}
	if msuo.mutation.DeliveredTimeCleared() {
		_spec.ClearField(messagestatus.FieldDeliveredTime, field.TypeTime)
	}
	if value, ok := msuo.mutation.ReadTime(); ok {
		_spec.SetField(messagestatus.FieldReadTime, field.TypeTime, value)
	}
	if msuo.mutation.ReadTimeCleared() {
		_spec.ClearField(messagestatus.FieldReadTime, field.TypeTime)
	}
	if value, ok := msuo.mutation.CreateTime(); ok {
		_spec.SetField(messagestatus.FieldCreateTime, field.TypeTime, value)
	}
	_node = &MessageStatus{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagestatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	msuo.mutation.done = true
	return _node, nil
}
