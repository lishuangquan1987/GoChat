// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/messagestatus"
	"gochat_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageStatusUpdate is the builder for updating MessageStatus entities.
type MessageStatusUpdate struct {
	config
	hooks    []Hook
	mutation *MessageStatusMutation
}

// Where appends a list predicates to the MessageStatusUpdate builder.
func (msu *MessageStatusUpdate) Where(ps ...predicate.MessageStatus) *MessageStatusUpdate {
	msu.mutation.Where(ps...)
	return msu
}

// SetChatRecordId sets the "chatRecordId" field.
func (msu *MessageStatusUpdate) SetChatRecordId(i int) *MessageStatusUpdate {
	msu.mutation.ResetChatRecordId()
	msu.mutation.SetChatRecordId(i)
	return msu
}

// SetNillableChatRecordId sets the "chatRecordId" field if the given value is not nil.
func (msu *MessageStatusUpdate) SetNillableChatRecordId(i *int) *MessageStatusUpdate {
	if i != nil {
		msu.SetChatRecordId(*i)
	}
	return msu
}

// AddChatRecordId adds i to the "chatRecordId" field.
func (msu *MessageStatusUpdate) AddChatRecordId(i int) *MessageStatusUpdate {
	msu.mutation.AddChatRecordId(i)
	return msu
}

// SetStatus sets the "status" field.
func (msu *MessageStatusUpdate) SetStatus(s string) *MessageStatusUpdate {
	msu.mutation.SetStatus(s)
	return msu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (msu *MessageStatusUpdate) SetNillableStatus(s *string) *MessageStatusUpdate {
	if s != nil {
		msu.SetStatus(*s)
	}
	return msu
}

// SetFailReason sets the "failReason" field.
func (msu *MessageStatusUpdate) SetFailReason(s string) *MessageStatusUpdate {
	msu.mutation.SetFailReason(s)
	return msu
}

// SetNillableFailReason sets the "failReason" field if the given value is not nil.
func (msu *MessageStatusUpdate) SetNillableFailReason(s *string) *MessageStatusUpdate {
	if s != nil {
		msu.SetFailReason(*s)
	}
	return msu
}

// ClearFailReason clears the value of the "failReason" field.
func (msu *MessageStatusUpdate) ClearFailReason() *MessageStatusUpdate {
	msu.mutation.ClearFailReason()
	return msu
}

// SetUpdateTime sets the "updateTime" field.
func (msu *MessageStatusUpdate) SetUpdateTime(t time.Time) *MessageStatusUpdate {
	msu.mutation.SetUpdateTime(t)
	return msu
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (msu *MessageStatusUpdate) SetNillableUpdateTime(t *time.Time) *MessageStatusUpdate {
	if t != nil {
		msu.SetUpdateTime(*t)
	}
	return msu
}

// Mutation returns the MessageStatusMutation object of the builder.
func (msu *MessageStatusUpdate) Mutation() *MessageStatusMutation {
	return msu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MessageStatusUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, msu.sqlSave, msu.mutation, msu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MessageStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MessageStatusUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MessageStatusUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msu *MessageStatusUpdate) check() error {
	if v, ok := msu.mutation.Status(); ok {
		if err := messagestatus.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MessageStatus.status": %w`, err)}
		}
	}
	return nil
}

func (msu *MessageStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := msu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(messagestatus.Table, messagestatus.Columns, sqlgraph.NewFieldSpec(messagestatus.FieldID, field.TypeInt))
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.ChatRecordId(); ok {
		_spec.SetField(messagestatus.FieldChatRecordId, field.TypeInt, value)
	}
	if value, ok := msu.mutation.AddedChatRecordId(); ok {
		_spec.AddField(messagestatus.FieldChatRecordId, field.TypeInt, value)
	}
	if value, ok := msu.mutation.Status(); ok {
		_spec.SetField(messagestatus.FieldStatus, field.TypeString, value)
	}
	if value, ok := msu.mutation.FailReason(); ok {
		_spec.SetField(messagestatus.FieldFailReason, field.TypeString, value)
	}
	if msu.mutation.FailReasonCleared() {
		_spec.ClearField(messagestatus.FieldFailReason, field.TypeString)
	}
	if value, ok := msu.mutation.UpdateTime(); ok {
		_spec.SetField(messagestatus.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagestatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	msu.mutation.done = true
	return n, nil
}

// MessageStatusUpdateOne is the builder for updating a single MessageStatus entity.
type MessageStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageStatusMutation
}

// SetChatRecordId sets the "chatRecordId" field.
func (msuo *MessageStatusUpdateOne) SetChatRecordId(i int) *MessageStatusUpdateOne {
	msuo.mutation.ResetChatRecordId()
	msuo.mutation.SetChatRecordId(i)
	return msuo
}

// SetNillableChatRecordId sets the "chatRecordId" field if the given value is not nil.
func (msuo *MessageStatusUpdateOne) SetNillableChatRecordId(i *int) *MessageStatusUpdateOne {
	if i != nil {
		msuo.SetChatRecordId(*i)
	}
	return msuo
}

// AddChatRecordId adds i to the "chatRecordId" field.
func (msuo *MessageStatusUpdateOne) AddChatRecordId(i int) *MessageStatusUpdateOne {
	msuo.mutation.AddChatRecordId(i)
	return msuo
}

// SetStatus sets the "status" field.
func (msuo *MessageStatusUpdateOne) SetStatus(s string) *MessageStatusUpdateOne {
	msuo.mutation.SetStatus(s)
	return msuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (msuo *MessageStatusUpdateOne) SetNillableStatus(s *string) *MessageStatusUpdateOne {
	if s != nil {
		msuo.SetStatus(*s)
	}
	return msuo
}

// SetFailReason sets the "failReason" field.
func (msuo *MessageStatusUpdateOne) SetFailReason(s string) *MessageStatusUpdateOne {
	msuo.mutation.SetFailReason(s)
	return msuo
}

// SetNillableFailReason sets the "failReason" field if the given value is not nil.
func (msuo *MessageStatusUpdateOne) SetNillableFailReason(s *string) *MessageStatusUpdateOne {
	if s != nil {
		msuo.SetFailReason(*s)
	}
	return msuo
}

// ClearFailReason clears the value of the "failReason" field.
func (msuo *MessageStatusUpdateOne) ClearFailReason() *MessageStatusUpdateOne {
	msuo.mutation.ClearFailReason()
	return msuo
}

// SetUpdateTime sets the "updateTime" field.
func (msuo *MessageStatusUpdateOne) SetUpdateTime(t time.Time) *MessageStatusUpdateOne {
	msuo.mutation.SetUpdateTime(t)
	return msuo
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (msuo *MessageStatusUpdateOne) SetNillableUpdateTime(t *time.Time) *MessageStatusUpdateOne {
	if t != nil {
		msuo.SetUpdateTime(*t)
	}
	return msuo
}

// Mutation returns the MessageStatusMutation object of the builder.
func (msuo *MessageStatusUpdateOne) Mutation() *MessageStatusMutation {
	return msuo.mutation
}

// Where appends a list predicates to the MessageStatusUpdate builder.
func (msuo *MessageStatusUpdateOne) Where(ps ...predicate.MessageStatus) *MessageStatusUpdateOne {
	msuo.mutation.Where(ps...)
	return msuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (msuo *MessageStatusUpdateOne) Select(field string, fields ...string) *MessageStatusUpdateOne {
	msuo.fields = append([]string{field}, fields...)
	return msuo
}

// Save executes the query and returns the updated MessageStatus entity.
func (msuo *MessageStatusUpdateOne) Save(ctx context.Context) (*MessageStatus, error) {
	return withHooks(ctx, msuo.sqlSave, msuo.mutation, msuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MessageStatusUpdateOne) SaveX(ctx context.Context) *MessageStatus {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MessageStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MessageStatusUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msuo *MessageStatusUpdateOne) check() error {
	if v, ok := msuo.mutation.Status(); ok {
		if err := messagestatus.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MessageStatus.status": %w`, err)}
		}
	}
	return nil
}

func (msuo *MessageStatusUpdateOne) sqlSave(ctx context.Context) (_node *MessageStatus, err error) {
	if err := msuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(messagestatus.Table, messagestatus.Columns, sqlgraph.NewFieldSpec(messagestatus.FieldID, field.TypeInt))
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MessageStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := msuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, messagestatus.FieldID)
		for _, f := range fields {
			if !messagestatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != messagestatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := msuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msuo.mutation.ChatRecordId(); ok {
		_spec.SetField(messagestatus.FieldChatRecordId, field.TypeInt, value)
	}
	if value, ok := msuo.mutation.AddedChatRecordId(); ok {
		_spec.AddField(messagestatus.FieldChatRecordId, field.TypeInt, value)
	}
	if value, ok := msuo.mutation.Status(); ok {
		_spec.SetField(messagestatus.FieldStatus, field.TypeString, value)
	}
	if value, ok := msuo.mutation.FailReason(); ok {
		_spec.SetField(messagestatus.FieldFailReason, field.TypeString, value)
	}
	if msuo.mutation.FailReasonCleared() {
		_spec.ClearField(messagestatus.FieldFailReason, field.TypeString)
	}
	if value, ok := msuo.mutation.UpdateTime(); ok {
		_spec.SetField(messagestatus.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &MessageStatus{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagestatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	msuo.mutation.done = true
	return _node, nil
}
