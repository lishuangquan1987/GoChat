// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gochat_server/ent/friendrequest"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FriendRequest is the model entity for the FriendRequest schema.
type FriendRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 发送者ID
	FromUserId int `json:"fromUserId,omitempty"`
	// 接收者ID
	ToUserId int `json:"toUserId,omitempty"`
	// 备注信息
	Remark string `json:"remark,omitempty"`
	// 状态: 0-待处理, 1-已接受, 2-已拒绝
	Status int `json:"status,omitempty"`
	// 创建时间
	CreateTime   time.Time `json:"createTime,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FriendRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case friendrequest.FieldID, friendrequest.FieldFromUserId, friendrequest.FieldToUserId, friendrequest.FieldStatus:
			values[i] = new(sql.NullInt64)
		case friendrequest.FieldRemark:
			values[i] = new(sql.NullString)
		case friendrequest.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FriendRequest fields.
func (fr *FriendRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case friendrequest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fr.ID = int(value.Int64)
		case friendrequest.FieldFromUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fromUserId", values[i])
			} else if value.Valid {
				fr.FromUserId = int(value.Int64)
			}
		case friendrequest.FieldToUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field toUserId", values[i])
			} else if value.Valid {
				fr.ToUserId = int(value.Int64)
			}
		case friendrequest.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				fr.Remark = value.String
			}
		case friendrequest.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				fr.Status = int(value.Int64)
			}
		case friendrequest.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createTime", values[i])
			} else if value.Valid {
				fr.CreateTime = value.Time
			}
		default:
			fr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FriendRequest.
// This includes values selected through modifiers, order, etc.
func (fr *FriendRequest) Value(name string) (ent.Value, error) {
	return fr.selectValues.Get(name)
}

// Update returns a builder for updating this FriendRequest.
// Note that you need to call FriendRequest.Unwrap() before calling this method if this FriendRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (fr *FriendRequest) Update() *FriendRequestUpdateOne {
	return NewFriendRequestClient(fr.config).UpdateOne(fr)
}

// Unwrap unwraps the FriendRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fr *FriendRequest) Unwrap() *FriendRequest {
	_tx, ok := fr.config.driver.(*txDriver)
	if !ok {
		panic("ent: FriendRequest is not a transactional entity")
	}
	fr.config.driver = _tx.drv
	return fr
}

// String implements the fmt.Stringer.
func (fr *FriendRequest) String() string {
	var builder strings.Builder
	builder.WriteString("FriendRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fr.ID))
	builder.WriteString("fromUserId=")
	builder.WriteString(fmt.Sprintf("%v", fr.FromUserId))
	builder.WriteString(", ")
	builder.WriteString("toUserId=")
	builder.WriteString(fmt.Sprintf("%v", fr.ToUserId))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(fr.Remark)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", fr.Status))
	builder.WriteString(", ")
	builder.WriteString("createTime=")
	builder.WriteString(fr.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FriendRequests is a parsable slice of FriendRequest.
type FriendRequests []*FriendRequest
