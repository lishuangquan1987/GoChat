// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/predicate"
	"gochat_server/ent/textmessage"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TextMessageUpdate is the builder for updating TextMessage entities.
type TextMessageUpdate struct {
	config
	hooks    []Hook
	mutation *TextMessageMutation
}

// Where appends a list predicates to the TextMessageUpdate builder.
func (tmu *TextMessageUpdate) Where(ps ...predicate.TextMessage) *TextMessageUpdate {
	tmu.mutation.Where(ps...)
	return tmu
}

// SetMsgId sets the "msgId" field.
func (tmu *TextMessageUpdate) SetMsgId(s string) *TextMessageUpdate {
	tmu.mutation.SetMsgId(s)
	return tmu
}

// SetNillableMsgId sets the "msgId" field if the given value is not nil.
func (tmu *TextMessageUpdate) SetNillableMsgId(s *string) *TextMessageUpdate {
	if s != nil {
		tmu.SetMsgId(*s)
	}
	return tmu
}

// SetText sets the "text" field.
func (tmu *TextMessageUpdate) SetText(s string) *TextMessageUpdate {
	tmu.mutation.SetText(s)
	return tmu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (tmu *TextMessageUpdate) SetNillableText(s *string) *TextMessageUpdate {
	if s != nil {
		tmu.SetText(*s)
	}
	return tmu
}

// Mutation returns the TextMessageMutation object of the builder.
func (tmu *TextMessageUpdate) Mutation() *TextMessageMutation {
	return tmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tmu *TextMessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tmu.sqlSave, tmu.mutation, tmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmu *TextMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := tmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tmu *TextMessageUpdate) Exec(ctx context.Context) error {
	_, err := tmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmu *TextMessageUpdate) ExecX(ctx context.Context) {
	if err := tmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmu *TextMessageUpdate) check() error {
	if v, ok := tmu.mutation.MsgId(); ok {
		if err := textmessage.MsgIdValidator(v); err != nil {
			return &ValidationError{Name: "msgId", err: fmt.Errorf(`ent: validator failed for field "TextMessage.msgId": %w`, err)}
		}
	}
	if v, ok := tmu.mutation.Text(); ok {
		if err := textmessage.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "TextMessage.text": %w`, err)}
		}
	}
	return nil
}

func (tmu *TextMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(textmessage.Table, textmessage.Columns, sqlgraph.NewFieldSpec(textmessage.FieldID, field.TypeInt))
	if ps := tmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmu.mutation.MsgId(); ok {
		_spec.SetField(textmessage.FieldMsgId, field.TypeString, value)
	}
	if value, ok := tmu.mutation.Text(); ok {
		_spec.SetField(textmessage.FieldText, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{textmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tmu.mutation.done = true
	return n, nil
}

// TextMessageUpdateOne is the builder for updating a single TextMessage entity.
type TextMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TextMessageMutation
}

// SetMsgId sets the "msgId" field.
func (tmuo *TextMessageUpdateOne) SetMsgId(s string) *TextMessageUpdateOne {
	tmuo.mutation.SetMsgId(s)
	return tmuo
}

// SetNillableMsgId sets the "msgId" field if the given value is not nil.
func (tmuo *TextMessageUpdateOne) SetNillableMsgId(s *string) *TextMessageUpdateOne {
	if s != nil {
		tmuo.SetMsgId(*s)
	}
	return tmuo
}

// SetText sets the "text" field.
func (tmuo *TextMessageUpdateOne) SetText(s string) *TextMessageUpdateOne {
	tmuo.mutation.SetText(s)
	return tmuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (tmuo *TextMessageUpdateOne) SetNillableText(s *string) *TextMessageUpdateOne {
	if s != nil {
		tmuo.SetText(*s)
	}
	return tmuo
}

// Mutation returns the TextMessageMutation object of the builder.
func (tmuo *TextMessageUpdateOne) Mutation() *TextMessageMutation {
	return tmuo.mutation
}

// Where appends a list predicates to the TextMessageUpdate builder.
func (tmuo *TextMessageUpdateOne) Where(ps ...predicate.TextMessage) *TextMessageUpdateOne {
	tmuo.mutation.Where(ps...)
	return tmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tmuo *TextMessageUpdateOne) Select(field string, fields ...string) *TextMessageUpdateOne {
	tmuo.fields = append([]string{field}, fields...)
	return tmuo
}

// Save executes the query and returns the updated TextMessage entity.
func (tmuo *TextMessageUpdateOne) Save(ctx context.Context) (*TextMessage, error) {
	return withHooks(ctx, tmuo.sqlSave, tmuo.mutation, tmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmuo *TextMessageUpdateOne) SaveX(ctx context.Context) *TextMessage {
	node, err := tmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tmuo *TextMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := tmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmuo *TextMessageUpdateOne) ExecX(ctx context.Context) {
	if err := tmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmuo *TextMessageUpdateOne) check() error {
	if v, ok := tmuo.mutation.MsgId(); ok {
		if err := textmessage.MsgIdValidator(v); err != nil {
			return &ValidationError{Name: "msgId", err: fmt.Errorf(`ent: validator failed for field "TextMessage.msgId": %w`, err)}
		}
	}
	if v, ok := tmuo.mutation.Text(); ok {
		if err := textmessage.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "TextMessage.text": %w`, err)}
		}
	}
	return nil
}

func (tmuo *TextMessageUpdateOne) sqlSave(ctx context.Context) (_node *TextMessage, err error) {
	if err := tmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(textmessage.Table, textmessage.Columns, sqlgraph.NewFieldSpec(textmessage.FieldID, field.TypeInt))
	id, ok := tmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TextMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, textmessage.FieldID)
		for _, f := range fields {
			if !textmessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != textmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmuo.mutation.MsgId(); ok {
		_spec.SetField(textmessage.FieldMsgId, field.TypeString, value)
	}
	if value, ok := tmuo.mutation.Text(); ok {
		_spec.SetField(textmessage.FieldText, field.TypeString, value)
	}
	_node = &TextMessage{config: tmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{textmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tmuo.mutation.done = true
	return _node, nil
}
