// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gochat_server/ent/friendrelationship"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FriendRelationship is the model entity for the FriendRelationship schema.
type FriendRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 用户ID
	UserId int `json:"userId,omitempty"`
	// 好友ID
	FriendId     int `json:"friendId,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FriendRelationship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case friendrelationship.FieldID, friendrelationship.FieldUserId, friendrelationship.FieldFriendId:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FriendRelationship fields.
func (fr *FriendRelationship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case friendrelationship.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fr.ID = int(value.Int64)
		case friendrelationship.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				fr.UserId = int(value.Int64)
			}
		case friendrelationship.FieldFriendId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field friendId", values[i])
			} else if value.Valid {
				fr.FriendId = int(value.Int64)
			}
		default:
			fr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FriendRelationship.
// This includes values selected through modifiers, order, etc.
func (fr *FriendRelationship) Value(name string) (ent.Value, error) {
	return fr.selectValues.Get(name)
}

// Update returns a builder for updating this FriendRelationship.
// Note that you need to call FriendRelationship.Unwrap() before calling this method if this FriendRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (fr *FriendRelationship) Update() *FriendRelationshipUpdateOne {
	return NewFriendRelationshipClient(fr.config).UpdateOne(fr)
}

// Unwrap unwraps the FriendRelationship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fr *FriendRelationship) Unwrap() *FriendRelationship {
	_tx, ok := fr.config.driver.(*txDriver)
	if !ok {
		panic("ent: FriendRelationship is not a transactional entity")
	}
	fr.config.driver = _tx.drv
	return fr
}

// String implements the fmt.Stringer.
func (fr *FriendRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("FriendRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fr.ID))
	builder.WriteString("userId=")
	builder.WriteString(fmt.Sprintf("%v", fr.UserId))
	builder.WriteString(", ")
	builder.WriteString("friendId=")
	builder.WriteString(fmt.Sprintf("%v", fr.FriendId))
	builder.WriteByte(')')
	return builder.String()
}

// FriendRelationships is a parsable slice of FriendRelationship.
type FriendRelationships []*FriendRelationship
