// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/groupchatrecord"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupChatRecordCreate is the builder for creating a GroupChatRecord entity.
type GroupChatRecordCreate struct {
	config
	mutation *GroupChatRecordMutation
	hooks    []Hook
}

// SetMsgId sets the "msgId" field.
func (gcrc *GroupChatRecordCreate) SetMsgId(s string) *GroupChatRecordCreate {
	gcrc.mutation.SetMsgId(s)
	return gcrc
}

// SetFromUserId sets the "fromUserId" field.
func (gcrc *GroupChatRecordCreate) SetFromUserId(s string) *GroupChatRecordCreate {
	gcrc.mutation.SetFromUserId(s)
	return gcrc
}

// SetGroupId sets the "groupId" field.
func (gcrc *GroupChatRecordCreate) SetGroupId(s string) *GroupChatRecordCreate {
	gcrc.mutation.SetGroupId(s)
	return gcrc
}

// SetMsgType sets the "msgType" field.
func (gcrc *GroupChatRecordCreate) SetMsgType(s string) *GroupChatRecordCreate {
	gcrc.mutation.SetMsgType(s)
	return gcrc
}

// SetCreateTime sets the "createTime" field.
func (gcrc *GroupChatRecordCreate) SetCreateTime(t time.Time) *GroupChatRecordCreate {
	gcrc.mutation.SetCreateTime(t)
	return gcrc
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (gcrc *GroupChatRecordCreate) SetNillableCreateTime(t *time.Time) *GroupChatRecordCreate {
	if t != nil {
		gcrc.SetCreateTime(*t)
	}
	return gcrc
}

// Mutation returns the GroupChatRecordMutation object of the builder.
func (gcrc *GroupChatRecordCreate) Mutation() *GroupChatRecordMutation {
	return gcrc.mutation
}

// Save creates the GroupChatRecord in the database.
func (gcrc *GroupChatRecordCreate) Save(ctx context.Context) (*GroupChatRecord, error) {
	gcrc.defaults()
	return withHooks(ctx, gcrc.sqlSave, gcrc.mutation, gcrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gcrc *GroupChatRecordCreate) SaveX(ctx context.Context) *GroupChatRecord {
	v, err := gcrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcrc *GroupChatRecordCreate) Exec(ctx context.Context) error {
	_, err := gcrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcrc *GroupChatRecordCreate) ExecX(ctx context.Context) {
	if err := gcrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcrc *GroupChatRecordCreate) defaults() {
	if _, ok := gcrc.mutation.CreateTime(); !ok {
		v := groupchatrecord.DefaultCreateTime()
		gcrc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gcrc *GroupChatRecordCreate) check() error {
	if _, ok := gcrc.mutation.MsgId(); !ok {
		return &ValidationError{Name: "msgId", err: errors.New(`ent: missing required field "GroupChatRecord.msgId"`)}
	}
	if v, ok := gcrc.mutation.MsgId(); ok {
		if err := groupchatrecord.MsgIdValidator(v); err != nil {
			return &ValidationError{Name: "msgId", err: fmt.Errorf(`ent: validator failed for field "GroupChatRecord.msgId": %w`, err)}
		}
	}
	if _, ok := gcrc.mutation.FromUserId(); !ok {
		return &ValidationError{Name: "fromUserId", err: errors.New(`ent: missing required field "GroupChatRecord.fromUserId"`)}
	}
	if v, ok := gcrc.mutation.FromUserId(); ok {
		if err := groupchatrecord.FromUserIdValidator(v); err != nil {
			return &ValidationError{Name: "fromUserId", err: fmt.Errorf(`ent: validator failed for field "GroupChatRecord.fromUserId": %w`, err)}
		}
	}
	if _, ok := gcrc.mutation.GroupId(); !ok {
		return &ValidationError{Name: "groupId", err: errors.New(`ent: missing required field "GroupChatRecord.groupId"`)}
	}
	if v, ok := gcrc.mutation.GroupId(); ok {
		if err := groupchatrecord.GroupIdValidator(v); err != nil {
			return &ValidationError{Name: "groupId", err: fmt.Errorf(`ent: validator failed for field "GroupChatRecord.groupId": %w`, err)}
		}
	}
	if _, ok := gcrc.mutation.MsgType(); !ok {
		return &ValidationError{Name: "msgType", err: errors.New(`ent: missing required field "GroupChatRecord.msgType"`)}
	}
	if v, ok := gcrc.mutation.MsgType(); ok {
		if err := groupchatrecord.MsgTypeValidator(v); err != nil {
			return &ValidationError{Name: "msgType", err: fmt.Errorf(`ent: validator failed for field "GroupChatRecord.msgType": %w`, err)}
		}
	}
	if _, ok := gcrc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "createTime", err: errors.New(`ent: missing required field "GroupChatRecord.createTime"`)}
	}
	return nil
}

func (gcrc *GroupChatRecordCreate) sqlSave(ctx context.Context) (*GroupChatRecord, error) {
	if err := gcrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gcrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gcrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gcrc.mutation.id = &_node.ID
	gcrc.mutation.done = true
	return _node, nil
}

func (gcrc *GroupChatRecordCreate) createSpec() (*GroupChatRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &GroupChatRecord{config: gcrc.config}
		_spec = sqlgraph.NewCreateSpec(groupchatrecord.Table, sqlgraph.NewFieldSpec(groupchatrecord.FieldID, field.TypeInt))
	)
	if value, ok := gcrc.mutation.MsgId(); ok {
		_spec.SetField(groupchatrecord.FieldMsgId, field.TypeString, value)
		_node.MsgId = value
	}
	if value, ok := gcrc.mutation.FromUserId(); ok {
		_spec.SetField(groupchatrecord.FieldFromUserId, field.TypeString, value)
		_node.FromUserId = value
	}
	if value, ok := gcrc.mutation.GroupId(); ok {
		_spec.SetField(groupchatrecord.FieldGroupId, field.TypeString, value)
		_node.GroupId = value
	}
	if value, ok := gcrc.mutation.MsgType(); ok {
		_spec.SetField(groupchatrecord.FieldMsgType, field.TypeString, value)
		_node.MsgType = value
	}
	if value, ok := gcrc.mutation.CreateTime(); ok {
		_spec.SetField(groupchatrecord.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	return _node, _spec
}

// GroupChatRecordCreateBulk is the builder for creating many GroupChatRecord entities in bulk.
type GroupChatRecordCreateBulk struct {
	config
	err      error
	builders []*GroupChatRecordCreate
}

// Save creates the GroupChatRecord entities in the database.
func (gcrcb *GroupChatRecordCreateBulk) Save(ctx context.Context) ([]*GroupChatRecord, error) {
	if gcrcb.err != nil {
		return nil, gcrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcrcb.builders))
	nodes := make([]*GroupChatRecord, len(gcrcb.builders))
	mutators := make([]Mutator, len(gcrcb.builders))
	for i := range gcrcb.builders {
		func(i int, root context.Context) {
			builder := gcrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupChatRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcrcb *GroupChatRecordCreateBulk) SaveX(ctx context.Context) []*GroupChatRecord {
	v, err := gcrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcrcb *GroupChatRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := gcrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcrcb *GroupChatRecordCreateBulk) ExecX(ctx context.Context) {
	if err := gcrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
