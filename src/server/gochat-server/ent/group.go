// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"gochat_server/ent/group"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Group is the model entity for the Group schema.
type Group struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 群组ID,由群创建的时候产生
	GroupId string `json:"groupId,omitempty"`
	// 群组名称
	GroupName string `json:"groupName,omitempty"`
	// 群主ID
	OwnerId string `json:"ownerId,omitempty"`
	// 创建者ID
	CreateUserId string `json:"createUserId,omitempty"`
	// 群组创建时间
	CreateTime string `json:"createTime,omitempty"`
	// 群组成员ID
	Members      []string `json:"members,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Group) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case group.FieldMembers:
			values[i] = new([]byte)
		case group.FieldID:
			values[i] = new(sql.NullInt64)
		case group.FieldGroupId, group.FieldGroupName, group.FieldOwnerId, group.FieldCreateUserId, group.FieldCreateTime:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Group fields.
func (gr *Group) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case group.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gr.ID = int(value.Int64)
		case group.FieldGroupId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field groupId", values[i])
			} else if value.Valid {
				gr.GroupId = value.String
			}
		case group.FieldGroupName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field groupName", values[i])
			} else if value.Valid {
				gr.GroupName = value.String
			}
		case group.FieldOwnerId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ownerId", values[i])
			} else if value.Valid {
				gr.OwnerId = value.String
			}
		case group.FieldCreateUserId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field createUserId", values[i])
			} else if value.Valid {
				gr.CreateUserId = value.String
			}
		case group.FieldCreateTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field createTime", values[i])
			} else if value.Valid {
				gr.CreateTime = value.String
			}
		case group.FieldMembers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field members", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gr.Members); err != nil {
					return fmt.Errorf("unmarshal field members: %w", err)
				}
			}
		default:
			gr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Group.
// This includes values selected through modifiers, order, etc.
func (gr *Group) Value(name string) (ent.Value, error) {
	return gr.selectValues.Get(name)
}

// Update returns a builder for updating this Group.
// Note that you need to call Group.Unwrap() before calling this method if this Group
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *Group) Update() *GroupUpdateOne {
	return NewGroupClient(gr.config).UpdateOne(gr)
}

// Unwrap unwraps the Group entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *Group) Unwrap() *Group {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Group is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *Group) String() string {
	var builder strings.Builder
	builder.WriteString("Group(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	builder.WriteString("groupId=")
	builder.WriteString(gr.GroupId)
	builder.WriteString(", ")
	builder.WriteString("groupName=")
	builder.WriteString(gr.GroupName)
	builder.WriteString(", ")
	builder.WriteString("ownerId=")
	builder.WriteString(gr.OwnerId)
	builder.WriteString(", ")
	builder.WriteString("createUserId=")
	builder.WriteString(gr.CreateUserId)
	builder.WriteString(", ")
	builder.WriteString("createTime=")
	builder.WriteString(gr.CreateTime)
	builder.WriteString(", ")
	builder.WriteString("members=")
	builder.WriteString(fmt.Sprintf("%v", gr.Members))
	builder.WriteByte(')')
	return builder.String()
}

// Groups is a parsable slice of Group.
type Groups []*Group
