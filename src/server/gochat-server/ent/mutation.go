// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/chatrecord"
	"gochat_server/ent/donotdisturb"
	"gochat_server/ent/friendrelationship"
	"gochat_server/ent/friendrequest"
	"gochat_server/ent/group"
	"gochat_server/ent/groupchatrecord"
	"gochat_server/ent/imagemessage"
	"gochat_server/ent/message"
	"gochat_server/ent/messagestatus"
	"gochat_server/ent/predicate"
	"gochat_server/ent/textmessage"
	"gochat_server/ent/user"
	"gochat_server/ent/videomessage"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChatRecord         = "ChatRecord"
	TypeDoNotDisturb       = "DoNotDisturb"
	TypeFriendRelationship = "FriendRelationship"
	TypeFriendRequest      = "FriendRequest"
	TypeGroup              = "Group"
	TypeGroupChatRecord    = "GroupChatRecord"
	TypeImageMessage       = "ImageMessage"
	TypeMessage            = "Message"
	TypeMessageStatus      = "MessageStatus"
	TypeTextMessage        = "TextMessage"
	TypeUser               = "User"
	TypeVideoMessage       = "VideoMessage"
)

// ChatRecordMutation represents an operation that mutates the ChatRecord nodes in the graph.
type ChatRecordMutation struct {
	config
	op            Op
	typ           string
	id            *int
	msgId         *string
	fromUserId    *int
	addfromUserId *int
	toUserId      *int
	addtoUserId   *int
	msgType       *int
	addmsgType    *int
	isGroup       *bool
	groupId       *int
	addgroupId    *int
	createTime    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ChatRecord, error)
	predicates    []predicate.ChatRecord
}

var _ ent.Mutation = (*ChatRecordMutation)(nil)

// chatrecordOption allows management of the mutation configuration using functional options.
type chatrecordOption func(*ChatRecordMutation)

// newChatRecordMutation creates new mutation for the ChatRecord entity.
func newChatRecordMutation(c config, op Op, opts ...chatrecordOption) *ChatRecordMutation {
	m := &ChatRecordMutation{
		config:        c,
		op:            op,
		typ:           TypeChatRecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatRecordID sets the ID field of the mutation.
func withChatRecordID(id int) chatrecordOption {
	return func(m *ChatRecordMutation) {
		var (
			err   error
			once  sync.Once
			value *ChatRecord
		)
		m.oldValue = func(ctx context.Context) (*ChatRecord, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChatRecord.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChatRecord sets the old ChatRecord of the mutation.
func withChatRecord(node *ChatRecord) chatrecordOption {
	return func(m *ChatRecordMutation) {
		m.oldValue = func(context.Context) (*ChatRecord, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatRecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatRecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatRecordMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChatRecordMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ChatRecord.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMsgId sets the "msgId" field.
func (m *ChatRecordMutation) SetMsgId(s string) {
	m.msgId = &s
}

// MsgId returns the value of the "msgId" field in the mutation.
func (m *ChatRecordMutation) MsgId() (r string, exists bool) {
	v := m.msgId
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgId returns the old "msgId" field's value of the ChatRecord entity.
// If the ChatRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatRecordMutation) OldMsgId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgId: %w", err)
	}
	return oldValue.MsgId, nil
}

// ResetMsgId resets all changes to the "msgId" field.
func (m *ChatRecordMutation) ResetMsgId() {
	m.msgId = nil
}

// SetFromUserId sets the "fromUserId" field.
func (m *ChatRecordMutation) SetFromUserId(i int) {
	m.fromUserId = &i
	m.addfromUserId = nil
}

// FromUserId returns the value of the "fromUserId" field in the mutation.
func (m *ChatRecordMutation) FromUserId() (r int, exists bool) {
	v := m.fromUserId
	if v == nil {
		return
	}
	return *v, true
}

// OldFromUserId returns the old "fromUserId" field's value of the ChatRecord entity.
// If the ChatRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatRecordMutation) OldFromUserId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromUserId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromUserId: %w", err)
	}
	return oldValue.FromUserId, nil
}

// AddFromUserId adds i to the "fromUserId" field.
func (m *ChatRecordMutation) AddFromUserId(i int) {
	if m.addfromUserId != nil {
		*m.addfromUserId += i
	} else {
		m.addfromUserId = &i
	}
}

// AddedFromUserId returns the value that was added to the "fromUserId" field in this mutation.
func (m *ChatRecordMutation) AddedFromUserId() (r int, exists bool) {
	v := m.addfromUserId
	if v == nil {
		return
	}
	return *v, true
}

// ResetFromUserId resets all changes to the "fromUserId" field.
func (m *ChatRecordMutation) ResetFromUserId() {
	m.fromUserId = nil
	m.addfromUserId = nil
}

// SetToUserId sets the "toUserId" field.
func (m *ChatRecordMutation) SetToUserId(i int) {
	m.toUserId = &i
	m.addtoUserId = nil
}

// ToUserId returns the value of the "toUserId" field in the mutation.
func (m *ChatRecordMutation) ToUserId() (r int, exists bool) {
	v := m.toUserId
	if v == nil {
		return
	}
	return *v, true
}

// OldToUserId returns the old "toUserId" field's value of the ChatRecord entity.
// If the ChatRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatRecordMutation) OldToUserId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToUserId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToUserId: %w", err)
	}
	return oldValue.ToUserId, nil
}

// AddToUserId adds i to the "toUserId" field.
func (m *ChatRecordMutation) AddToUserId(i int) {
	if m.addtoUserId != nil {
		*m.addtoUserId += i
	} else {
		m.addtoUserId = &i
	}
}

// AddedToUserId returns the value that was added to the "toUserId" field in this mutation.
func (m *ChatRecordMutation) AddedToUserId() (r int, exists bool) {
	v := m.addtoUserId
	if v == nil {
		return
	}
	return *v, true
}

// ResetToUserId resets all changes to the "toUserId" field.
func (m *ChatRecordMutation) ResetToUserId() {
	m.toUserId = nil
	m.addtoUserId = nil
}

// SetMsgType sets the "msgType" field.
func (m *ChatRecordMutation) SetMsgType(i int) {
	m.msgType = &i
	m.addmsgType = nil
}

// MsgType returns the value of the "msgType" field in the mutation.
func (m *ChatRecordMutation) MsgType() (r int, exists bool) {
	v := m.msgType
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgType returns the old "msgType" field's value of the ChatRecord entity.
// If the ChatRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatRecordMutation) OldMsgType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgType: %w", err)
	}
	return oldValue.MsgType, nil
}

// AddMsgType adds i to the "msgType" field.
func (m *ChatRecordMutation) AddMsgType(i int) {
	if m.addmsgType != nil {
		*m.addmsgType += i
	} else {
		m.addmsgType = &i
	}
}

// AddedMsgType returns the value that was added to the "msgType" field in this mutation.
func (m *ChatRecordMutation) AddedMsgType() (r int, exists bool) {
	v := m.addmsgType
	if v == nil {
		return
	}
	return *v, true
}

// ResetMsgType resets all changes to the "msgType" field.
func (m *ChatRecordMutation) ResetMsgType() {
	m.msgType = nil
	m.addmsgType = nil
}

// SetIsGroup sets the "isGroup" field.
func (m *ChatRecordMutation) SetIsGroup(b bool) {
	m.isGroup = &b
}

// IsGroup returns the value of the "isGroup" field in the mutation.
func (m *ChatRecordMutation) IsGroup() (r bool, exists bool) {
	v := m.isGroup
	if v == nil {
		return
	}
	return *v, true
}

// OldIsGroup returns the old "isGroup" field's value of the ChatRecord entity.
// If the ChatRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatRecordMutation) OldIsGroup(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsGroup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsGroup: %w", err)
	}
	return oldValue.IsGroup, nil
}

// ResetIsGroup resets all changes to the "isGroup" field.
func (m *ChatRecordMutation) ResetIsGroup() {
	m.isGroup = nil
}

// SetGroupId sets the "groupId" field.
func (m *ChatRecordMutation) SetGroupId(i int) {
	m.groupId = &i
	m.addgroupId = nil
}

// GroupId returns the value of the "groupId" field in the mutation.
func (m *ChatRecordMutation) GroupId() (r int, exists bool) {
	v := m.groupId
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupId returns the old "groupId" field's value of the ChatRecord entity.
// If the ChatRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatRecordMutation) OldGroupId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupId: %w", err)
	}
	return oldValue.GroupId, nil
}

// AddGroupId adds i to the "groupId" field.
func (m *ChatRecordMutation) AddGroupId(i int) {
	if m.addgroupId != nil {
		*m.addgroupId += i
	} else {
		m.addgroupId = &i
	}
}

// AddedGroupId returns the value that was added to the "groupId" field in this mutation.
func (m *ChatRecordMutation) AddedGroupId() (r int, exists bool) {
	v := m.addgroupId
	if v == nil {
		return
	}
	return *v, true
}

// ClearGroupId clears the value of the "groupId" field.
func (m *ChatRecordMutation) ClearGroupId() {
	m.groupId = nil
	m.addgroupId = nil
	m.clearedFields[chatrecord.FieldGroupId] = struct{}{}
}

// GroupIdCleared returns if the "groupId" field was cleared in this mutation.
func (m *ChatRecordMutation) GroupIdCleared() bool {
	_, ok := m.clearedFields[chatrecord.FieldGroupId]
	return ok
}

// ResetGroupId resets all changes to the "groupId" field.
func (m *ChatRecordMutation) ResetGroupId() {
	m.groupId = nil
	m.addgroupId = nil
	delete(m.clearedFields, chatrecord.FieldGroupId)
}

// SetCreateTime sets the "createTime" field.
func (m *ChatRecordMutation) SetCreateTime(t time.Time) {
	m.createTime = &t
}

// CreateTime returns the value of the "createTime" field in the mutation.
func (m *ChatRecordMutation) CreateTime() (r time.Time, exists bool) {
	v := m.createTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "createTime" field's value of the ChatRecord entity.
// If the ChatRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatRecordMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "createTime" field.
func (m *ChatRecordMutation) ResetCreateTime() {
	m.createTime = nil
}

// Where appends a list predicates to the ChatRecordMutation builder.
func (m *ChatRecordMutation) Where(ps ...predicate.ChatRecord) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChatRecordMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChatRecordMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ChatRecord, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChatRecordMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChatRecordMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ChatRecord).
func (m *ChatRecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatRecordMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.msgId != nil {
		fields = append(fields, chatrecord.FieldMsgId)
	}
	if m.fromUserId != nil {
		fields = append(fields, chatrecord.FieldFromUserId)
	}
	if m.toUserId != nil {
		fields = append(fields, chatrecord.FieldToUserId)
	}
	if m.msgType != nil {
		fields = append(fields, chatrecord.FieldMsgType)
	}
	if m.isGroup != nil {
		fields = append(fields, chatrecord.FieldIsGroup)
	}
	if m.groupId != nil {
		fields = append(fields, chatrecord.FieldGroupId)
	}
	if m.createTime != nil {
		fields = append(fields, chatrecord.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatRecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chatrecord.FieldMsgId:
		return m.MsgId()
	case chatrecord.FieldFromUserId:
		return m.FromUserId()
	case chatrecord.FieldToUserId:
		return m.ToUserId()
	case chatrecord.FieldMsgType:
		return m.MsgType()
	case chatrecord.FieldIsGroup:
		return m.IsGroup()
	case chatrecord.FieldGroupId:
		return m.GroupId()
	case chatrecord.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatRecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chatrecord.FieldMsgId:
		return m.OldMsgId(ctx)
	case chatrecord.FieldFromUserId:
		return m.OldFromUserId(ctx)
	case chatrecord.FieldToUserId:
		return m.OldToUserId(ctx)
	case chatrecord.FieldMsgType:
		return m.OldMsgType(ctx)
	case chatrecord.FieldIsGroup:
		return m.OldIsGroup(ctx)
	case chatrecord.FieldGroupId:
		return m.OldGroupId(ctx)
	case chatrecord.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown ChatRecord field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatRecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chatrecord.FieldMsgId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgId(v)
		return nil
	case chatrecord.FieldFromUserId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromUserId(v)
		return nil
	case chatrecord.FieldToUserId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToUserId(v)
		return nil
	case chatrecord.FieldMsgType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgType(v)
		return nil
	case chatrecord.FieldIsGroup:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsGroup(v)
		return nil
	case chatrecord.FieldGroupId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupId(v)
		return nil
	case chatrecord.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown ChatRecord field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatRecordMutation) AddedFields() []string {
	var fields []string
	if m.addfromUserId != nil {
		fields = append(fields, chatrecord.FieldFromUserId)
	}
	if m.addtoUserId != nil {
		fields = append(fields, chatrecord.FieldToUserId)
	}
	if m.addmsgType != nil {
		fields = append(fields, chatrecord.FieldMsgType)
	}
	if m.addgroupId != nil {
		fields = append(fields, chatrecord.FieldGroupId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatRecordMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case chatrecord.FieldFromUserId:
		return m.AddedFromUserId()
	case chatrecord.FieldToUserId:
		return m.AddedToUserId()
	case chatrecord.FieldMsgType:
		return m.AddedMsgType()
	case chatrecord.FieldGroupId:
		return m.AddedGroupId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatRecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	case chatrecord.FieldFromUserId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFromUserId(v)
		return nil
	case chatrecord.FieldToUserId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddToUserId(v)
		return nil
	case chatrecord.FieldMsgType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMsgType(v)
		return nil
	case chatrecord.FieldGroupId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGroupId(v)
		return nil
	}
	return fmt.Errorf("unknown ChatRecord numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatRecordMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(chatrecord.FieldGroupId) {
		fields = append(fields, chatrecord.FieldGroupId)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatRecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatRecordMutation) ClearField(name string) error {
	switch name {
	case chatrecord.FieldGroupId:
		m.ClearGroupId()
		return nil
	}
	return fmt.Errorf("unknown ChatRecord nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatRecordMutation) ResetField(name string) error {
	switch name {
	case chatrecord.FieldMsgId:
		m.ResetMsgId()
		return nil
	case chatrecord.FieldFromUserId:
		m.ResetFromUserId()
		return nil
	case chatrecord.FieldToUserId:
		m.ResetToUserId()
		return nil
	case chatrecord.FieldMsgType:
		m.ResetMsgType()
		return nil
	case chatrecord.FieldIsGroup:
		m.ResetIsGroup()
		return nil
	case chatrecord.FieldGroupId:
		m.ResetGroupId()
		return nil
	case chatrecord.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown ChatRecord field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatRecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatRecordMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatRecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatRecordMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatRecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatRecordMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatRecordMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ChatRecord unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatRecordMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ChatRecord edge %s", name)
}

// DoNotDisturbMutation represents an operation that mutates the DoNotDisturb nodes in the graph.
type DoNotDisturbMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	user_id            *int
	adduser_id         *int
	target_user_id     *int
	addtarget_user_id  *int
	target_group_id    *int
	addtarget_group_id *int
	is_global          *bool
	start_time         *time.Time
	end_time           *time.Time
	created_at         *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*DoNotDisturb, error)
	predicates         []predicate.DoNotDisturb
}

var _ ent.Mutation = (*DoNotDisturbMutation)(nil)

// donotdisturbOption allows management of the mutation configuration using functional options.
type donotdisturbOption func(*DoNotDisturbMutation)

// newDoNotDisturbMutation creates new mutation for the DoNotDisturb entity.
func newDoNotDisturbMutation(c config, op Op, opts ...donotdisturbOption) *DoNotDisturbMutation {
	m := &DoNotDisturbMutation{
		config:        c,
		op:            op,
		typ:           TypeDoNotDisturb,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDoNotDisturbID sets the ID field of the mutation.
func withDoNotDisturbID(id int) donotdisturbOption {
	return func(m *DoNotDisturbMutation) {
		var (
			err   error
			once  sync.Once
			value *DoNotDisturb
		)
		m.oldValue = func(ctx context.Context) (*DoNotDisturb, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DoNotDisturb.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDoNotDisturb sets the old DoNotDisturb of the mutation.
func withDoNotDisturb(node *DoNotDisturb) donotdisturbOption {
	return func(m *DoNotDisturbMutation) {
		m.oldValue = func(context.Context) (*DoNotDisturb, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DoNotDisturbMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DoNotDisturbMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DoNotDisturb entities.
func (m *DoNotDisturbMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DoNotDisturbMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DoNotDisturbMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DoNotDisturb.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *DoNotDisturbMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *DoNotDisturbMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the DoNotDisturb entity.
// If the DoNotDisturb object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DoNotDisturbMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *DoNotDisturbMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *DoNotDisturbMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *DoNotDisturbMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetTargetUserID sets the "target_user_id" field.
func (m *DoNotDisturbMutation) SetTargetUserID(i int) {
	m.target_user_id = &i
	m.addtarget_user_id = nil
}

// TargetUserID returns the value of the "target_user_id" field in the mutation.
func (m *DoNotDisturbMutation) TargetUserID() (r int, exists bool) {
	v := m.target_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetUserID returns the old "target_user_id" field's value of the DoNotDisturb entity.
// If the DoNotDisturb object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DoNotDisturbMutation) OldTargetUserID(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetUserID: %w", err)
	}
	return oldValue.TargetUserID, nil
}

// AddTargetUserID adds i to the "target_user_id" field.
func (m *DoNotDisturbMutation) AddTargetUserID(i int) {
	if m.addtarget_user_id != nil {
		*m.addtarget_user_id += i
	} else {
		m.addtarget_user_id = &i
	}
}

// AddedTargetUserID returns the value that was added to the "target_user_id" field in this mutation.
func (m *DoNotDisturbMutation) AddedTargetUserID() (r int, exists bool) {
	v := m.addtarget_user_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTargetUserID clears the value of the "target_user_id" field.
func (m *DoNotDisturbMutation) ClearTargetUserID() {
	m.target_user_id = nil
	m.addtarget_user_id = nil
	m.clearedFields[donotdisturb.FieldTargetUserID] = struct{}{}
}

// TargetUserIDCleared returns if the "target_user_id" field was cleared in this mutation.
func (m *DoNotDisturbMutation) TargetUserIDCleared() bool {
	_, ok := m.clearedFields[donotdisturb.FieldTargetUserID]
	return ok
}

// ResetTargetUserID resets all changes to the "target_user_id" field.
func (m *DoNotDisturbMutation) ResetTargetUserID() {
	m.target_user_id = nil
	m.addtarget_user_id = nil
	delete(m.clearedFields, donotdisturb.FieldTargetUserID)
}

// SetTargetGroupID sets the "target_group_id" field.
func (m *DoNotDisturbMutation) SetTargetGroupID(i int) {
	m.target_group_id = &i
	m.addtarget_group_id = nil
}

// TargetGroupID returns the value of the "target_group_id" field in the mutation.
func (m *DoNotDisturbMutation) TargetGroupID() (r int, exists bool) {
	v := m.target_group_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetGroupID returns the old "target_group_id" field's value of the DoNotDisturb entity.
// If the DoNotDisturb object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DoNotDisturbMutation) OldTargetGroupID(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetGroupID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetGroupID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetGroupID: %w", err)
	}
	return oldValue.TargetGroupID, nil
}

// AddTargetGroupID adds i to the "target_group_id" field.
func (m *DoNotDisturbMutation) AddTargetGroupID(i int) {
	if m.addtarget_group_id != nil {
		*m.addtarget_group_id += i
	} else {
		m.addtarget_group_id = &i
	}
}

// AddedTargetGroupID returns the value that was added to the "target_group_id" field in this mutation.
func (m *DoNotDisturbMutation) AddedTargetGroupID() (r int, exists bool) {
	v := m.addtarget_group_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTargetGroupID clears the value of the "target_group_id" field.
func (m *DoNotDisturbMutation) ClearTargetGroupID() {
	m.target_group_id = nil
	m.addtarget_group_id = nil
	m.clearedFields[donotdisturb.FieldTargetGroupID] = struct{}{}
}

// TargetGroupIDCleared returns if the "target_group_id" field was cleared in this mutation.
func (m *DoNotDisturbMutation) TargetGroupIDCleared() bool {
	_, ok := m.clearedFields[donotdisturb.FieldTargetGroupID]
	return ok
}

// ResetTargetGroupID resets all changes to the "target_group_id" field.
func (m *DoNotDisturbMutation) ResetTargetGroupID() {
	m.target_group_id = nil
	m.addtarget_group_id = nil
	delete(m.clearedFields, donotdisturb.FieldTargetGroupID)
}

// SetIsGlobal sets the "is_global" field.
func (m *DoNotDisturbMutation) SetIsGlobal(b bool) {
	m.is_global = &b
}

// IsGlobal returns the value of the "is_global" field in the mutation.
func (m *DoNotDisturbMutation) IsGlobal() (r bool, exists bool) {
	v := m.is_global
	if v == nil {
		return
	}
	return *v, true
}

// OldIsGlobal returns the old "is_global" field's value of the DoNotDisturb entity.
// If the DoNotDisturb object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DoNotDisturbMutation) OldIsGlobal(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsGlobal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsGlobal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsGlobal: %w", err)
	}
	return oldValue.IsGlobal, nil
}

// ResetIsGlobal resets all changes to the "is_global" field.
func (m *DoNotDisturbMutation) ResetIsGlobal() {
	m.is_global = nil
}

// SetStartTime sets the "start_time" field.
func (m *DoNotDisturbMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *DoNotDisturbMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the DoNotDisturb entity.
// If the DoNotDisturb object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DoNotDisturbMutation) OldStartTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ClearStartTime clears the value of the "start_time" field.
func (m *DoNotDisturbMutation) ClearStartTime() {
	m.start_time = nil
	m.clearedFields[donotdisturb.FieldStartTime] = struct{}{}
}

// StartTimeCleared returns if the "start_time" field was cleared in this mutation.
func (m *DoNotDisturbMutation) StartTimeCleared() bool {
	_, ok := m.clearedFields[donotdisturb.FieldStartTime]
	return ok
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *DoNotDisturbMutation) ResetStartTime() {
	m.start_time = nil
	delete(m.clearedFields, donotdisturb.FieldStartTime)
}

// SetEndTime sets the "end_time" field.
func (m *DoNotDisturbMutation) SetEndTime(t time.Time) {
	m.end_time = &t
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *DoNotDisturbMutation) EndTime() (r time.Time, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the DoNotDisturb entity.
// If the DoNotDisturb object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DoNotDisturbMutation) OldEndTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ClearEndTime clears the value of the "end_time" field.
func (m *DoNotDisturbMutation) ClearEndTime() {
	m.end_time = nil
	m.clearedFields[donotdisturb.FieldEndTime] = struct{}{}
}

// EndTimeCleared returns if the "end_time" field was cleared in this mutation.
func (m *DoNotDisturbMutation) EndTimeCleared() bool {
	_, ok := m.clearedFields[donotdisturb.FieldEndTime]
	return ok
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *DoNotDisturbMutation) ResetEndTime() {
	m.end_time = nil
	delete(m.clearedFields, donotdisturb.FieldEndTime)
}

// SetCreatedAt sets the "created_at" field.
func (m *DoNotDisturbMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DoNotDisturbMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DoNotDisturb entity.
// If the DoNotDisturb object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DoNotDisturbMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DoNotDisturbMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DoNotDisturbMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DoNotDisturbMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DoNotDisturb entity.
// If the DoNotDisturb object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DoNotDisturbMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DoNotDisturbMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the DoNotDisturbMutation builder.
func (m *DoNotDisturbMutation) Where(ps ...predicate.DoNotDisturb) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DoNotDisturbMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DoNotDisturbMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DoNotDisturb, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DoNotDisturbMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DoNotDisturbMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DoNotDisturb).
func (m *DoNotDisturbMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DoNotDisturbMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.user_id != nil {
		fields = append(fields, donotdisturb.FieldUserID)
	}
	if m.target_user_id != nil {
		fields = append(fields, donotdisturb.FieldTargetUserID)
	}
	if m.target_group_id != nil {
		fields = append(fields, donotdisturb.FieldTargetGroupID)
	}
	if m.is_global != nil {
		fields = append(fields, donotdisturb.FieldIsGlobal)
	}
	if m.start_time != nil {
		fields = append(fields, donotdisturb.FieldStartTime)
	}
	if m.end_time != nil {
		fields = append(fields, donotdisturb.FieldEndTime)
	}
	if m.created_at != nil {
		fields = append(fields, donotdisturb.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, donotdisturb.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DoNotDisturbMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case donotdisturb.FieldUserID:
		return m.UserID()
	case donotdisturb.FieldTargetUserID:
		return m.TargetUserID()
	case donotdisturb.FieldTargetGroupID:
		return m.TargetGroupID()
	case donotdisturb.FieldIsGlobal:
		return m.IsGlobal()
	case donotdisturb.FieldStartTime:
		return m.StartTime()
	case donotdisturb.FieldEndTime:
		return m.EndTime()
	case donotdisturb.FieldCreatedAt:
		return m.CreatedAt()
	case donotdisturb.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DoNotDisturbMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case donotdisturb.FieldUserID:
		return m.OldUserID(ctx)
	case donotdisturb.FieldTargetUserID:
		return m.OldTargetUserID(ctx)
	case donotdisturb.FieldTargetGroupID:
		return m.OldTargetGroupID(ctx)
	case donotdisturb.FieldIsGlobal:
		return m.OldIsGlobal(ctx)
	case donotdisturb.FieldStartTime:
		return m.OldStartTime(ctx)
	case donotdisturb.FieldEndTime:
		return m.OldEndTime(ctx)
	case donotdisturb.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case donotdisturb.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown DoNotDisturb field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DoNotDisturbMutation) SetField(name string, value ent.Value) error {
	switch name {
	case donotdisturb.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case donotdisturb.FieldTargetUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetUserID(v)
		return nil
	case donotdisturb.FieldTargetGroupID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetGroupID(v)
		return nil
	case donotdisturb.FieldIsGlobal:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsGlobal(v)
		return nil
	case donotdisturb.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case donotdisturb.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	case donotdisturb.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case donotdisturb.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown DoNotDisturb field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DoNotDisturbMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, donotdisturb.FieldUserID)
	}
	if m.addtarget_user_id != nil {
		fields = append(fields, donotdisturb.FieldTargetUserID)
	}
	if m.addtarget_group_id != nil {
		fields = append(fields, donotdisturb.FieldTargetGroupID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DoNotDisturbMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case donotdisturb.FieldUserID:
		return m.AddedUserID()
	case donotdisturb.FieldTargetUserID:
		return m.AddedTargetUserID()
	case donotdisturb.FieldTargetGroupID:
		return m.AddedTargetGroupID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DoNotDisturbMutation) AddField(name string, value ent.Value) error {
	switch name {
	case donotdisturb.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case donotdisturb.FieldTargetUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTargetUserID(v)
		return nil
	case donotdisturb.FieldTargetGroupID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTargetGroupID(v)
		return nil
	}
	return fmt.Errorf("unknown DoNotDisturb numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DoNotDisturbMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(donotdisturb.FieldTargetUserID) {
		fields = append(fields, donotdisturb.FieldTargetUserID)
	}
	if m.FieldCleared(donotdisturb.FieldTargetGroupID) {
		fields = append(fields, donotdisturb.FieldTargetGroupID)
	}
	if m.FieldCleared(donotdisturb.FieldStartTime) {
		fields = append(fields, donotdisturb.FieldStartTime)
	}
	if m.FieldCleared(donotdisturb.FieldEndTime) {
		fields = append(fields, donotdisturb.FieldEndTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DoNotDisturbMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DoNotDisturbMutation) ClearField(name string) error {
	switch name {
	case donotdisturb.FieldTargetUserID:
		m.ClearTargetUserID()
		return nil
	case donotdisturb.FieldTargetGroupID:
		m.ClearTargetGroupID()
		return nil
	case donotdisturb.FieldStartTime:
		m.ClearStartTime()
		return nil
	case donotdisturb.FieldEndTime:
		m.ClearEndTime()
		return nil
	}
	return fmt.Errorf("unknown DoNotDisturb nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DoNotDisturbMutation) ResetField(name string) error {
	switch name {
	case donotdisturb.FieldUserID:
		m.ResetUserID()
		return nil
	case donotdisturb.FieldTargetUserID:
		m.ResetTargetUserID()
		return nil
	case donotdisturb.FieldTargetGroupID:
		m.ResetTargetGroupID()
		return nil
	case donotdisturb.FieldIsGlobal:
		m.ResetIsGlobal()
		return nil
	case donotdisturb.FieldStartTime:
		m.ResetStartTime()
		return nil
	case donotdisturb.FieldEndTime:
		m.ResetEndTime()
		return nil
	case donotdisturb.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case donotdisturb.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown DoNotDisturb field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DoNotDisturbMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DoNotDisturbMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DoNotDisturbMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DoNotDisturbMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DoNotDisturbMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DoNotDisturbMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DoNotDisturbMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DoNotDisturb unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DoNotDisturbMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DoNotDisturb edge %s", name)
}

// FriendRelationshipMutation represents an operation that mutates the FriendRelationship nodes in the graph.
type FriendRelationshipMutation struct {
	config
	op            Op
	typ           string
	id            *int
	userId        *int
	adduserId     *int
	friendId      *int
	addfriendId   *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FriendRelationship, error)
	predicates    []predicate.FriendRelationship
}

var _ ent.Mutation = (*FriendRelationshipMutation)(nil)

// friendrelationshipOption allows management of the mutation configuration using functional options.
type friendrelationshipOption func(*FriendRelationshipMutation)

// newFriendRelationshipMutation creates new mutation for the FriendRelationship entity.
func newFriendRelationshipMutation(c config, op Op, opts ...friendrelationshipOption) *FriendRelationshipMutation {
	m := &FriendRelationshipMutation{
		config:        c,
		op:            op,
		typ:           TypeFriendRelationship,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFriendRelationshipID sets the ID field of the mutation.
func withFriendRelationshipID(id int) friendrelationshipOption {
	return func(m *FriendRelationshipMutation) {
		var (
			err   error
			once  sync.Once
			value *FriendRelationship
		)
		m.oldValue = func(ctx context.Context) (*FriendRelationship, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FriendRelationship.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFriendRelationship sets the old FriendRelationship of the mutation.
func withFriendRelationship(node *FriendRelationship) friendrelationshipOption {
	return func(m *FriendRelationshipMutation) {
		m.oldValue = func(context.Context) (*FriendRelationship, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FriendRelationshipMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FriendRelationshipMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FriendRelationshipMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FriendRelationshipMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FriendRelationship.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserId sets the "userId" field.
func (m *FriendRelationshipMutation) SetUserId(i int) {
	m.userId = &i
	m.adduserId = nil
}

// UserId returns the value of the "userId" field in the mutation.
func (m *FriendRelationshipMutation) UserId() (r int, exists bool) {
	v := m.userId
	if v == nil {
		return
	}
	return *v, true
}

// OldUserId returns the old "userId" field's value of the FriendRelationship entity.
// If the FriendRelationship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FriendRelationshipMutation) OldUserId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserId: %w", err)
	}
	return oldValue.UserId, nil
}

// AddUserId adds i to the "userId" field.
func (m *FriendRelationshipMutation) AddUserId(i int) {
	if m.adduserId != nil {
		*m.adduserId += i
	} else {
		m.adduserId = &i
	}
}

// AddedUserId returns the value that was added to the "userId" field in this mutation.
func (m *FriendRelationshipMutation) AddedUserId() (r int, exists bool) {
	v := m.adduserId
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserId resets all changes to the "userId" field.
func (m *FriendRelationshipMutation) ResetUserId() {
	m.userId = nil
	m.adduserId = nil
}

// SetFriendId sets the "friendId" field.
func (m *FriendRelationshipMutation) SetFriendId(i int) {
	m.friendId = &i
	m.addfriendId = nil
}

// FriendId returns the value of the "friendId" field in the mutation.
func (m *FriendRelationshipMutation) FriendId() (r int, exists bool) {
	v := m.friendId
	if v == nil {
		return
	}
	return *v, true
}

// OldFriendId returns the old "friendId" field's value of the FriendRelationship entity.
// If the FriendRelationship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FriendRelationshipMutation) OldFriendId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFriendId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFriendId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFriendId: %w", err)
	}
	return oldValue.FriendId, nil
}

// AddFriendId adds i to the "friendId" field.
func (m *FriendRelationshipMutation) AddFriendId(i int) {
	if m.addfriendId != nil {
		*m.addfriendId += i
	} else {
		m.addfriendId = &i
	}
}

// AddedFriendId returns the value that was added to the "friendId" field in this mutation.
func (m *FriendRelationshipMutation) AddedFriendId() (r int, exists bool) {
	v := m.addfriendId
	if v == nil {
		return
	}
	return *v, true
}

// ResetFriendId resets all changes to the "friendId" field.
func (m *FriendRelationshipMutation) ResetFriendId() {
	m.friendId = nil
	m.addfriendId = nil
}

// Where appends a list predicates to the FriendRelationshipMutation builder.
func (m *FriendRelationshipMutation) Where(ps ...predicate.FriendRelationship) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FriendRelationshipMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FriendRelationshipMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FriendRelationship, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FriendRelationshipMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FriendRelationshipMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FriendRelationship).
func (m *FriendRelationshipMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FriendRelationshipMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.userId != nil {
		fields = append(fields, friendrelationship.FieldUserId)
	}
	if m.friendId != nil {
		fields = append(fields, friendrelationship.FieldFriendId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FriendRelationshipMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case friendrelationship.FieldUserId:
		return m.UserId()
	case friendrelationship.FieldFriendId:
		return m.FriendId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FriendRelationshipMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case friendrelationship.FieldUserId:
		return m.OldUserId(ctx)
	case friendrelationship.FieldFriendId:
		return m.OldFriendId(ctx)
	}
	return nil, fmt.Errorf("unknown FriendRelationship field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FriendRelationshipMutation) SetField(name string, value ent.Value) error {
	switch name {
	case friendrelationship.FieldUserId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserId(v)
		return nil
	case friendrelationship.FieldFriendId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFriendId(v)
		return nil
	}
	return fmt.Errorf("unknown FriendRelationship field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FriendRelationshipMutation) AddedFields() []string {
	var fields []string
	if m.adduserId != nil {
		fields = append(fields, friendrelationship.FieldUserId)
	}
	if m.addfriendId != nil {
		fields = append(fields, friendrelationship.FieldFriendId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FriendRelationshipMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case friendrelationship.FieldUserId:
		return m.AddedUserId()
	case friendrelationship.FieldFriendId:
		return m.AddedFriendId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FriendRelationshipMutation) AddField(name string, value ent.Value) error {
	switch name {
	case friendrelationship.FieldUserId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserId(v)
		return nil
	case friendrelationship.FieldFriendId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFriendId(v)
		return nil
	}
	return fmt.Errorf("unknown FriendRelationship numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FriendRelationshipMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FriendRelationshipMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FriendRelationshipMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FriendRelationship nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FriendRelationshipMutation) ResetField(name string) error {
	switch name {
	case friendrelationship.FieldUserId:
		m.ResetUserId()
		return nil
	case friendrelationship.FieldFriendId:
		m.ResetFriendId()
		return nil
	}
	return fmt.Errorf("unknown FriendRelationship field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FriendRelationshipMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FriendRelationshipMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FriendRelationshipMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FriendRelationshipMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FriendRelationshipMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FriendRelationshipMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FriendRelationshipMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FriendRelationship unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FriendRelationshipMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FriendRelationship edge %s", name)
}

// FriendRequestMutation represents an operation that mutates the FriendRequest nodes in the graph.
type FriendRequestMutation struct {
	config
	op            Op
	typ           string
	id            *int
	fromUserId    *int
	addfromUserId *int
	toUserId      *int
	addtoUserId   *int
	remark        *string
	status        *int
	addstatus     *int
	createTime    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FriendRequest, error)
	predicates    []predicate.FriendRequest
}

var _ ent.Mutation = (*FriendRequestMutation)(nil)

// friendrequestOption allows management of the mutation configuration using functional options.
type friendrequestOption func(*FriendRequestMutation)

// newFriendRequestMutation creates new mutation for the FriendRequest entity.
func newFriendRequestMutation(c config, op Op, opts ...friendrequestOption) *FriendRequestMutation {
	m := &FriendRequestMutation{
		config:        c,
		op:            op,
		typ:           TypeFriendRequest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFriendRequestID sets the ID field of the mutation.
func withFriendRequestID(id int) friendrequestOption {
	return func(m *FriendRequestMutation) {
		var (
			err   error
			once  sync.Once
			value *FriendRequest
		)
		m.oldValue = func(ctx context.Context) (*FriendRequest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FriendRequest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFriendRequest sets the old FriendRequest of the mutation.
func withFriendRequest(node *FriendRequest) friendrequestOption {
	return func(m *FriendRequestMutation) {
		m.oldValue = func(context.Context) (*FriendRequest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FriendRequestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FriendRequestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FriendRequestMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FriendRequestMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FriendRequest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFromUserId sets the "fromUserId" field.
func (m *FriendRequestMutation) SetFromUserId(i int) {
	m.fromUserId = &i
	m.addfromUserId = nil
}

// FromUserId returns the value of the "fromUserId" field in the mutation.
func (m *FriendRequestMutation) FromUserId() (r int, exists bool) {
	v := m.fromUserId
	if v == nil {
		return
	}
	return *v, true
}

// OldFromUserId returns the old "fromUserId" field's value of the FriendRequest entity.
// If the FriendRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FriendRequestMutation) OldFromUserId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromUserId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromUserId: %w", err)
	}
	return oldValue.FromUserId, nil
}

// AddFromUserId adds i to the "fromUserId" field.
func (m *FriendRequestMutation) AddFromUserId(i int) {
	if m.addfromUserId != nil {
		*m.addfromUserId += i
	} else {
		m.addfromUserId = &i
	}
}

// AddedFromUserId returns the value that was added to the "fromUserId" field in this mutation.
func (m *FriendRequestMutation) AddedFromUserId() (r int, exists bool) {
	v := m.addfromUserId
	if v == nil {
		return
	}
	return *v, true
}

// ResetFromUserId resets all changes to the "fromUserId" field.
func (m *FriendRequestMutation) ResetFromUserId() {
	m.fromUserId = nil
	m.addfromUserId = nil
}

// SetToUserId sets the "toUserId" field.
func (m *FriendRequestMutation) SetToUserId(i int) {
	m.toUserId = &i
	m.addtoUserId = nil
}

// ToUserId returns the value of the "toUserId" field in the mutation.
func (m *FriendRequestMutation) ToUserId() (r int, exists bool) {
	v := m.toUserId
	if v == nil {
		return
	}
	return *v, true
}

// OldToUserId returns the old "toUserId" field's value of the FriendRequest entity.
// If the FriendRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FriendRequestMutation) OldToUserId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToUserId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToUserId: %w", err)
	}
	return oldValue.ToUserId, nil
}

// AddToUserId adds i to the "toUserId" field.
func (m *FriendRequestMutation) AddToUserId(i int) {
	if m.addtoUserId != nil {
		*m.addtoUserId += i
	} else {
		m.addtoUserId = &i
	}
}

// AddedToUserId returns the value that was added to the "toUserId" field in this mutation.
func (m *FriendRequestMutation) AddedToUserId() (r int, exists bool) {
	v := m.addtoUserId
	if v == nil {
		return
	}
	return *v, true
}

// ResetToUserId resets all changes to the "toUserId" field.
func (m *FriendRequestMutation) ResetToUserId() {
	m.toUserId = nil
	m.addtoUserId = nil
}

// SetRemark sets the "remark" field.
func (m *FriendRequestMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *FriendRequestMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the FriendRequest entity.
// If the FriendRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FriendRequestMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *FriendRequestMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[friendrequest.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *FriendRequestMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[friendrequest.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *FriendRequestMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, friendrequest.FieldRemark)
}

// SetStatus sets the "status" field.
func (m *FriendRequestMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *FriendRequestMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the FriendRequest entity.
// If the FriendRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FriendRequestMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *FriendRequestMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *FriendRequestMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *FriendRequestMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreateTime sets the "createTime" field.
func (m *FriendRequestMutation) SetCreateTime(t time.Time) {
	m.createTime = &t
}

// CreateTime returns the value of the "createTime" field in the mutation.
func (m *FriendRequestMutation) CreateTime() (r time.Time, exists bool) {
	v := m.createTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "createTime" field's value of the FriendRequest entity.
// If the FriendRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FriendRequestMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "createTime" field.
func (m *FriendRequestMutation) ResetCreateTime() {
	m.createTime = nil
}

// Where appends a list predicates to the FriendRequestMutation builder.
func (m *FriendRequestMutation) Where(ps ...predicate.FriendRequest) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FriendRequestMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FriendRequestMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FriendRequest, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FriendRequestMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FriendRequestMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FriendRequest).
func (m *FriendRequestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FriendRequestMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.fromUserId != nil {
		fields = append(fields, friendrequest.FieldFromUserId)
	}
	if m.toUserId != nil {
		fields = append(fields, friendrequest.FieldToUserId)
	}
	if m.remark != nil {
		fields = append(fields, friendrequest.FieldRemark)
	}
	if m.status != nil {
		fields = append(fields, friendrequest.FieldStatus)
	}
	if m.createTime != nil {
		fields = append(fields, friendrequest.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FriendRequestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case friendrequest.FieldFromUserId:
		return m.FromUserId()
	case friendrequest.FieldToUserId:
		return m.ToUserId()
	case friendrequest.FieldRemark:
		return m.Remark()
	case friendrequest.FieldStatus:
		return m.Status()
	case friendrequest.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FriendRequestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case friendrequest.FieldFromUserId:
		return m.OldFromUserId(ctx)
	case friendrequest.FieldToUserId:
		return m.OldToUserId(ctx)
	case friendrequest.FieldRemark:
		return m.OldRemark(ctx)
	case friendrequest.FieldStatus:
		return m.OldStatus(ctx)
	case friendrequest.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown FriendRequest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FriendRequestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case friendrequest.FieldFromUserId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromUserId(v)
		return nil
	case friendrequest.FieldToUserId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToUserId(v)
		return nil
	case friendrequest.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case friendrequest.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case friendrequest.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown FriendRequest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FriendRequestMutation) AddedFields() []string {
	var fields []string
	if m.addfromUserId != nil {
		fields = append(fields, friendrequest.FieldFromUserId)
	}
	if m.addtoUserId != nil {
		fields = append(fields, friendrequest.FieldToUserId)
	}
	if m.addstatus != nil {
		fields = append(fields, friendrequest.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FriendRequestMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case friendrequest.FieldFromUserId:
		return m.AddedFromUserId()
	case friendrequest.FieldToUserId:
		return m.AddedToUserId()
	case friendrequest.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FriendRequestMutation) AddField(name string, value ent.Value) error {
	switch name {
	case friendrequest.FieldFromUserId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFromUserId(v)
		return nil
	case friendrequest.FieldToUserId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddToUserId(v)
		return nil
	case friendrequest.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown FriendRequest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FriendRequestMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(friendrequest.FieldRemark) {
		fields = append(fields, friendrequest.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FriendRequestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FriendRequestMutation) ClearField(name string) error {
	switch name {
	case friendrequest.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown FriendRequest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FriendRequestMutation) ResetField(name string) error {
	switch name {
	case friendrequest.FieldFromUserId:
		m.ResetFromUserId()
		return nil
	case friendrequest.FieldToUserId:
		m.ResetToUserId()
		return nil
	case friendrequest.FieldRemark:
		m.ResetRemark()
		return nil
	case friendrequest.FieldStatus:
		m.ResetStatus()
		return nil
	case friendrequest.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown FriendRequest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FriendRequestMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FriendRequestMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FriendRequestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FriendRequestMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FriendRequestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FriendRequestMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FriendRequestMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FriendRequest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FriendRequestMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FriendRequest edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op              Op
	typ             string
	id              *int
	groupId         *string
	groupName       *string
	ownerId         *int
	addownerId      *int
	createUserId    *int
	addcreateUserId *int
	createTime      *time.Time
	members         *[]int
	appendmembers   []int
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Group, error)
	predicates      []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id int) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGroupId sets the "groupId" field.
func (m *GroupMutation) SetGroupId(s string) {
	m.groupId = &s
}

// GroupId returns the value of the "groupId" field in the mutation.
func (m *GroupMutation) GroupId() (r string, exists bool) {
	v := m.groupId
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupId returns the old "groupId" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldGroupId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupId: %w", err)
	}
	return oldValue.GroupId, nil
}

// ResetGroupId resets all changes to the "groupId" field.
func (m *GroupMutation) ResetGroupId() {
	m.groupId = nil
}

// SetGroupName sets the "groupName" field.
func (m *GroupMutation) SetGroupName(s string) {
	m.groupName = &s
}

// GroupName returns the value of the "groupName" field in the mutation.
func (m *GroupMutation) GroupName() (r string, exists bool) {
	v := m.groupName
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupName returns the old "groupName" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldGroupName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupName: %w", err)
	}
	return oldValue.GroupName, nil
}

// ResetGroupName resets all changes to the "groupName" field.
func (m *GroupMutation) ResetGroupName() {
	m.groupName = nil
}

// SetOwnerId sets the "ownerId" field.
func (m *GroupMutation) SetOwnerId(i int) {
	m.ownerId = &i
	m.addownerId = nil
}

// OwnerId returns the value of the "ownerId" field in the mutation.
func (m *GroupMutation) OwnerId() (r int, exists bool) {
	v := m.ownerId
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerId returns the old "ownerId" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldOwnerId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerId: %w", err)
	}
	return oldValue.OwnerId, nil
}

// AddOwnerId adds i to the "ownerId" field.
func (m *GroupMutation) AddOwnerId(i int) {
	if m.addownerId != nil {
		*m.addownerId += i
	} else {
		m.addownerId = &i
	}
}

// AddedOwnerId returns the value that was added to the "ownerId" field in this mutation.
func (m *GroupMutation) AddedOwnerId() (r int, exists bool) {
	v := m.addownerId
	if v == nil {
		return
	}
	return *v, true
}

// ResetOwnerId resets all changes to the "ownerId" field.
func (m *GroupMutation) ResetOwnerId() {
	m.ownerId = nil
	m.addownerId = nil
}

// SetCreateUserId sets the "createUserId" field.
func (m *GroupMutation) SetCreateUserId(i int) {
	m.createUserId = &i
	m.addcreateUserId = nil
}

// CreateUserId returns the value of the "createUserId" field in the mutation.
func (m *GroupMutation) CreateUserId() (r int, exists bool) {
	v := m.createUserId
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateUserId returns the old "createUserId" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldCreateUserId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateUserId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateUserId: %w", err)
	}
	return oldValue.CreateUserId, nil
}

// AddCreateUserId adds i to the "createUserId" field.
func (m *GroupMutation) AddCreateUserId(i int) {
	if m.addcreateUserId != nil {
		*m.addcreateUserId += i
	} else {
		m.addcreateUserId = &i
	}
}

// AddedCreateUserId returns the value that was added to the "createUserId" field in this mutation.
func (m *GroupMutation) AddedCreateUserId() (r int, exists bool) {
	v := m.addcreateUserId
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateUserId resets all changes to the "createUserId" field.
func (m *GroupMutation) ResetCreateUserId() {
	m.createUserId = nil
	m.addcreateUserId = nil
}

// SetCreateTime sets the "createTime" field.
func (m *GroupMutation) SetCreateTime(t time.Time) {
	m.createTime = &t
}

// CreateTime returns the value of the "createTime" field in the mutation.
func (m *GroupMutation) CreateTime() (r time.Time, exists bool) {
	v := m.createTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "createTime" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "createTime" field.
func (m *GroupMutation) ResetCreateTime() {
	m.createTime = nil
}

// SetMembers sets the "members" field.
func (m *GroupMutation) SetMembers(i []int) {
	m.members = &i
	m.appendmembers = nil
}

// Members returns the value of the "members" field in the mutation.
func (m *GroupMutation) Members() (r []int, exists bool) {
	v := m.members
	if v == nil {
		return
	}
	return *v, true
}

// OldMembers returns the old "members" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldMembers(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMembers is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMembers requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMembers: %w", err)
	}
	return oldValue.Members, nil
}

// AppendMembers adds i to the "members" field.
func (m *GroupMutation) AppendMembers(i []int) {
	m.appendmembers = append(m.appendmembers, i...)
}

// AppendedMembers returns the list of values that were appended to the "members" field in this mutation.
func (m *GroupMutation) AppendedMembers() ([]int, bool) {
	if len(m.appendmembers) == 0 {
		return nil, false
	}
	return m.appendmembers, true
}

// ResetMembers resets all changes to the "members" field.
func (m *GroupMutation) ResetMembers() {
	m.members = nil
	m.appendmembers = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Group, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.groupId != nil {
		fields = append(fields, group.FieldGroupId)
	}
	if m.groupName != nil {
		fields = append(fields, group.FieldGroupName)
	}
	if m.ownerId != nil {
		fields = append(fields, group.FieldOwnerId)
	}
	if m.createUserId != nil {
		fields = append(fields, group.FieldCreateUserId)
	}
	if m.createTime != nil {
		fields = append(fields, group.FieldCreateTime)
	}
	if m.members != nil {
		fields = append(fields, group.FieldMembers)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldGroupId:
		return m.GroupId()
	case group.FieldGroupName:
		return m.GroupName()
	case group.FieldOwnerId:
		return m.OwnerId()
	case group.FieldCreateUserId:
		return m.CreateUserId()
	case group.FieldCreateTime:
		return m.CreateTime()
	case group.FieldMembers:
		return m.Members()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldGroupId:
		return m.OldGroupId(ctx)
	case group.FieldGroupName:
		return m.OldGroupName(ctx)
	case group.FieldOwnerId:
		return m.OldOwnerId(ctx)
	case group.FieldCreateUserId:
		return m.OldCreateUserId(ctx)
	case group.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case group.FieldMembers:
		return m.OldMembers(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldGroupId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupId(v)
		return nil
	case group.FieldGroupName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupName(v)
		return nil
	case group.FieldOwnerId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerId(v)
		return nil
	case group.FieldCreateUserId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateUserId(v)
		return nil
	case group.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case group.FieldMembers:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMembers(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	var fields []string
	if m.addownerId != nil {
		fields = append(fields, group.FieldOwnerId)
	}
	if m.addcreateUserId != nil {
		fields = append(fields, group.FieldCreateUserId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case group.FieldOwnerId:
		return m.AddedOwnerId()
	case group.FieldCreateUserId:
		return m.AddedCreateUserId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	case group.FieldOwnerId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOwnerId(v)
		return nil
	case group.FieldCreateUserId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateUserId(v)
		return nil
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldGroupId:
		m.ResetGroupId()
		return nil
	case group.FieldGroupName:
		m.ResetGroupName()
		return nil
	case group.FieldOwnerId:
		m.ResetOwnerId()
		return nil
	case group.FieldCreateUserId:
		m.ResetCreateUserId()
		return nil
	case group.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case group.FieldMembers:
		m.ResetMembers()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Group edge %s", name)
}

// GroupChatRecordMutation represents an operation that mutates the GroupChatRecord nodes in the graph.
type GroupChatRecordMutation struct {
	config
	op            Op
	typ           string
	id            *int
	msgId         *string
	fromUserId    *string
	groupId       *string
	msgType       *string
	createTime    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*GroupChatRecord, error)
	predicates    []predicate.GroupChatRecord
}

var _ ent.Mutation = (*GroupChatRecordMutation)(nil)

// groupchatrecordOption allows management of the mutation configuration using functional options.
type groupchatrecordOption func(*GroupChatRecordMutation)

// newGroupChatRecordMutation creates new mutation for the GroupChatRecord entity.
func newGroupChatRecordMutation(c config, op Op, opts ...groupchatrecordOption) *GroupChatRecordMutation {
	m := &GroupChatRecordMutation{
		config:        c,
		op:            op,
		typ:           TypeGroupChatRecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupChatRecordID sets the ID field of the mutation.
func withGroupChatRecordID(id int) groupchatrecordOption {
	return func(m *GroupChatRecordMutation) {
		var (
			err   error
			once  sync.Once
			value *GroupChatRecord
		)
		m.oldValue = func(ctx context.Context) (*GroupChatRecord, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GroupChatRecord.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroupChatRecord sets the old GroupChatRecord of the mutation.
func withGroupChatRecord(node *GroupChatRecord) groupchatrecordOption {
	return func(m *GroupChatRecordMutation) {
		m.oldValue = func(context.Context) (*GroupChatRecord, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupChatRecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupChatRecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupChatRecordMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupChatRecordMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GroupChatRecord.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMsgId sets the "msgId" field.
func (m *GroupChatRecordMutation) SetMsgId(s string) {
	m.msgId = &s
}

// MsgId returns the value of the "msgId" field in the mutation.
func (m *GroupChatRecordMutation) MsgId() (r string, exists bool) {
	v := m.msgId
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgId returns the old "msgId" field's value of the GroupChatRecord entity.
// If the GroupChatRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupChatRecordMutation) OldMsgId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgId: %w", err)
	}
	return oldValue.MsgId, nil
}

// ResetMsgId resets all changes to the "msgId" field.
func (m *GroupChatRecordMutation) ResetMsgId() {
	m.msgId = nil
}

// SetFromUserId sets the "fromUserId" field.
func (m *GroupChatRecordMutation) SetFromUserId(s string) {
	m.fromUserId = &s
}

// FromUserId returns the value of the "fromUserId" field in the mutation.
func (m *GroupChatRecordMutation) FromUserId() (r string, exists bool) {
	v := m.fromUserId
	if v == nil {
		return
	}
	return *v, true
}

// OldFromUserId returns the old "fromUserId" field's value of the GroupChatRecord entity.
// If the GroupChatRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupChatRecordMutation) OldFromUserId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromUserId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromUserId: %w", err)
	}
	return oldValue.FromUserId, nil
}

// ResetFromUserId resets all changes to the "fromUserId" field.
func (m *GroupChatRecordMutation) ResetFromUserId() {
	m.fromUserId = nil
}

// SetGroupId sets the "groupId" field.
func (m *GroupChatRecordMutation) SetGroupId(s string) {
	m.groupId = &s
}

// GroupId returns the value of the "groupId" field in the mutation.
func (m *GroupChatRecordMutation) GroupId() (r string, exists bool) {
	v := m.groupId
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupId returns the old "groupId" field's value of the GroupChatRecord entity.
// If the GroupChatRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupChatRecordMutation) OldGroupId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupId: %w", err)
	}
	return oldValue.GroupId, nil
}

// ResetGroupId resets all changes to the "groupId" field.
func (m *GroupChatRecordMutation) ResetGroupId() {
	m.groupId = nil
}

// SetMsgType sets the "msgType" field.
func (m *GroupChatRecordMutation) SetMsgType(s string) {
	m.msgType = &s
}

// MsgType returns the value of the "msgType" field in the mutation.
func (m *GroupChatRecordMutation) MsgType() (r string, exists bool) {
	v := m.msgType
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgType returns the old "msgType" field's value of the GroupChatRecord entity.
// If the GroupChatRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupChatRecordMutation) OldMsgType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgType: %w", err)
	}
	return oldValue.MsgType, nil
}

// ResetMsgType resets all changes to the "msgType" field.
func (m *GroupChatRecordMutation) ResetMsgType() {
	m.msgType = nil
}

// SetCreateTime sets the "createTime" field.
func (m *GroupChatRecordMutation) SetCreateTime(t time.Time) {
	m.createTime = &t
}

// CreateTime returns the value of the "createTime" field in the mutation.
func (m *GroupChatRecordMutation) CreateTime() (r time.Time, exists bool) {
	v := m.createTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "createTime" field's value of the GroupChatRecord entity.
// If the GroupChatRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupChatRecordMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "createTime" field.
func (m *GroupChatRecordMutation) ResetCreateTime() {
	m.createTime = nil
}

// Where appends a list predicates to the GroupChatRecordMutation builder.
func (m *GroupChatRecordMutation) Where(ps ...predicate.GroupChatRecord) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupChatRecordMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupChatRecordMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GroupChatRecord, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupChatRecordMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupChatRecordMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GroupChatRecord).
func (m *GroupChatRecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupChatRecordMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.msgId != nil {
		fields = append(fields, groupchatrecord.FieldMsgId)
	}
	if m.fromUserId != nil {
		fields = append(fields, groupchatrecord.FieldFromUserId)
	}
	if m.groupId != nil {
		fields = append(fields, groupchatrecord.FieldGroupId)
	}
	if m.msgType != nil {
		fields = append(fields, groupchatrecord.FieldMsgType)
	}
	if m.createTime != nil {
		fields = append(fields, groupchatrecord.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupChatRecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case groupchatrecord.FieldMsgId:
		return m.MsgId()
	case groupchatrecord.FieldFromUserId:
		return m.FromUserId()
	case groupchatrecord.FieldGroupId:
		return m.GroupId()
	case groupchatrecord.FieldMsgType:
		return m.MsgType()
	case groupchatrecord.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupChatRecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case groupchatrecord.FieldMsgId:
		return m.OldMsgId(ctx)
	case groupchatrecord.FieldFromUserId:
		return m.OldFromUserId(ctx)
	case groupchatrecord.FieldGroupId:
		return m.OldGroupId(ctx)
	case groupchatrecord.FieldMsgType:
		return m.OldMsgType(ctx)
	case groupchatrecord.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown GroupChatRecord field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupChatRecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case groupchatrecord.FieldMsgId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgId(v)
		return nil
	case groupchatrecord.FieldFromUserId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromUserId(v)
		return nil
	case groupchatrecord.FieldGroupId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupId(v)
		return nil
	case groupchatrecord.FieldMsgType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgType(v)
		return nil
	case groupchatrecord.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown GroupChatRecord field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupChatRecordMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupChatRecordMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupChatRecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GroupChatRecord numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupChatRecordMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupChatRecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupChatRecordMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GroupChatRecord nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupChatRecordMutation) ResetField(name string) error {
	switch name {
	case groupchatrecord.FieldMsgId:
		m.ResetMsgId()
		return nil
	case groupchatrecord.FieldFromUserId:
		m.ResetFromUserId()
		return nil
	case groupchatrecord.FieldGroupId:
		m.ResetGroupId()
		return nil
	case groupchatrecord.FieldMsgType:
		m.ResetMsgType()
		return nil
	case groupchatrecord.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown GroupChatRecord field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupChatRecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupChatRecordMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupChatRecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupChatRecordMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupChatRecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupChatRecordMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupChatRecordMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GroupChatRecord unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupChatRecordMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GroupChatRecord edge %s", name)
}

// ImageMessageMutation represents an operation that mutates the ImageMessage nodes in the graph.
type ImageMessageMutation struct {
	config
	op            Op
	typ           string
	id            *int
	msgId         *string
	imageUrl      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ImageMessage, error)
	predicates    []predicate.ImageMessage
}

var _ ent.Mutation = (*ImageMessageMutation)(nil)

// imagemessageOption allows management of the mutation configuration using functional options.
type imagemessageOption func(*ImageMessageMutation)

// newImageMessageMutation creates new mutation for the ImageMessage entity.
func newImageMessageMutation(c config, op Op, opts ...imagemessageOption) *ImageMessageMutation {
	m := &ImageMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeImageMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withImageMessageID sets the ID field of the mutation.
func withImageMessageID(id int) imagemessageOption {
	return func(m *ImageMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *ImageMessage
		)
		m.oldValue = func(ctx context.Context) (*ImageMessage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ImageMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withImageMessage sets the old ImageMessage of the mutation.
func withImageMessage(node *ImageMessage) imagemessageOption {
	return func(m *ImageMessageMutation) {
		m.oldValue = func(context.Context) (*ImageMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ImageMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ImageMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ImageMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ImageMessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ImageMessage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMsgId sets the "msgId" field.
func (m *ImageMessageMutation) SetMsgId(s string) {
	m.msgId = &s
}

// MsgId returns the value of the "msgId" field in the mutation.
func (m *ImageMessageMutation) MsgId() (r string, exists bool) {
	v := m.msgId
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgId returns the old "msgId" field's value of the ImageMessage entity.
// If the ImageMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMessageMutation) OldMsgId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgId: %w", err)
	}
	return oldValue.MsgId, nil
}

// ResetMsgId resets all changes to the "msgId" field.
func (m *ImageMessageMutation) ResetMsgId() {
	m.msgId = nil
}

// SetImageUrl sets the "imageUrl" field.
func (m *ImageMessageMutation) SetImageUrl(s string) {
	m.imageUrl = &s
}

// ImageUrl returns the value of the "imageUrl" field in the mutation.
func (m *ImageMessageMutation) ImageUrl() (r string, exists bool) {
	v := m.imageUrl
	if v == nil {
		return
	}
	return *v, true
}

// OldImageUrl returns the old "imageUrl" field's value of the ImageMessage entity.
// If the ImageMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMessageMutation) OldImageUrl(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageUrl is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageUrl requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageUrl: %w", err)
	}
	return oldValue.ImageUrl, nil
}

// ResetImageUrl resets all changes to the "imageUrl" field.
func (m *ImageMessageMutation) ResetImageUrl() {
	m.imageUrl = nil
}

// Where appends a list predicates to the ImageMessageMutation builder.
func (m *ImageMessageMutation) Where(ps ...predicate.ImageMessage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ImageMessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ImageMessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ImageMessage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ImageMessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ImageMessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ImageMessage).
func (m *ImageMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ImageMessageMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.msgId != nil {
		fields = append(fields, imagemessage.FieldMsgId)
	}
	if m.imageUrl != nil {
		fields = append(fields, imagemessage.FieldImageUrl)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ImageMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case imagemessage.FieldMsgId:
		return m.MsgId()
	case imagemessage.FieldImageUrl:
		return m.ImageUrl()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ImageMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case imagemessage.FieldMsgId:
		return m.OldMsgId(ctx)
	case imagemessage.FieldImageUrl:
		return m.OldImageUrl(ctx)
	}
	return nil, fmt.Errorf("unknown ImageMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case imagemessage.FieldMsgId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgId(v)
		return nil
	case imagemessage.FieldImageUrl:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageUrl(v)
		return nil
	}
	return fmt.Errorf("unknown ImageMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ImageMessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ImageMessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ImageMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ImageMessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ImageMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ImageMessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ImageMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ImageMessageMutation) ResetField(name string) error {
	switch name {
	case imagemessage.FieldMsgId:
		m.ResetMsgId()
		return nil
	case imagemessage.FieldImageUrl:
		m.ResetImageUrl()
		return nil
	}
	return fmt.Errorf("unknown ImageMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ImageMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ImageMessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ImageMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ImageMessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ImageMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ImageMessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ImageMessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ImageMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ImageMessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ImageMessage edge %s", name)
}

// MessageMutation represents an operation that mutates the Message nodes in the graph.
type MessageMutation struct {
	config
	op            Op
	typ           string
	id            *int
	msgId         *string
	msgType       *string
	content       *string
	createTime    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Message, error)
	predicates    []predicate.Message
}

var _ ent.Mutation = (*MessageMutation)(nil)

// messageOption allows management of the mutation configuration using functional options.
type messageOption func(*MessageMutation)

// newMessageMutation creates new mutation for the Message entity.
func newMessageMutation(c config, op Op, opts ...messageOption) *MessageMutation {
	m := &MessageMutation{
		config:        c,
		op:            op,
		typ:           TypeMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageID sets the ID field of the mutation.
func withMessageID(id int) messageOption {
	return func(m *MessageMutation) {
		var (
			err   error
			once  sync.Once
			value *Message
		)
		m.oldValue = func(ctx context.Context) (*Message, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Message.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessage sets the old Message of the mutation.
func withMessage(node *Message) messageOption {
	return func(m *MessageMutation) {
		m.oldValue = func(context.Context) (*Message, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Message.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMsgId sets the "msgId" field.
func (m *MessageMutation) SetMsgId(s string) {
	m.msgId = &s
}

// MsgId returns the value of the "msgId" field in the mutation.
func (m *MessageMutation) MsgId() (r string, exists bool) {
	v := m.msgId
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgId returns the old "msgId" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldMsgId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgId: %w", err)
	}
	return oldValue.MsgId, nil
}

// ResetMsgId resets all changes to the "msgId" field.
func (m *MessageMutation) ResetMsgId() {
	m.msgId = nil
}

// SetMsgType sets the "msgType" field.
func (m *MessageMutation) SetMsgType(s string) {
	m.msgType = &s
}

// MsgType returns the value of the "msgType" field in the mutation.
func (m *MessageMutation) MsgType() (r string, exists bool) {
	v := m.msgType
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgType returns the old "msgType" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldMsgType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgType: %w", err)
	}
	return oldValue.MsgType, nil
}

// ResetMsgType resets all changes to the "msgType" field.
func (m *MessageMutation) ResetMsgType() {
	m.msgType = nil
}

// SetContent sets the "content" field.
func (m *MessageMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *MessageMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *MessageMutation) ResetContent() {
	m.content = nil
}

// SetCreateTime sets the "createTime" field.
func (m *MessageMutation) SetCreateTime(t time.Time) {
	m.createTime = &t
}

// CreateTime returns the value of the "createTime" field in the mutation.
func (m *MessageMutation) CreateTime() (r time.Time, exists bool) {
	v := m.createTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "createTime" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "createTime" field.
func (m *MessageMutation) ResetCreateTime() {
	m.createTime = nil
}

// Where appends a list predicates to the MessageMutation builder.
func (m *MessageMutation) Where(ps ...predicate.Message) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Message, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Message).
func (m *MessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.msgId != nil {
		fields = append(fields, message.FieldMsgId)
	}
	if m.msgType != nil {
		fields = append(fields, message.FieldMsgType)
	}
	if m.content != nil {
		fields = append(fields, message.FieldContent)
	}
	if m.createTime != nil {
		fields = append(fields, message.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case message.FieldMsgId:
		return m.MsgId()
	case message.FieldMsgType:
		return m.MsgType()
	case message.FieldContent:
		return m.Content()
	case message.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case message.FieldMsgId:
		return m.OldMsgId(ctx)
	case message.FieldMsgType:
		return m.OldMsgType(ctx)
	case message.FieldContent:
		return m.OldContent(ctx)
	case message.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Message field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case message.FieldMsgId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgId(v)
		return nil
	case message.FieldMsgType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgType(v)
		return nil
	case message.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case message.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Message numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Message nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageMutation) ResetField(name string) error {
	switch name {
	case message.FieldMsgId:
		m.ResetMsgId()
		return nil
	case message.FieldMsgType:
		m.ResetMsgType()
		return nil
	case message.FieldContent:
		m.ResetContent()
		return nil
	case message.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Message unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Message edge %s", name)
}

// MessageStatusMutation represents an operation that mutates the MessageStatus nodes in the graph.
type MessageStatusMutation struct {
	config
	op            Op
	typ           string
	id            *int
	msgId         *string
	userId        *int
	adduserId     *int
	isDelivered   *bool
	isRead        *bool
	deliveredTime *time.Time
	readTime      *time.Time
	createTime    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MessageStatus, error)
	predicates    []predicate.MessageStatus
}

var _ ent.Mutation = (*MessageStatusMutation)(nil)

// messagestatusOption allows management of the mutation configuration using functional options.
type messagestatusOption func(*MessageStatusMutation)

// newMessageStatusMutation creates new mutation for the MessageStatus entity.
func newMessageStatusMutation(c config, op Op, opts ...messagestatusOption) *MessageStatusMutation {
	m := &MessageStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeMessageStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageStatusID sets the ID field of the mutation.
func withMessageStatusID(id int) messagestatusOption {
	return func(m *MessageStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *MessageStatus
		)
		m.oldValue = func(ctx context.Context) (*MessageStatus, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MessageStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessageStatus sets the old MessageStatus of the mutation.
func withMessageStatus(node *MessageStatus) messagestatusOption {
	return func(m *MessageStatusMutation) {
		m.oldValue = func(context.Context) (*MessageStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageStatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageStatusMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MessageStatus.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMsgId sets the "msgId" field.
func (m *MessageStatusMutation) SetMsgId(s string) {
	m.msgId = &s
}

// MsgId returns the value of the "msgId" field in the mutation.
func (m *MessageStatusMutation) MsgId() (r string, exists bool) {
	v := m.msgId
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgId returns the old "msgId" field's value of the MessageStatus entity.
// If the MessageStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageStatusMutation) OldMsgId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgId: %w", err)
	}
	return oldValue.MsgId, nil
}

// ResetMsgId resets all changes to the "msgId" field.
func (m *MessageStatusMutation) ResetMsgId() {
	m.msgId = nil
}

// SetUserId sets the "userId" field.
func (m *MessageStatusMutation) SetUserId(i int) {
	m.userId = &i
	m.adduserId = nil
}

// UserId returns the value of the "userId" field in the mutation.
func (m *MessageStatusMutation) UserId() (r int, exists bool) {
	v := m.userId
	if v == nil {
		return
	}
	return *v, true
}

// OldUserId returns the old "userId" field's value of the MessageStatus entity.
// If the MessageStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageStatusMutation) OldUserId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserId: %w", err)
	}
	return oldValue.UserId, nil
}

// AddUserId adds i to the "userId" field.
func (m *MessageStatusMutation) AddUserId(i int) {
	if m.adduserId != nil {
		*m.adduserId += i
	} else {
		m.adduserId = &i
	}
}

// AddedUserId returns the value that was added to the "userId" field in this mutation.
func (m *MessageStatusMutation) AddedUserId() (r int, exists bool) {
	v := m.adduserId
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserId resets all changes to the "userId" field.
func (m *MessageStatusMutation) ResetUserId() {
	m.userId = nil
	m.adduserId = nil
}

// SetIsDelivered sets the "isDelivered" field.
func (m *MessageStatusMutation) SetIsDelivered(b bool) {
	m.isDelivered = &b
}

// IsDelivered returns the value of the "isDelivered" field in the mutation.
func (m *MessageStatusMutation) IsDelivered() (r bool, exists bool) {
	v := m.isDelivered
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDelivered returns the old "isDelivered" field's value of the MessageStatus entity.
// If the MessageStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageStatusMutation) OldIsDelivered(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDelivered is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDelivered requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDelivered: %w", err)
	}
	return oldValue.IsDelivered, nil
}

// ResetIsDelivered resets all changes to the "isDelivered" field.
func (m *MessageStatusMutation) ResetIsDelivered() {
	m.isDelivered = nil
}

// SetIsRead sets the "isRead" field.
func (m *MessageStatusMutation) SetIsRead(b bool) {
	m.isRead = &b
}

// IsRead returns the value of the "isRead" field in the mutation.
func (m *MessageStatusMutation) IsRead() (r bool, exists bool) {
	v := m.isRead
	if v == nil {
		return
	}
	return *v, true
}

// OldIsRead returns the old "isRead" field's value of the MessageStatus entity.
// If the MessageStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageStatusMutation) OldIsRead(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsRead is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsRead requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsRead: %w", err)
	}
	return oldValue.IsRead, nil
}

// ResetIsRead resets all changes to the "isRead" field.
func (m *MessageStatusMutation) ResetIsRead() {
	m.isRead = nil
}

// SetDeliveredTime sets the "deliveredTime" field.
func (m *MessageStatusMutation) SetDeliveredTime(t time.Time) {
	m.deliveredTime = &t
}

// DeliveredTime returns the value of the "deliveredTime" field in the mutation.
func (m *MessageStatusMutation) DeliveredTime() (r time.Time, exists bool) {
	v := m.deliveredTime
	if v == nil {
		return
	}
	return *v, true
}

// OldDeliveredTime returns the old "deliveredTime" field's value of the MessageStatus entity.
// If the MessageStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageStatusMutation) OldDeliveredTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeliveredTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeliveredTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeliveredTime: %w", err)
	}
	return oldValue.DeliveredTime, nil
}

// ClearDeliveredTime clears the value of the "deliveredTime" field.
func (m *MessageStatusMutation) ClearDeliveredTime() {
	m.deliveredTime = nil
	m.clearedFields[messagestatus.FieldDeliveredTime] = struct{}{}
}

// DeliveredTimeCleared returns if the "deliveredTime" field was cleared in this mutation.
func (m *MessageStatusMutation) DeliveredTimeCleared() bool {
	_, ok := m.clearedFields[messagestatus.FieldDeliveredTime]
	return ok
}

// ResetDeliveredTime resets all changes to the "deliveredTime" field.
func (m *MessageStatusMutation) ResetDeliveredTime() {
	m.deliveredTime = nil
	delete(m.clearedFields, messagestatus.FieldDeliveredTime)
}

// SetReadTime sets the "readTime" field.
func (m *MessageStatusMutation) SetReadTime(t time.Time) {
	m.readTime = &t
}

// ReadTime returns the value of the "readTime" field in the mutation.
func (m *MessageStatusMutation) ReadTime() (r time.Time, exists bool) {
	v := m.readTime
	if v == nil {
		return
	}
	return *v, true
}

// OldReadTime returns the old "readTime" field's value of the MessageStatus entity.
// If the MessageStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageStatusMutation) OldReadTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReadTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReadTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReadTime: %w", err)
	}
	return oldValue.ReadTime, nil
}

// ClearReadTime clears the value of the "readTime" field.
func (m *MessageStatusMutation) ClearReadTime() {
	m.readTime = nil
	m.clearedFields[messagestatus.FieldReadTime] = struct{}{}
}

// ReadTimeCleared returns if the "readTime" field was cleared in this mutation.
func (m *MessageStatusMutation) ReadTimeCleared() bool {
	_, ok := m.clearedFields[messagestatus.FieldReadTime]
	return ok
}

// ResetReadTime resets all changes to the "readTime" field.
func (m *MessageStatusMutation) ResetReadTime() {
	m.readTime = nil
	delete(m.clearedFields, messagestatus.FieldReadTime)
}

// SetCreateTime sets the "createTime" field.
func (m *MessageStatusMutation) SetCreateTime(t time.Time) {
	m.createTime = &t
}

// CreateTime returns the value of the "createTime" field in the mutation.
func (m *MessageStatusMutation) CreateTime() (r time.Time, exists bool) {
	v := m.createTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "createTime" field's value of the MessageStatus entity.
// If the MessageStatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageStatusMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "createTime" field.
func (m *MessageStatusMutation) ResetCreateTime() {
	m.createTime = nil
}

// Where appends a list predicates to the MessageStatusMutation builder.
func (m *MessageStatusMutation) Where(ps ...predicate.MessageStatus) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MessageStatusMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MessageStatusMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MessageStatus, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MessageStatusMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MessageStatusMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MessageStatus).
func (m *MessageStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageStatusMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.msgId != nil {
		fields = append(fields, messagestatus.FieldMsgId)
	}
	if m.userId != nil {
		fields = append(fields, messagestatus.FieldUserId)
	}
	if m.isDelivered != nil {
		fields = append(fields, messagestatus.FieldIsDelivered)
	}
	if m.isRead != nil {
		fields = append(fields, messagestatus.FieldIsRead)
	}
	if m.deliveredTime != nil {
		fields = append(fields, messagestatus.FieldDeliveredTime)
	}
	if m.readTime != nil {
		fields = append(fields, messagestatus.FieldReadTime)
	}
	if m.createTime != nil {
		fields = append(fields, messagestatus.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case messagestatus.FieldMsgId:
		return m.MsgId()
	case messagestatus.FieldUserId:
		return m.UserId()
	case messagestatus.FieldIsDelivered:
		return m.IsDelivered()
	case messagestatus.FieldIsRead:
		return m.IsRead()
	case messagestatus.FieldDeliveredTime:
		return m.DeliveredTime()
	case messagestatus.FieldReadTime:
		return m.ReadTime()
	case messagestatus.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case messagestatus.FieldMsgId:
		return m.OldMsgId(ctx)
	case messagestatus.FieldUserId:
		return m.OldUserId(ctx)
	case messagestatus.FieldIsDelivered:
		return m.OldIsDelivered(ctx)
	case messagestatus.FieldIsRead:
		return m.OldIsRead(ctx)
	case messagestatus.FieldDeliveredTime:
		return m.OldDeliveredTime(ctx)
	case messagestatus.FieldReadTime:
		return m.OldReadTime(ctx)
	case messagestatus.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown MessageStatus field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case messagestatus.FieldMsgId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgId(v)
		return nil
	case messagestatus.FieldUserId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserId(v)
		return nil
	case messagestatus.FieldIsDelivered:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDelivered(v)
		return nil
	case messagestatus.FieldIsRead:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsRead(v)
		return nil
	case messagestatus.FieldDeliveredTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeliveredTime(v)
		return nil
	case messagestatus.FieldReadTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReadTime(v)
		return nil
	case messagestatus.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown MessageStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageStatusMutation) AddedFields() []string {
	var fields []string
	if m.adduserId != nil {
		fields = append(fields, messagestatus.FieldUserId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageStatusMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case messagestatus.FieldUserId:
		return m.AddedUserId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	case messagestatus.FieldUserId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserId(v)
		return nil
	}
	return fmt.Errorf("unknown MessageStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageStatusMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(messagestatus.FieldDeliveredTime) {
		fields = append(fields, messagestatus.FieldDeliveredTime)
	}
	if m.FieldCleared(messagestatus.FieldReadTime) {
		fields = append(fields, messagestatus.FieldReadTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageStatusMutation) ClearField(name string) error {
	switch name {
	case messagestatus.FieldDeliveredTime:
		m.ClearDeliveredTime()
		return nil
	case messagestatus.FieldReadTime:
		m.ClearReadTime()
		return nil
	}
	return fmt.Errorf("unknown MessageStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageStatusMutation) ResetField(name string) error {
	switch name {
	case messagestatus.FieldMsgId:
		m.ResetMsgId()
		return nil
	case messagestatus.FieldUserId:
		m.ResetUserId()
		return nil
	case messagestatus.FieldIsDelivered:
		m.ResetIsDelivered()
		return nil
	case messagestatus.FieldIsRead:
		m.ResetIsRead()
		return nil
	case messagestatus.FieldDeliveredTime:
		m.ResetDeliveredTime()
		return nil
	case messagestatus.FieldReadTime:
		m.ResetReadTime()
		return nil
	case messagestatus.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown MessageStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageStatusMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageStatusMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageStatusMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageStatusMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MessageStatus unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageStatusMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MessageStatus edge %s", name)
}

// TextMessageMutation represents an operation that mutates the TextMessage nodes in the graph.
type TextMessageMutation struct {
	config
	op            Op
	typ           string
	id            *int
	msgId         *string
	text          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TextMessage, error)
	predicates    []predicate.TextMessage
}

var _ ent.Mutation = (*TextMessageMutation)(nil)

// textmessageOption allows management of the mutation configuration using functional options.
type textmessageOption func(*TextMessageMutation)

// newTextMessageMutation creates new mutation for the TextMessage entity.
func newTextMessageMutation(c config, op Op, opts ...textmessageOption) *TextMessageMutation {
	m := &TextMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeTextMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTextMessageID sets the ID field of the mutation.
func withTextMessageID(id int) textmessageOption {
	return func(m *TextMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *TextMessage
		)
		m.oldValue = func(ctx context.Context) (*TextMessage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TextMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTextMessage sets the old TextMessage of the mutation.
func withTextMessage(node *TextMessage) textmessageOption {
	return func(m *TextMessageMutation) {
		m.oldValue = func(context.Context) (*TextMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TextMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TextMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TextMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TextMessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TextMessage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMsgId sets the "msgId" field.
func (m *TextMessageMutation) SetMsgId(s string) {
	m.msgId = &s
}

// MsgId returns the value of the "msgId" field in the mutation.
func (m *TextMessageMutation) MsgId() (r string, exists bool) {
	v := m.msgId
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgId returns the old "msgId" field's value of the TextMessage entity.
// If the TextMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TextMessageMutation) OldMsgId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgId: %w", err)
	}
	return oldValue.MsgId, nil
}

// ResetMsgId resets all changes to the "msgId" field.
func (m *TextMessageMutation) ResetMsgId() {
	m.msgId = nil
}

// SetText sets the "text" field.
func (m *TextMessageMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *TextMessageMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the TextMessage entity.
// If the TextMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TextMessageMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *TextMessageMutation) ResetText() {
	m.text = nil
}

// Where appends a list predicates to the TextMessageMutation builder.
func (m *TextMessageMutation) Where(ps ...predicate.TextMessage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TextMessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TextMessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TextMessage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TextMessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TextMessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TextMessage).
func (m *TextMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TextMessageMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.msgId != nil {
		fields = append(fields, textmessage.FieldMsgId)
	}
	if m.text != nil {
		fields = append(fields, textmessage.FieldText)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TextMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case textmessage.FieldMsgId:
		return m.MsgId()
	case textmessage.FieldText:
		return m.Text()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TextMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case textmessage.FieldMsgId:
		return m.OldMsgId(ctx)
	case textmessage.FieldText:
		return m.OldText(ctx)
	}
	return nil, fmt.Errorf("unknown TextMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TextMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case textmessage.FieldMsgId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgId(v)
		return nil
	case textmessage.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	}
	return fmt.Errorf("unknown TextMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TextMessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TextMessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TextMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TextMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TextMessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TextMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TextMessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TextMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TextMessageMutation) ResetField(name string) error {
	switch name {
	case textmessage.FieldMsgId:
		m.ResetMsgId()
		return nil
	case textmessage.FieldText:
		m.ResetText()
		return nil
	}
	return fmt.Errorf("unknown TextMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TextMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TextMessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TextMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TextMessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TextMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TextMessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TextMessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TextMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TextMessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TextMessage edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	username      *string
	password      *string
	nickname      *string
	sex           *int
	addsex        *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetNickname sets the "nickname" field.
func (m *UserMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *UserMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ResetNickname resets all changes to the "nickname" field.
func (m *UserMutation) ResetNickname() {
	m.nickname = nil
}

// SetSex sets the "sex" field.
func (m *UserMutation) SetSex(i int) {
	m.sex = &i
	m.addsex = nil
}

// Sex returns the value of the "sex" field in the mutation.
func (m *UserMutation) Sex() (r int, exists bool) {
	v := m.sex
	if v == nil {
		return
	}
	return *v, true
}

// OldSex returns the old "sex" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSex(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSex: %w", err)
	}
	return oldValue.Sex, nil
}

// AddSex adds i to the "sex" field.
func (m *UserMutation) AddSex(i int) {
	if m.addsex != nil {
		*m.addsex += i
	} else {
		m.addsex = &i
	}
}

// AddedSex returns the value that was added to the "sex" field in this mutation.
func (m *UserMutation) AddedSex() (r int, exists bool) {
	v := m.addsex
	if v == nil {
		return
	}
	return *v, true
}

// ClearSex clears the value of the "sex" field.
func (m *UserMutation) ClearSex() {
	m.sex = nil
	m.addsex = nil
	m.clearedFields[user.FieldSex] = struct{}{}
}

// SexCleared returns if the "sex" field was cleared in this mutation.
func (m *UserMutation) SexCleared() bool {
	_, ok := m.clearedFields[user.FieldSex]
	return ok
}

// ResetSex resets all changes to the "sex" field.
func (m *UserMutation) ResetSex() {
	m.sex = nil
	m.addsex = nil
	delete(m.clearedFields, user.FieldSex)
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.nickname != nil {
		fields = append(fields, user.FieldNickname)
	}
	if m.sex != nil {
		fields = append(fields, user.FieldSex)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldNickname:
		return m.Nickname()
	case user.FieldSex:
		return m.Sex()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldNickname:
		return m.OldNickname(ctx)
	case user.FieldSex:
		return m.OldSex(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case user.FieldSex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSex(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addsex != nil {
		fields = append(fields, user.FieldSex)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldSex:
		return m.AddedSex()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldSex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSex(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldSex) {
		fields = append(fields, user.FieldSex)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldSex:
		m.ClearSex()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldNickname:
		m.ResetNickname()
		return nil
	case user.FieldSex:
		m.ResetSex()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}

// VideoMessageMutation represents an operation that mutates the VideoMessage nodes in the graph.
type VideoMessageMutation struct {
	config
	op            Op
	typ           string
	id            *int
	msgId         *string
	videoUrl      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*VideoMessage, error)
	predicates    []predicate.VideoMessage
}

var _ ent.Mutation = (*VideoMessageMutation)(nil)

// videomessageOption allows management of the mutation configuration using functional options.
type videomessageOption func(*VideoMessageMutation)

// newVideoMessageMutation creates new mutation for the VideoMessage entity.
func newVideoMessageMutation(c config, op Op, opts ...videomessageOption) *VideoMessageMutation {
	m := &VideoMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeVideoMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVideoMessageID sets the ID field of the mutation.
func withVideoMessageID(id int) videomessageOption {
	return func(m *VideoMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *VideoMessage
		)
		m.oldValue = func(ctx context.Context) (*VideoMessage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VideoMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVideoMessage sets the old VideoMessage of the mutation.
func withVideoMessage(node *VideoMessage) videomessageOption {
	return func(m *VideoMessageMutation) {
		m.oldValue = func(context.Context) (*VideoMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VideoMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VideoMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VideoMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VideoMessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VideoMessage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMsgId sets the "msgId" field.
func (m *VideoMessageMutation) SetMsgId(s string) {
	m.msgId = &s
}

// MsgId returns the value of the "msgId" field in the mutation.
func (m *VideoMessageMutation) MsgId() (r string, exists bool) {
	v := m.msgId
	if v == nil {
		return
	}
	return *v, true
}

// OldMsgId returns the old "msgId" field's value of the VideoMessage entity.
// If the VideoMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMessageMutation) OldMsgId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMsgId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMsgId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsgId: %w", err)
	}
	return oldValue.MsgId, nil
}

// ResetMsgId resets all changes to the "msgId" field.
func (m *VideoMessageMutation) ResetMsgId() {
	m.msgId = nil
}

// SetVideoUrl sets the "videoUrl" field.
func (m *VideoMessageMutation) SetVideoUrl(s string) {
	m.videoUrl = &s
}

// VideoUrl returns the value of the "videoUrl" field in the mutation.
func (m *VideoMessageMutation) VideoUrl() (r string, exists bool) {
	v := m.videoUrl
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoUrl returns the old "videoUrl" field's value of the VideoMessage entity.
// If the VideoMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMessageMutation) OldVideoUrl(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideoUrl is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideoUrl requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoUrl: %w", err)
	}
	return oldValue.VideoUrl, nil
}

// ResetVideoUrl resets all changes to the "videoUrl" field.
func (m *VideoMessageMutation) ResetVideoUrl() {
	m.videoUrl = nil
}

// Where appends a list predicates to the VideoMessageMutation builder.
func (m *VideoMessageMutation) Where(ps ...predicate.VideoMessage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VideoMessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VideoMessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.VideoMessage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VideoMessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VideoMessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (VideoMessage).
func (m *VideoMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VideoMessageMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.msgId != nil {
		fields = append(fields, videomessage.FieldMsgId)
	}
	if m.videoUrl != nil {
		fields = append(fields, videomessage.FieldVideoUrl)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VideoMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case videomessage.FieldMsgId:
		return m.MsgId()
	case videomessage.FieldVideoUrl:
		return m.VideoUrl()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VideoMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case videomessage.FieldMsgId:
		return m.OldMsgId(ctx)
	case videomessage.FieldVideoUrl:
		return m.OldVideoUrl(ctx)
	}
	return nil, fmt.Errorf("unknown VideoMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideoMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case videomessage.FieldMsgId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsgId(v)
		return nil
	case videomessage.FieldVideoUrl:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoUrl(v)
		return nil
	}
	return fmt.Errorf("unknown VideoMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VideoMessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VideoMessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideoMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown VideoMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VideoMessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VideoMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VideoMessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown VideoMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VideoMessageMutation) ResetField(name string) error {
	switch name {
	case videomessage.FieldMsgId:
		m.ResetMsgId()
		return nil
	case videomessage.FieldVideoUrl:
		m.ResetVideoUrl()
		return nil
	}
	return fmt.Errorf("unknown VideoMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VideoMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VideoMessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VideoMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VideoMessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VideoMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VideoMessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VideoMessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown VideoMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VideoMessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown VideoMessage edge %s", name)
}
