// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/friendrequest"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FriendRequestCreate is the builder for creating a FriendRequest entity.
type FriendRequestCreate struct {
	config
	mutation *FriendRequestMutation
	hooks    []Hook
}

// SetFromUserId sets the "fromUserId" field.
func (frc *FriendRequestCreate) SetFromUserId(i int) *FriendRequestCreate {
	frc.mutation.SetFromUserId(i)
	return frc
}

// SetToUserId sets the "toUserId" field.
func (frc *FriendRequestCreate) SetToUserId(i int) *FriendRequestCreate {
	frc.mutation.SetToUserId(i)
	return frc
}

// SetRemark sets the "remark" field.
func (frc *FriendRequestCreate) SetRemark(s string) *FriendRequestCreate {
	frc.mutation.SetRemark(s)
	return frc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (frc *FriendRequestCreate) SetNillableRemark(s *string) *FriendRequestCreate {
	if s != nil {
		frc.SetRemark(*s)
	}
	return frc
}

// SetStatus sets the "status" field.
func (frc *FriendRequestCreate) SetStatus(i int) *FriendRequestCreate {
	frc.mutation.SetStatus(i)
	return frc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (frc *FriendRequestCreate) SetNillableStatus(i *int) *FriendRequestCreate {
	if i != nil {
		frc.SetStatus(*i)
	}
	return frc
}

// SetCreateTime sets the "createTime" field.
func (frc *FriendRequestCreate) SetCreateTime(t time.Time) *FriendRequestCreate {
	frc.mutation.SetCreateTime(t)
	return frc
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (frc *FriendRequestCreate) SetNillableCreateTime(t *time.Time) *FriendRequestCreate {
	if t != nil {
		frc.SetCreateTime(*t)
	}
	return frc
}

// Mutation returns the FriendRequestMutation object of the builder.
func (frc *FriendRequestCreate) Mutation() *FriendRequestMutation {
	return frc.mutation
}

// Save creates the FriendRequest in the database.
func (frc *FriendRequestCreate) Save(ctx context.Context) (*FriendRequest, error) {
	frc.defaults()
	return withHooks(ctx, frc.sqlSave, frc.mutation, frc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (frc *FriendRequestCreate) SaveX(ctx context.Context) *FriendRequest {
	v, err := frc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frc *FriendRequestCreate) Exec(ctx context.Context) error {
	_, err := frc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frc *FriendRequestCreate) ExecX(ctx context.Context) {
	if err := frc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (frc *FriendRequestCreate) defaults() {
	if _, ok := frc.mutation.Status(); !ok {
		v := friendrequest.DefaultStatus
		frc.mutation.SetStatus(v)
	}
	if _, ok := frc.mutation.CreateTime(); !ok {
		v := friendrequest.DefaultCreateTime()
		frc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (frc *FriendRequestCreate) check() error {
	if _, ok := frc.mutation.FromUserId(); !ok {
		return &ValidationError{Name: "fromUserId", err: errors.New(`ent: missing required field "FriendRequest.fromUserId"`)}
	}
	if _, ok := frc.mutation.ToUserId(); !ok {
		return &ValidationError{Name: "toUserId", err: errors.New(`ent: missing required field "FriendRequest.toUserId"`)}
	}
	if _, ok := frc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "FriendRequest.status"`)}
	}
	if _, ok := frc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "createTime", err: errors.New(`ent: missing required field "FriendRequest.createTime"`)}
	}
	return nil
}

func (frc *FriendRequestCreate) sqlSave(ctx context.Context) (*FriendRequest, error) {
	if err := frc.check(); err != nil {
		return nil, err
	}
	_node, _spec := frc.createSpec()
	if err := sqlgraph.CreateNode(ctx, frc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	frc.mutation.id = &_node.ID
	frc.mutation.done = true
	return _node, nil
}

func (frc *FriendRequestCreate) createSpec() (*FriendRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &FriendRequest{config: frc.config}
		_spec = sqlgraph.NewCreateSpec(friendrequest.Table, sqlgraph.NewFieldSpec(friendrequest.FieldID, field.TypeInt))
	)
	if value, ok := frc.mutation.FromUserId(); ok {
		_spec.SetField(friendrequest.FieldFromUserId, field.TypeInt, value)
		_node.FromUserId = value
	}
	if value, ok := frc.mutation.ToUserId(); ok {
		_spec.SetField(friendrequest.FieldToUserId, field.TypeInt, value)
		_node.ToUserId = value
	}
	if value, ok := frc.mutation.Remark(); ok {
		_spec.SetField(friendrequest.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := frc.mutation.Status(); ok {
		_spec.SetField(friendrequest.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := frc.mutation.CreateTime(); ok {
		_spec.SetField(friendrequest.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	return _node, _spec
}

// FriendRequestCreateBulk is the builder for creating many FriendRequest entities in bulk.
type FriendRequestCreateBulk struct {
	config
	err      error
	builders []*FriendRequestCreate
}

// Save creates the FriendRequest entities in the database.
func (frcb *FriendRequestCreateBulk) Save(ctx context.Context) ([]*FriendRequest, error) {
	if frcb.err != nil {
		return nil, frcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(frcb.builders))
	nodes := make([]*FriendRequest, len(frcb.builders))
	mutators := make([]Mutator, len(frcb.builders))
	for i := range frcb.builders {
		func(i int, root context.Context) {
			builder := frcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FriendRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, frcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, frcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, frcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (frcb *FriendRequestCreateBulk) SaveX(ctx context.Context) []*FriendRequest {
	v, err := frcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frcb *FriendRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := frcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frcb *FriendRequestCreateBulk) ExecX(ctx context.Context) {
	if err := frcb.Exec(ctx); err != nil {
		panic(err)
	}
}
