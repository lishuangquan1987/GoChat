// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/imagemessage"
	"gochat_server/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImageMessageUpdate is the builder for updating ImageMessage entities.
type ImageMessageUpdate struct {
	config
	hooks    []Hook
	mutation *ImageMessageMutation
}

// Where appends a list predicates to the ImageMessageUpdate builder.
func (imu *ImageMessageUpdate) Where(ps ...predicate.ImageMessage) *ImageMessageUpdate {
	imu.mutation.Where(ps...)
	return imu
}

// SetMsgId sets the "msgId" field.
func (imu *ImageMessageUpdate) SetMsgId(s string) *ImageMessageUpdate {
	imu.mutation.SetMsgId(s)
	return imu
}

// SetNillableMsgId sets the "msgId" field if the given value is not nil.
func (imu *ImageMessageUpdate) SetNillableMsgId(s *string) *ImageMessageUpdate {
	if s != nil {
		imu.SetMsgId(*s)
	}
	return imu
}

// SetImageUrl sets the "imageUrl" field.
func (imu *ImageMessageUpdate) SetImageUrl(s string) *ImageMessageUpdate {
	imu.mutation.SetImageUrl(s)
	return imu
}

// SetNillableImageUrl sets the "imageUrl" field if the given value is not nil.
func (imu *ImageMessageUpdate) SetNillableImageUrl(s *string) *ImageMessageUpdate {
	if s != nil {
		imu.SetImageUrl(*s)
	}
	return imu
}

// Mutation returns the ImageMessageMutation object of the builder.
func (imu *ImageMessageUpdate) Mutation() *ImageMessageMutation {
	return imu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (imu *ImageMessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, imu.sqlSave, imu.mutation, imu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (imu *ImageMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := imu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (imu *ImageMessageUpdate) Exec(ctx context.Context) error {
	_, err := imu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imu *ImageMessageUpdate) ExecX(ctx context.Context) {
	if err := imu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (imu *ImageMessageUpdate) check() error {
	if v, ok := imu.mutation.MsgId(); ok {
		if err := imagemessage.MsgIdValidator(v); err != nil {
			return &ValidationError{Name: "msgId", err: fmt.Errorf(`ent: validator failed for field "ImageMessage.msgId": %w`, err)}
		}
	}
	if v, ok := imu.mutation.ImageUrl(); ok {
		if err := imagemessage.ImageUrlValidator(v); err != nil {
			return &ValidationError{Name: "imageUrl", err: fmt.Errorf(`ent: validator failed for field "ImageMessage.imageUrl": %w`, err)}
		}
	}
	return nil
}

func (imu *ImageMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := imu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(imagemessage.Table, imagemessage.Columns, sqlgraph.NewFieldSpec(imagemessage.FieldID, field.TypeInt))
	if ps := imu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := imu.mutation.MsgId(); ok {
		_spec.SetField(imagemessage.FieldMsgId, field.TypeString, value)
	}
	if value, ok := imu.mutation.ImageUrl(); ok {
		_spec.SetField(imagemessage.FieldImageUrl, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, imu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagemessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	imu.mutation.done = true
	return n, nil
}

// ImageMessageUpdateOne is the builder for updating a single ImageMessage entity.
type ImageMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageMessageMutation
}

// SetMsgId sets the "msgId" field.
func (imuo *ImageMessageUpdateOne) SetMsgId(s string) *ImageMessageUpdateOne {
	imuo.mutation.SetMsgId(s)
	return imuo
}

// SetNillableMsgId sets the "msgId" field if the given value is not nil.
func (imuo *ImageMessageUpdateOne) SetNillableMsgId(s *string) *ImageMessageUpdateOne {
	if s != nil {
		imuo.SetMsgId(*s)
	}
	return imuo
}

// SetImageUrl sets the "imageUrl" field.
func (imuo *ImageMessageUpdateOne) SetImageUrl(s string) *ImageMessageUpdateOne {
	imuo.mutation.SetImageUrl(s)
	return imuo
}

// SetNillableImageUrl sets the "imageUrl" field if the given value is not nil.
func (imuo *ImageMessageUpdateOne) SetNillableImageUrl(s *string) *ImageMessageUpdateOne {
	if s != nil {
		imuo.SetImageUrl(*s)
	}
	return imuo
}

// Mutation returns the ImageMessageMutation object of the builder.
func (imuo *ImageMessageUpdateOne) Mutation() *ImageMessageMutation {
	return imuo.mutation
}

// Where appends a list predicates to the ImageMessageUpdate builder.
func (imuo *ImageMessageUpdateOne) Where(ps ...predicate.ImageMessage) *ImageMessageUpdateOne {
	imuo.mutation.Where(ps...)
	return imuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (imuo *ImageMessageUpdateOne) Select(field string, fields ...string) *ImageMessageUpdateOne {
	imuo.fields = append([]string{field}, fields...)
	return imuo
}

// Save executes the query and returns the updated ImageMessage entity.
func (imuo *ImageMessageUpdateOne) Save(ctx context.Context) (*ImageMessage, error) {
	return withHooks(ctx, imuo.sqlSave, imuo.mutation, imuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (imuo *ImageMessageUpdateOne) SaveX(ctx context.Context) *ImageMessage {
	node, err := imuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (imuo *ImageMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := imuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imuo *ImageMessageUpdateOne) ExecX(ctx context.Context) {
	if err := imuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (imuo *ImageMessageUpdateOne) check() error {
	if v, ok := imuo.mutation.MsgId(); ok {
		if err := imagemessage.MsgIdValidator(v); err != nil {
			return &ValidationError{Name: "msgId", err: fmt.Errorf(`ent: validator failed for field "ImageMessage.msgId": %w`, err)}
		}
	}
	if v, ok := imuo.mutation.ImageUrl(); ok {
		if err := imagemessage.ImageUrlValidator(v); err != nil {
			return &ValidationError{Name: "imageUrl", err: fmt.Errorf(`ent: validator failed for field "ImageMessage.imageUrl": %w`, err)}
		}
	}
	return nil
}

func (imuo *ImageMessageUpdateOne) sqlSave(ctx context.Context) (_node *ImageMessage, err error) {
	if err := imuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(imagemessage.Table, imagemessage.Columns, sqlgraph.NewFieldSpec(imagemessage.FieldID, field.TypeInt))
	id, ok := imuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ImageMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := imuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imagemessage.FieldID)
		for _, f := range fields {
			if !imagemessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != imagemessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := imuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := imuo.mutation.MsgId(); ok {
		_spec.SetField(imagemessage.FieldMsgId, field.TypeString, value)
	}
	if value, ok := imuo.mutation.ImageUrl(); ok {
		_spec.SetField(imagemessage.FieldImageUrl, field.TypeString, value)
	}
	_node = &ImageMessage{config: imuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, imuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagemessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	imuo.mutation.done = true
	return _node, nil
}
