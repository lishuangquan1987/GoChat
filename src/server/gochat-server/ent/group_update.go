// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/group"
	"gochat_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// GroupUpdate is the builder for updating Group entities.
type GroupUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMutation
}

// Where appends a list predicates to the GroupUpdate builder.
func (gu *GroupUpdate) Where(ps ...predicate.Group) *GroupUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetGroupId sets the "groupId" field.
func (gu *GroupUpdate) SetGroupId(s string) *GroupUpdate {
	gu.mutation.SetGroupId(s)
	return gu
}

// SetNillableGroupId sets the "groupId" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableGroupId(s *string) *GroupUpdate {
	if s != nil {
		gu.SetGroupId(*s)
	}
	return gu
}

// SetGroupName sets the "groupName" field.
func (gu *GroupUpdate) SetGroupName(s string) *GroupUpdate {
	gu.mutation.SetGroupName(s)
	return gu
}

// SetNillableGroupName sets the "groupName" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableGroupName(s *string) *GroupUpdate {
	if s != nil {
		gu.SetGroupName(*s)
	}
	return gu
}

// SetOwnerId sets the "ownerId" field.
func (gu *GroupUpdate) SetOwnerId(i int) *GroupUpdate {
	gu.mutation.ResetOwnerId()
	gu.mutation.SetOwnerId(i)
	return gu
}

// SetNillableOwnerId sets the "ownerId" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableOwnerId(i *int) *GroupUpdate {
	if i != nil {
		gu.SetOwnerId(*i)
	}
	return gu
}

// AddOwnerId adds i to the "ownerId" field.
func (gu *GroupUpdate) AddOwnerId(i int) *GroupUpdate {
	gu.mutation.AddOwnerId(i)
	return gu
}

// SetCreateUserId sets the "createUserId" field.
func (gu *GroupUpdate) SetCreateUserId(i int) *GroupUpdate {
	gu.mutation.ResetCreateUserId()
	gu.mutation.SetCreateUserId(i)
	return gu
}

// SetNillableCreateUserId sets the "createUserId" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableCreateUserId(i *int) *GroupUpdate {
	if i != nil {
		gu.SetCreateUserId(*i)
	}
	return gu
}

// AddCreateUserId adds i to the "createUserId" field.
func (gu *GroupUpdate) AddCreateUserId(i int) *GroupUpdate {
	gu.mutation.AddCreateUserId(i)
	return gu
}

// SetCreateTime sets the "createTime" field.
func (gu *GroupUpdate) SetCreateTime(t time.Time) *GroupUpdate {
	gu.mutation.SetCreateTime(t)
	return gu
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableCreateTime(t *time.Time) *GroupUpdate {
	if t != nil {
		gu.SetCreateTime(*t)
	}
	return gu
}

// SetMembers sets the "members" field.
func (gu *GroupUpdate) SetMembers(i []int) *GroupUpdate {
	gu.mutation.SetMembers(i)
	return gu
}

// AppendMembers appends i to the "members" field.
func (gu *GroupUpdate) AppendMembers(i []int) *GroupUpdate {
	gu.mutation.AppendMembers(i)
	return gu
}

// Mutation returns the GroupMutation object of the builder.
func (gu *GroupUpdate) Mutation() *GroupMutation {
	return gu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GroupUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GroupUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GroupUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GroupUpdate) check() error {
	if v, ok := gu.mutation.GroupId(); ok {
		if err := group.GroupIdValidator(v); err != nil {
			return &ValidationError{Name: "groupId", err: fmt.Errorf(`ent: validator failed for field "Group.groupId": %w`, err)}
		}
	}
	if v, ok := gu.mutation.GroupName(); ok {
		if err := group.GroupNameValidator(v); err != nil {
			return &ValidationError{Name: "groupName", err: fmt.Errorf(`ent: validator failed for field "Group.groupName": %w`, err)}
		}
	}
	return nil
}

func (gu *GroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.GroupId(); ok {
		_spec.SetField(group.FieldGroupId, field.TypeString, value)
	}
	if value, ok := gu.mutation.GroupName(); ok {
		_spec.SetField(group.FieldGroupName, field.TypeString, value)
	}
	if value, ok := gu.mutation.OwnerId(); ok {
		_spec.SetField(group.FieldOwnerId, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedOwnerId(); ok {
		_spec.AddField(group.FieldOwnerId, field.TypeInt, value)
	}
	if value, ok := gu.mutation.CreateUserId(); ok {
		_spec.SetField(group.FieldCreateUserId, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedCreateUserId(); ok {
		_spec.AddField(group.FieldCreateUserId, field.TypeInt, value)
	}
	if value, ok := gu.mutation.CreateTime(); ok {
		_spec.SetField(group.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := gu.mutation.Members(); ok {
		_spec.SetField(group.FieldMembers, field.TypeJSON, value)
	}
	if value, ok := gu.mutation.AppendedMembers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, group.FieldMembers, value)
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GroupUpdateOne is the builder for updating a single Group entity.
type GroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMutation
}

// SetGroupId sets the "groupId" field.
func (guo *GroupUpdateOne) SetGroupId(s string) *GroupUpdateOne {
	guo.mutation.SetGroupId(s)
	return guo
}

// SetNillableGroupId sets the "groupId" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableGroupId(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetGroupId(*s)
	}
	return guo
}

// SetGroupName sets the "groupName" field.
func (guo *GroupUpdateOne) SetGroupName(s string) *GroupUpdateOne {
	guo.mutation.SetGroupName(s)
	return guo
}

// SetNillableGroupName sets the "groupName" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableGroupName(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetGroupName(*s)
	}
	return guo
}

// SetOwnerId sets the "ownerId" field.
func (guo *GroupUpdateOne) SetOwnerId(i int) *GroupUpdateOne {
	guo.mutation.ResetOwnerId()
	guo.mutation.SetOwnerId(i)
	return guo
}

// SetNillableOwnerId sets the "ownerId" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableOwnerId(i *int) *GroupUpdateOne {
	if i != nil {
		guo.SetOwnerId(*i)
	}
	return guo
}

// AddOwnerId adds i to the "ownerId" field.
func (guo *GroupUpdateOne) AddOwnerId(i int) *GroupUpdateOne {
	guo.mutation.AddOwnerId(i)
	return guo
}

// SetCreateUserId sets the "createUserId" field.
func (guo *GroupUpdateOne) SetCreateUserId(i int) *GroupUpdateOne {
	guo.mutation.ResetCreateUserId()
	guo.mutation.SetCreateUserId(i)
	return guo
}

// SetNillableCreateUserId sets the "createUserId" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableCreateUserId(i *int) *GroupUpdateOne {
	if i != nil {
		guo.SetCreateUserId(*i)
	}
	return guo
}

// AddCreateUserId adds i to the "createUserId" field.
func (guo *GroupUpdateOne) AddCreateUserId(i int) *GroupUpdateOne {
	guo.mutation.AddCreateUserId(i)
	return guo
}

// SetCreateTime sets the "createTime" field.
func (guo *GroupUpdateOne) SetCreateTime(t time.Time) *GroupUpdateOne {
	guo.mutation.SetCreateTime(t)
	return guo
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableCreateTime(t *time.Time) *GroupUpdateOne {
	if t != nil {
		guo.SetCreateTime(*t)
	}
	return guo
}

// SetMembers sets the "members" field.
func (guo *GroupUpdateOne) SetMembers(i []int) *GroupUpdateOne {
	guo.mutation.SetMembers(i)
	return guo
}

// AppendMembers appends i to the "members" field.
func (guo *GroupUpdateOne) AppendMembers(i []int) *GroupUpdateOne {
	guo.mutation.AppendMembers(i)
	return guo
}

// Mutation returns the GroupMutation object of the builder.
func (guo *GroupUpdateOne) Mutation() *GroupMutation {
	return guo.mutation
}

// Where appends a list predicates to the GroupUpdate builder.
func (guo *GroupUpdateOne) Where(ps ...predicate.Group) *GroupUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GroupUpdateOne) Select(field string, fields ...string) *GroupUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Group entity.
func (guo *GroupUpdateOne) Save(ctx context.Context) (*Group, error) {
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GroupUpdateOne) SaveX(ctx context.Context) *Group {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GroupUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GroupUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GroupUpdateOne) check() error {
	if v, ok := guo.mutation.GroupId(); ok {
		if err := group.GroupIdValidator(v); err != nil {
			return &ValidationError{Name: "groupId", err: fmt.Errorf(`ent: validator failed for field "Group.groupId": %w`, err)}
		}
	}
	if v, ok := guo.mutation.GroupName(); ok {
		if err := group.GroupNameValidator(v); err != nil {
			return &ValidationError{Name: "groupName", err: fmt.Errorf(`ent: validator failed for field "Group.groupName": %w`, err)}
		}
	}
	return nil
}

func (guo *GroupUpdateOne) sqlSave(ctx context.Context) (_node *Group, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Group.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, group.FieldID)
		for _, f := range fields {
			if !group.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != group.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.GroupId(); ok {
		_spec.SetField(group.FieldGroupId, field.TypeString, value)
	}
	if value, ok := guo.mutation.GroupName(); ok {
		_spec.SetField(group.FieldGroupName, field.TypeString, value)
	}
	if value, ok := guo.mutation.OwnerId(); ok {
		_spec.SetField(group.FieldOwnerId, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedOwnerId(); ok {
		_spec.AddField(group.FieldOwnerId, field.TypeInt, value)
	}
	if value, ok := guo.mutation.CreateUserId(); ok {
		_spec.SetField(group.FieldCreateUserId, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedCreateUserId(); ok {
		_spec.AddField(group.FieldCreateUserId, field.TypeInt, value)
	}
	if value, ok := guo.mutation.CreateTime(); ok {
		_spec.SetField(group.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := guo.mutation.Members(); ok {
		_spec.SetField(group.FieldMembers, field.TypeJSON, value)
	}
	if value, ok := guo.mutation.AppendedMembers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, group.FieldMembers, value)
		})
	}
	_node = &Group{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
