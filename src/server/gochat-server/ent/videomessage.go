// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gochat_server/ent/videomessage"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VideoMessage is the model entity for the VideoMessage schema.
type VideoMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 消息ID,由发送者产生
	MsgId string `json:"msgId,omitempty"`
	// 视频URL
	VideoUrl     string `json:"videoUrl,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VideoMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case videomessage.FieldID:
			values[i] = new(sql.NullInt64)
		case videomessage.FieldMsgId, videomessage.FieldVideoUrl:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VideoMessage fields.
func (vm *VideoMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case videomessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vm.ID = int(value.Int64)
		case videomessage.FieldMsgId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field msgId", values[i])
			} else if value.Valid {
				vm.MsgId = value.String
			}
		case videomessage.FieldVideoUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field videoUrl", values[i])
			} else if value.Valid {
				vm.VideoUrl = value.String
			}
		default:
			vm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VideoMessage.
// This includes values selected through modifiers, order, etc.
func (vm *VideoMessage) Value(name string) (ent.Value, error) {
	return vm.selectValues.Get(name)
}

// Update returns a builder for updating this VideoMessage.
// Note that you need to call VideoMessage.Unwrap() before calling this method if this VideoMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (vm *VideoMessage) Update() *VideoMessageUpdateOne {
	return NewVideoMessageClient(vm.config).UpdateOne(vm)
}

// Unwrap unwraps the VideoMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vm *VideoMessage) Unwrap() *VideoMessage {
	_tx, ok := vm.config.driver.(*txDriver)
	if !ok {
		panic("ent: VideoMessage is not a transactional entity")
	}
	vm.config.driver = _tx.drv
	return vm
}

// String implements the fmt.Stringer.
func (vm *VideoMessage) String() string {
	var builder strings.Builder
	builder.WriteString("VideoMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vm.ID))
	builder.WriteString("msgId=")
	builder.WriteString(vm.MsgId)
	builder.WriteString(", ")
	builder.WriteString("videoUrl=")
	builder.WriteString(vm.VideoUrl)
	builder.WriteByte(')')
	return builder.String()
}

// VideoMessages is a parsable slice of VideoMessage.
type VideoMessages []*VideoMessage
