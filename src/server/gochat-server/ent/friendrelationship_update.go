// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/friendrelationship"
	"gochat_server/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FriendRelationshipUpdate is the builder for updating FriendRelationship entities.
type FriendRelationshipUpdate struct {
	config
	hooks    []Hook
	mutation *FriendRelationshipMutation
}

// Where appends a list predicates to the FriendRelationshipUpdate builder.
func (fru *FriendRelationshipUpdate) Where(ps ...predicate.FriendRelationship) *FriendRelationshipUpdate {
	fru.mutation.Where(ps...)
	return fru
}

// SetUserId sets the "userId" field.
func (fru *FriendRelationshipUpdate) SetUserId(s string) *FriendRelationshipUpdate {
	fru.mutation.SetUserId(s)
	return fru
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (fru *FriendRelationshipUpdate) SetNillableUserId(s *string) *FriendRelationshipUpdate {
	if s != nil {
		fru.SetUserId(*s)
	}
	return fru
}

// SetFriendId sets the "friendId" field.
func (fru *FriendRelationshipUpdate) SetFriendId(s string) *FriendRelationshipUpdate {
	fru.mutation.SetFriendId(s)
	return fru
}

// SetNillableFriendId sets the "friendId" field if the given value is not nil.
func (fru *FriendRelationshipUpdate) SetNillableFriendId(s *string) *FriendRelationshipUpdate {
	if s != nil {
		fru.SetFriendId(*s)
	}
	return fru
}

// Mutation returns the FriendRelationshipMutation object of the builder.
func (fru *FriendRelationshipUpdate) Mutation() *FriendRelationshipMutation {
	return fru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fru *FriendRelationshipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fru.sqlSave, fru.mutation, fru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fru *FriendRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := fru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fru *FriendRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := fru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fru *FriendRelationshipUpdate) ExecX(ctx context.Context) {
	if err := fru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fru *FriendRelationshipUpdate) check() error {
	if v, ok := fru.mutation.UserId(); ok {
		if err := friendrelationship.UserIdValidator(v); err != nil {
			return &ValidationError{Name: "userId", err: fmt.Errorf(`ent: validator failed for field "FriendRelationship.userId": %w`, err)}
		}
	}
	if v, ok := fru.mutation.FriendId(); ok {
		if err := friendrelationship.FriendIdValidator(v); err != nil {
			return &ValidationError{Name: "friendId", err: fmt.Errorf(`ent: validator failed for field "FriendRelationship.friendId": %w`, err)}
		}
	}
	return nil
}

func (fru *FriendRelationshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(friendrelationship.Table, friendrelationship.Columns, sqlgraph.NewFieldSpec(friendrelationship.FieldID, field.TypeInt))
	if ps := fru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fru.mutation.UserId(); ok {
		_spec.SetField(friendrelationship.FieldUserId, field.TypeString, value)
	}
	if value, ok := fru.mutation.FriendId(); ok {
		_spec.SetField(friendrelationship.FieldFriendId, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{friendrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fru.mutation.done = true
	return n, nil
}

// FriendRelationshipUpdateOne is the builder for updating a single FriendRelationship entity.
type FriendRelationshipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FriendRelationshipMutation
}

// SetUserId sets the "userId" field.
func (fruo *FriendRelationshipUpdateOne) SetUserId(s string) *FriendRelationshipUpdateOne {
	fruo.mutation.SetUserId(s)
	return fruo
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (fruo *FriendRelationshipUpdateOne) SetNillableUserId(s *string) *FriendRelationshipUpdateOne {
	if s != nil {
		fruo.SetUserId(*s)
	}
	return fruo
}

// SetFriendId sets the "friendId" field.
func (fruo *FriendRelationshipUpdateOne) SetFriendId(s string) *FriendRelationshipUpdateOne {
	fruo.mutation.SetFriendId(s)
	return fruo
}

// SetNillableFriendId sets the "friendId" field if the given value is not nil.
func (fruo *FriendRelationshipUpdateOne) SetNillableFriendId(s *string) *FriendRelationshipUpdateOne {
	if s != nil {
		fruo.SetFriendId(*s)
	}
	return fruo
}

// Mutation returns the FriendRelationshipMutation object of the builder.
func (fruo *FriendRelationshipUpdateOne) Mutation() *FriendRelationshipMutation {
	return fruo.mutation
}

// Where appends a list predicates to the FriendRelationshipUpdate builder.
func (fruo *FriendRelationshipUpdateOne) Where(ps ...predicate.FriendRelationship) *FriendRelationshipUpdateOne {
	fruo.mutation.Where(ps...)
	return fruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fruo *FriendRelationshipUpdateOne) Select(field string, fields ...string) *FriendRelationshipUpdateOne {
	fruo.fields = append([]string{field}, fields...)
	return fruo
}

// Save executes the query and returns the updated FriendRelationship entity.
func (fruo *FriendRelationshipUpdateOne) Save(ctx context.Context) (*FriendRelationship, error) {
	return withHooks(ctx, fruo.sqlSave, fruo.mutation, fruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fruo *FriendRelationshipUpdateOne) SaveX(ctx context.Context) *FriendRelationship {
	node, err := fruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fruo *FriendRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := fruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fruo *FriendRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := fruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fruo *FriendRelationshipUpdateOne) check() error {
	if v, ok := fruo.mutation.UserId(); ok {
		if err := friendrelationship.UserIdValidator(v); err != nil {
			return &ValidationError{Name: "userId", err: fmt.Errorf(`ent: validator failed for field "FriendRelationship.userId": %w`, err)}
		}
	}
	if v, ok := fruo.mutation.FriendId(); ok {
		if err := friendrelationship.FriendIdValidator(v); err != nil {
			return &ValidationError{Name: "friendId", err: fmt.Errorf(`ent: validator failed for field "FriendRelationship.friendId": %w`, err)}
		}
	}
	return nil
}

func (fruo *FriendRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *FriendRelationship, err error) {
	if err := fruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(friendrelationship.Table, friendrelationship.Columns, sqlgraph.NewFieldSpec(friendrelationship.FieldID, field.TypeInt))
	id, ok := fruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FriendRelationship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, friendrelationship.FieldID)
		for _, f := range fields {
			if !friendrelationship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != friendrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fruo.mutation.UserId(); ok {
		_spec.SetField(friendrelationship.FieldUserId, field.TypeString, value)
	}
	if value, ok := fruo.mutation.FriendId(); ok {
		_spec.SetField(friendrelationship.FieldFriendId, field.TypeString, value)
	}
	_node = &FriendRelationship{config: fruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{friendrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fruo.mutation.done = true
	return _node, nil
}
