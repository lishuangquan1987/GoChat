// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/predicate"
	"gochat_server/ent/videomessage"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideoMessageUpdate is the builder for updating VideoMessage entities.
type VideoMessageUpdate struct {
	config
	hooks    []Hook
	mutation *VideoMessageMutation
}

// Where appends a list predicates to the VideoMessageUpdate builder.
func (vmu *VideoMessageUpdate) Where(ps ...predicate.VideoMessage) *VideoMessageUpdate {
	vmu.mutation.Where(ps...)
	return vmu
}

// SetMsgId sets the "msgId" field.
func (vmu *VideoMessageUpdate) SetMsgId(s string) *VideoMessageUpdate {
	vmu.mutation.SetMsgId(s)
	return vmu
}

// SetNillableMsgId sets the "msgId" field if the given value is not nil.
func (vmu *VideoMessageUpdate) SetNillableMsgId(s *string) *VideoMessageUpdate {
	if s != nil {
		vmu.SetMsgId(*s)
	}
	return vmu
}

// SetVideoUrl sets the "videoUrl" field.
func (vmu *VideoMessageUpdate) SetVideoUrl(s string) *VideoMessageUpdate {
	vmu.mutation.SetVideoUrl(s)
	return vmu
}

// SetNillableVideoUrl sets the "videoUrl" field if the given value is not nil.
func (vmu *VideoMessageUpdate) SetNillableVideoUrl(s *string) *VideoMessageUpdate {
	if s != nil {
		vmu.SetVideoUrl(*s)
	}
	return vmu
}

// Mutation returns the VideoMessageMutation object of the builder.
func (vmu *VideoMessageUpdate) Mutation() *VideoMessageMutation {
	return vmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vmu *VideoMessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vmu.sqlSave, vmu.mutation, vmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vmu *VideoMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := vmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vmu *VideoMessageUpdate) Exec(ctx context.Context) error {
	_, err := vmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmu *VideoMessageUpdate) ExecX(ctx context.Context) {
	if err := vmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vmu *VideoMessageUpdate) check() error {
	if v, ok := vmu.mutation.MsgId(); ok {
		if err := videomessage.MsgIdValidator(v); err != nil {
			return &ValidationError{Name: "msgId", err: fmt.Errorf(`ent: validator failed for field "VideoMessage.msgId": %w`, err)}
		}
	}
	if v, ok := vmu.mutation.VideoUrl(); ok {
		if err := videomessage.VideoUrlValidator(v); err != nil {
			return &ValidationError{Name: "videoUrl", err: fmt.Errorf(`ent: validator failed for field "VideoMessage.videoUrl": %w`, err)}
		}
	}
	return nil
}

func (vmu *VideoMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(videomessage.Table, videomessage.Columns, sqlgraph.NewFieldSpec(videomessage.FieldID, field.TypeInt))
	if ps := vmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vmu.mutation.MsgId(); ok {
		_spec.SetField(videomessage.FieldMsgId, field.TypeString, value)
	}
	if value, ok := vmu.mutation.VideoUrl(); ok {
		_spec.SetField(videomessage.FieldVideoUrl, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videomessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vmu.mutation.done = true
	return n, nil
}

// VideoMessageUpdateOne is the builder for updating a single VideoMessage entity.
type VideoMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideoMessageMutation
}

// SetMsgId sets the "msgId" field.
func (vmuo *VideoMessageUpdateOne) SetMsgId(s string) *VideoMessageUpdateOne {
	vmuo.mutation.SetMsgId(s)
	return vmuo
}

// SetNillableMsgId sets the "msgId" field if the given value is not nil.
func (vmuo *VideoMessageUpdateOne) SetNillableMsgId(s *string) *VideoMessageUpdateOne {
	if s != nil {
		vmuo.SetMsgId(*s)
	}
	return vmuo
}

// SetVideoUrl sets the "videoUrl" field.
func (vmuo *VideoMessageUpdateOne) SetVideoUrl(s string) *VideoMessageUpdateOne {
	vmuo.mutation.SetVideoUrl(s)
	return vmuo
}

// SetNillableVideoUrl sets the "videoUrl" field if the given value is not nil.
func (vmuo *VideoMessageUpdateOne) SetNillableVideoUrl(s *string) *VideoMessageUpdateOne {
	if s != nil {
		vmuo.SetVideoUrl(*s)
	}
	return vmuo
}

// Mutation returns the VideoMessageMutation object of the builder.
func (vmuo *VideoMessageUpdateOne) Mutation() *VideoMessageMutation {
	return vmuo.mutation
}

// Where appends a list predicates to the VideoMessageUpdate builder.
func (vmuo *VideoMessageUpdateOne) Where(ps ...predicate.VideoMessage) *VideoMessageUpdateOne {
	vmuo.mutation.Where(ps...)
	return vmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vmuo *VideoMessageUpdateOne) Select(field string, fields ...string) *VideoMessageUpdateOne {
	vmuo.fields = append([]string{field}, fields...)
	return vmuo
}

// Save executes the query and returns the updated VideoMessage entity.
func (vmuo *VideoMessageUpdateOne) Save(ctx context.Context) (*VideoMessage, error) {
	return withHooks(ctx, vmuo.sqlSave, vmuo.mutation, vmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vmuo *VideoMessageUpdateOne) SaveX(ctx context.Context) *VideoMessage {
	node, err := vmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vmuo *VideoMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := vmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmuo *VideoMessageUpdateOne) ExecX(ctx context.Context) {
	if err := vmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vmuo *VideoMessageUpdateOne) check() error {
	if v, ok := vmuo.mutation.MsgId(); ok {
		if err := videomessage.MsgIdValidator(v); err != nil {
			return &ValidationError{Name: "msgId", err: fmt.Errorf(`ent: validator failed for field "VideoMessage.msgId": %w`, err)}
		}
	}
	if v, ok := vmuo.mutation.VideoUrl(); ok {
		if err := videomessage.VideoUrlValidator(v); err != nil {
			return &ValidationError{Name: "videoUrl", err: fmt.Errorf(`ent: validator failed for field "VideoMessage.videoUrl": %w`, err)}
		}
	}
	return nil
}

func (vmuo *VideoMessageUpdateOne) sqlSave(ctx context.Context) (_node *VideoMessage, err error) {
	if err := vmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(videomessage.Table, videomessage.Columns, sqlgraph.NewFieldSpec(videomessage.FieldID, field.TypeInt))
	id, ok := vmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VideoMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videomessage.FieldID)
		for _, f := range fields {
			if !videomessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != videomessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vmuo.mutation.MsgId(); ok {
		_spec.SetField(videomessage.FieldMsgId, field.TypeString, value)
	}
	if value, ok := vmuo.mutation.VideoUrl(); ok {
		_spec.SetField(videomessage.FieldVideoUrl, field.TypeString, value)
	}
	_node = &VideoMessage{config: vmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videomessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vmuo.mutation.done = true
	return _node, nil
}
