// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/donotdisturb"
	"gochat_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DoNotDisturbUpdate is the builder for updating DoNotDisturb entities.
type DoNotDisturbUpdate struct {
	config
	hooks    []Hook
	mutation *DoNotDisturbMutation
}

// Where appends a list predicates to the DoNotDisturbUpdate builder.
func (dndu *DoNotDisturbUpdate) Where(ps ...predicate.DoNotDisturb) *DoNotDisturbUpdate {
	dndu.mutation.Where(ps...)
	return dndu
}

// SetUserID sets the "user_id" field.
func (dndu *DoNotDisturbUpdate) SetUserID(i int) *DoNotDisturbUpdate {
	dndu.mutation.ResetUserID()
	dndu.mutation.SetUserID(i)
	return dndu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dndu *DoNotDisturbUpdate) SetNillableUserID(i *int) *DoNotDisturbUpdate {
	if i != nil {
		dndu.SetUserID(*i)
	}
	return dndu
}

// AddUserID adds i to the "user_id" field.
func (dndu *DoNotDisturbUpdate) AddUserID(i int) *DoNotDisturbUpdate {
	dndu.mutation.AddUserID(i)
	return dndu
}

// SetTargetUserID sets the "target_user_id" field.
func (dndu *DoNotDisturbUpdate) SetTargetUserID(i int) *DoNotDisturbUpdate {
	dndu.mutation.ResetTargetUserID()
	dndu.mutation.SetTargetUserID(i)
	return dndu
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (dndu *DoNotDisturbUpdate) SetNillableTargetUserID(i *int) *DoNotDisturbUpdate {
	if i != nil {
		dndu.SetTargetUserID(*i)
	}
	return dndu
}

// AddTargetUserID adds i to the "target_user_id" field.
func (dndu *DoNotDisturbUpdate) AddTargetUserID(i int) *DoNotDisturbUpdate {
	dndu.mutation.AddTargetUserID(i)
	return dndu
}

// ClearTargetUserID clears the value of the "target_user_id" field.
func (dndu *DoNotDisturbUpdate) ClearTargetUserID() *DoNotDisturbUpdate {
	dndu.mutation.ClearTargetUserID()
	return dndu
}

// SetTargetGroupID sets the "target_group_id" field.
func (dndu *DoNotDisturbUpdate) SetTargetGroupID(i int) *DoNotDisturbUpdate {
	dndu.mutation.ResetTargetGroupID()
	dndu.mutation.SetTargetGroupID(i)
	return dndu
}

// SetNillableTargetGroupID sets the "target_group_id" field if the given value is not nil.
func (dndu *DoNotDisturbUpdate) SetNillableTargetGroupID(i *int) *DoNotDisturbUpdate {
	if i != nil {
		dndu.SetTargetGroupID(*i)
	}
	return dndu
}

// AddTargetGroupID adds i to the "target_group_id" field.
func (dndu *DoNotDisturbUpdate) AddTargetGroupID(i int) *DoNotDisturbUpdate {
	dndu.mutation.AddTargetGroupID(i)
	return dndu
}

// ClearTargetGroupID clears the value of the "target_group_id" field.
func (dndu *DoNotDisturbUpdate) ClearTargetGroupID() *DoNotDisturbUpdate {
	dndu.mutation.ClearTargetGroupID()
	return dndu
}

// SetIsGlobal sets the "is_global" field.
func (dndu *DoNotDisturbUpdate) SetIsGlobal(b bool) *DoNotDisturbUpdate {
	dndu.mutation.SetIsGlobal(b)
	return dndu
}

// SetNillableIsGlobal sets the "is_global" field if the given value is not nil.
func (dndu *DoNotDisturbUpdate) SetNillableIsGlobal(b *bool) *DoNotDisturbUpdate {
	if b != nil {
		dndu.SetIsGlobal(*b)
	}
	return dndu
}

// SetStartTime sets the "start_time" field.
func (dndu *DoNotDisturbUpdate) SetStartTime(t time.Time) *DoNotDisturbUpdate {
	dndu.mutation.SetStartTime(t)
	return dndu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (dndu *DoNotDisturbUpdate) SetNillableStartTime(t *time.Time) *DoNotDisturbUpdate {
	if t != nil {
		dndu.SetStartTime(*t)
	}
	return dndu
}

// ClearStartTime clears the value of the "start_time" field.
func (dndu *DoNotDisturbUpdate) ClearStartTime() *DoNotDisturbUpdate {
	dndu.mutation.ClearStartTime()
	return dndu
}

// SetEndTime sets the "end_time" field.
func (dndu *DoNotDisturbUpdate) SetEndTime(t time.Time) *DoNotDisturbUpdate {
	dndu.mutation.SetEndTime(t)
	return dndu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (dndu *DoNotDisturbUpdate) SetNillableEndTime(t *time.Time) *DoNotDisturbUpdate {
	if t != nil {
		dndu.SetEndTime(*t)
	}
	return dndu
}

// ClearEndTime clears the value of the "end_time" field.
func (dndu *DoNotDisturbUpdate) ClearEndTime() *DoNotDisturbUpdate {
	dndu.mutation.ClearEndTime()
	return dndu
}

// SetCreatedAt sets the "created_at" field.
func (dndu *DoNotDisturbUpdate) SetCreatedAt(t time.Time) *DoNotDisturbUpdate {
	dndu.mutation.SetCreatedAt(t)
	return dndu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dndu *DoNotDisturbUpdate) SetNillableCreatedAt(t *time.Time) *DoNotDisturbUpdate {
	if t != nil {
		dndu.SetCreatedAt(*t)
	}
	return dndu
}

// SetUpdatedAt sets the "updated_at" field.
func (dndu *DoNotDisturbUpdate) SetUpdatedAt(t time.Time) *DoNotDisturbUpdate {
	dndu.mutation.SetUpdatedAt(t)
	return dndu
}

// Mutation returns the DoNotDisturbMutation object of the builder.
func (dndu *DoNotDisturbUpdate) Mutation() *DoNotDisturbMutation {
	return dndu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dndu *DoNotDisturbUpdate) Save(ctx context.Context) (int, error) {
	dndu.defaults()
	return withHooks(ctx, dndu.sqlSave, dndu.mutation, dndu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dndu *DoNotDisturbUpdate) SaveX(ctx context.Context) int {
	affected, err := dndu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dndu *DoNotDisturbUpdate) Exec(ctx context.Context) error {
	_, err := dndu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dndu *DoNotDisturbUpdate) ExecX(ctx context.Context) {
	if err := dndu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dndu *DoNotDisturbUpdate) defaults() {
	if _, ok := dndu.mutation.UpdatedAt(); !ok {
		v := donotdisturb.UpdateDefaultUpdatedAt()
		dndu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dndu *DoNotDisturbUpdate) check() error {
	if v, ok := dndu.mutation.UserID(); ok {
		if err := donotdisturb.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "DoNotDisturb.user_id": %w`, err)}
		}
	}
	return nil
}

func (dndu *DoNotDisturbUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dndu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(donotdisturb.Table, donotdisturb.Columns, sqlgraph.NewFieldSpec(donotdisturb.FieldID, field.TypeInt))
	if ps := dndu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dndu.mutation.UserID(); ok {
		_spec.SetField(donotdisturb.FieldUserID, field.TypeInt, value)
	}
	if value, ok := dndu.mutation.AddedUserID(); ok {
		_spec.AddField(donotdisturb.FieldUserID, field.TypeInt, value)
	}
	if value, ok := dndu.mutation.TargetUserID(); ok {
		_spec.SetField(donotdisturb.FieldTargetUserID, field.TypeInt, value)
	}
	if value, ok := dndu.mutation.AddedTargetUserID(); ok {
		_spec.AddField(donotdisturb.FieldTargetUserID, field.TypeInt, value)
	}
	if dndu.mutation.TargetUserIDCleared() {
		_spec.ClearField(donotdisturb.FieldTargetUserID, field.TypeInt)
	}
	if value, ok := dndu.mutation.TargetGroupID(); ok {
		_spec.SetField(donotdisturb.FieldTargetGroupID, field.TypeInt, value)
	}
	if value, ok := dndu.mutation.AddedTargetGroupID(); ok {
		_spec.AddField(donotdisturb.FieldTargetGroupID, field.TypeInt, value)
	}
	if dndu.mutation.TargetGroupIDCleared() {
		_spec.ClearField(donotdisturb.FieldTargetGroupID, field.TypeInt)
	}
	if value, ok := dndu.mutation.IsGlobal(); ok {
		_spec.SetField(donotdisturb.FieldIsGlobal, field.TypeBool, value)
	}
	if value, ok := dndu.mutation.StartTime(); ok {
		_spec.SetField(donotdisturb.FieldStartTime, field.TypeTime, value)
	}
	if dndu.mutation.StartTimeCleared() {
		_spec.ClearField(donotdisturb.FieldStartTime, field.TypeTime)
	}
	if value, ok := dndu.mutation.EndTime(); ok {
		_spec.SetField(donotdisturb.FieldEndTime, field.TypeTime, value)
	}
	if dndu.mutation.EndTimeCleared() {
		_spec.ClearField(donotdisturb.FieldEndTime, field.TypeTime)
	}
	if value, ok := dndu.mutation.CreatedAt(); ok {
		_spec.SetField(donotdisturb.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := dndu.mutation.UpdatedAt(); ok {
		_spec.SetField(donotdisturb.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dndu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{donotdisturb.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dndu.mutation.done = true
	return n, nil
}

// DoNotDisturbUpdateOne is the builder for updating a single DoNotDisturb entity.
type DoNotDisturbUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DoNotDisturbMutation
}

// SetUserID sets the "user_id" field.
func (dnduo *DoNotDisturbUpdateOne) SetUserID(i int) *DoNotDisturbUpdateOne {
	dnduo.mutation.ResetUserID()
	dnduo.mutation.SetUserID(i)
	return dnduo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dnduo *DoNotDisturbUpdateOne) SetNillableUserID(i *int) *DoNotDisturbUpdateOne {
	if i != nil {
		dnduo.SetUserID(*i)
	}
	return dnduo
}

// AddUserID adds i to the "user_id" field.
func (dnduo *DoNotDisturbUpdateOne) AddUserID(i int) *DoNotDisturbUpdateOne {
	dnduo.mutation.AddUserID(i)
	return dnduo
}

// SetTargetUserID sets the "target_user_id" field.
func (dnduo *DoNotDisturbUpdateOne) SetTargetUserID(i int) *DoNotDisturbUpdateOne {
	dnduo.mutation.ResetTargetUserID()
	dnduo.mutation.SetTargetUserID(i)
	return dnduo
}

// SetNillableTargetUserID sets the "target_user_id" field if the given value is not nil.
func (dnduo *DoNotDisturbUpdateOne) SetNillableTargetUserID(i *int) *DoNotDisturbUpdateOne {
	if i != nil {
		dnduo.SetTargetUserID(*i)
	}
	return dnduo
}

// AddTargetUserID adds i to the "target_user_id" field.
func (dnduo *DoNotDisturbUpdateOne) AddTargetUserID(i int) *DoNotDisturbUpdateOne {
	dnduo.mutation.AddTargetUserID(i)
	return dnduo
}

// ClearTargetUserID clears the value of the "target_user_id" field.
func (dnduo *DoNotDisturbUpdateOne) ClearTargetUserID() *DoNotDisturbUpdateOne {
	dnduo.mutation.ClearTargetUserID()
	return dnduo
}

// SetTargetGroupID sets the "target_group_id" field.
func (dnduo *DoNotDisturbUpdateOne) SetTargetGroupID(i int) *DoNotDisturbUpdateOne {
	dnduo.mutation.ResetTargetGroupID()
	dnduo.mutation.SetTargetGroupID(i)
	return dnduo
}

// SetNillableTargetGroupID sets the "target_group_id" field if the given value is not nil.
func (dnduo *DoNotDisturbUpdateOne) SetNillableTargetGroupID(i *int) *DoNotDisturbUpdateOne {
	if i != nil {
		dnduo.SetTargetGroupID(*i)
	}
	return dnduo
}

// AddTargetGroupID adds i to the "target_group_id" field.
func (dnduo *DoNotDisturbUpdateOne) AddTargetGroupID(i int) *DoNotDisturbUpdateOne {
	dnduo.mutation.AddTargetGroupID(i)
	return dnduo
}

// ClearTargetGroupID clears the value of the "target_group_id" field.
func (dnduo *DoNotDisturbUpdateOne) ClearTargetGroupID() *DoNotDisturbUpdateOne {
	dnduo.mutation.ClearTargetGroupID()
	return dnduo
}

// SetIsGlobal sets the "is_global" field.
func (dnduo *DoNotDisturbUpdateOne) SetIsGlobal(b bool) *DoNotDisturbUpdateOne {
	dnduo.mutation.SetIsGlobal(b)
	return dnduo
}

// SetNillableIsGlobal sets the "is_global" field if the given value is not nil.
func (dnduo *DoNotDisturbUpdateOne) SetNillableIsGlobal(b *bool) *DoNotDisturbUpdateOne {
	if b != nil {
		dnduo.SetIsGlobal(*b)
	}
	return dnduo
}

// SetStartTime sets the "start_time" field.
func (dnduo *DoNotDisturbUpdateOne) SetStartTime(t time.Time) *DoNotDisturbUpdateOne {
	dnduo.mutation.SetStartTime(t)
	return dnduo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (dnduo *DoNotDisturbUpdateOne) SetNillableStartTime(t *time.Time) *DoNotDisturbUpdateOne {
	if t != nil {
		dnduo.SetStartTime(*t)
	}
	return dnduo
}

// ClearStartTime clears the value of the "start_time" field.
func (dnduo *DoNotDisturbUpdateOne) ClearStartTime() *DoNotDisturbUpdateOne {
	dnduo.mutation.ClearStartTime()
	return dnduo
}

// SetEndTime sets the "end_time" field.
func (dnduo *DoNotDisturbUpdateOne) SetEndTime(t time.Time) *DoNotDisturbUpdateOne {
	dnduo.mutation.SetEndTime(t)
	return dnduo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (dnduo *DoNotDisturbUpdateOne) SetNillableEndTime(t *time.Time) *DoNotDisturbUpdateOne {
	if t != nil {
		dnduo.SetEndTime(*t)
	}
	return dnduo
}

// ClearEndTime clears the value of the "end_time" field.
func (dnduo *DoNotDisturbUpdateOne) ClearEndTime() *DoNotDisturbUpdateOne {
	dnduo.mutation.ClearEndTime()
	return dnduo
}

// SetCreatedAt sets the "created_at" field.
func (dnduo *DoNotDisturbUpdateOne) SetCreatedAt(t time.Time) *DoNotDisturbUpdateOne {
	dnduo.mutation.SetCreatedAt(t)
	return dnduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dnduo *DoNotDisturbUpdateOne) SetNillableCreatedAt(t *time.Time) *DoNotDisturbUpdateOne {
	if t != nil {
		dnduo.SetCreatedAt(*t)
	}
	return dnduo
}

// SetUpdatedAt sets the "updated_at" field.
func (dnduo *DoNotDisturbUpdateOne) SetUpdatedAt(t time.Time) *DoNotDisturbUpdateOne {
	dnduo.mutation.SetUpdatedAt(t)
	return dnduo
}

// Mutation returns the DoNotDisturbMutation object of the builder.
func (dnduo *DoNotDisturbUpdateOne) Mutation() *DoNotDisturbMutation {
	return dnduo.mutation
}

// Where appends a list predicates to the DoNotDisturbUpdate builder.
func (dnduo *DoNotDisturbUpdateOne) Where(ps ...predicate.DoNotDisturb) *DoNotDisturbUpdateOne {
	dnduo.mutation.Where(ps...)
	return dnduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dnduo *DoNotDisturbUpdateOne) Select(field string, fields ...string) *DoNotDisturbUpdateOne {
	dnduo.fields = append([]string{field}, fields...)
	return dnduo
}

// Save executes the query and returns the updated DoNotDisturb entity.
func (dnduo *DoNotDisturbUpdateOne) Save(ctx context.Context) (*DoNotDisturb, error) {
	dnduo.defaults()
	return withHooks(ctx, dnduo.sqlSave, dnduo.mutation, dnduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dnduo *DoNotDisturbUpdateOne) SaveX(ctx context.Context) *DoNotDisturb {
	node, err := dnduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dnduo *DoNotDisturbUpdateOne) Exec(ctx context.Context) error {
	_, err := dnduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dnduo *DoNotDisturbUpdateOne) ExecX(ctx context.Context) {
	if err := dnduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dnduo *DoNotDisturbUpdateOne) defaults() {
	if _, ok := dnduo.mutation.UpdatedAt(); !ok {
		v := donotdisturb.UpdateDefaultUpdatedAt()
		dnduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dnduo *DoNotDisturbUpdateOne) check() error {
	if v, ok := dnduo.mutation.UserID(); ok {
		if err := donotdisturb.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "DoNotDisturb.user_id": %w`, err)}
		}
	}
	return nil
}

func (dnduo *DoNotDisturbUpdateOne) sqlSave(ctx context.Context) (_node *DoNotDisturb, err error) {
	if err := dnduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(donotdisturb.Table, donotdisturb.Columns, sqlgraph.NewFieldSpec(donotdisturb.FieldID, field.TypeInt))
	id, ok := dnduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DoNotDisturb.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dnduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, donotdisturb.FieldID)
		for _, f := range fields {
			if !donotdisturb.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != donotdisturb.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dnduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dnduo.mutation.UserID(); ok {
		_spec.SetField(donotdisturb.FieldUserID, field.TypeInt, value)
	}
	if value, ok := dnduo.mutation.AddedUserID(); ok {
		_spec.AddField(donotdisturb.FieldUserID, field.TypeInt, value)
	}
	if value, ok := dnduo.mutation.TargetUserID(); ok {
		_spec.SetField(donotdisturb.FieldTargetUserID, field.TypeInt, value)
	}
	if value, ok := dnduo.mutation.AddedTargetUserID(); ok {
		_spec.AddField(donotdisturb.FieldTargetUserID, field.TypeInt, value)
	}
	if dnduo.mutation.TargetUserIDCleared() {
		_spec.ClearField(donotdisturb.FieldTargetUserID, field.TypeInt)
	}
	if value, ok := dnduo.mutation.TargetGroupID(); ok {
		_spec.SetField(donotdisturb.FieldTargetGroupID, field.TypeInt, value)
	}
	if value, ok := dnduo.mutation.AddedTargetGroupID(); ok {
		_spec.AddField(donotdisturb.FieldTargetGroupID, field.TypeInt, value)
	}
	if dnduo.mutation.TargetGroupIDCleared() {
		_spec.ClearField(donotdisturb.FieldTargetGroupID, field.TypeInt)
	}
	if value, ok := dnduo.mutation.IsGlobal(); ok {
		_spec.SetField(donotdisturb.FieldIsGlobal, field.TypeBool, value)
	}
	if value, ok := dnduo.mutation.StartTime(); ok {
		_spec.SetField(donotdisturb.FieldStartTime, field.TypeTime, value)
	}
	if dnduo.mutation.StartTimeCleared() {
		_spec.ClearField(donotdisturb.FieldStartTime, field.TypeTime)
	}
	if value, ok := dnduo.mutation.EndTime(); ok {
		_spec.SetField(donotdisturb.FieldEndTime, field.TypeTime, value)
	}
	if dnduo.mutation.EndTimeCleared() {
		_spec.ClearField(donotdisturb.FieldEndTime, field.TypeTime)
	}
	if value, ok := dnduo.mutation.CreatedAt(); ok {
		_spec.SetField(donotdisturb.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := dnduo.mutation.UpdatedAt(); ok {
		_spec.SetField(donotdisturb.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &DoNotDisturb{config: dnduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dnduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{donotdisturb.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dnduo.mutation.done = true
	return _node, nil
}
