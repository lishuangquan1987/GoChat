// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/chatrecord"
	"gochat_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChatRecordUpdate is the builder for updating ChatRecord entities.
type ChatRecordUpdate struct {
	config
	hooks    []Hook
	mutation *ChatRecordMutation
}

// Where appends a list predicates to the ChatRecordUpdate builder.
func (cru *ChatRecordUpdate) Where(ps ...predicate.ChatRecord) *ChatRecordUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetMsgId sets the "msgId" field.
func (cru *ChatRecordUpdate) SetMsgId(s string) *ChatRecordUpdate {
	cru.mutation.SetMsgId(s)
	return cru
}

// SetNillableMsgId sets the "msgId" field if the given value is not nil.
func (cru *ChatRecordUpdate) SetNillableMsgId(s *string) *ChatRecordUpdate {
	if s != nil {
		cru.SetMsgId(*s)
	}
	return cru
}

// SetFromUserId sets the "fromUserId" field.
func (cru *ChatRecordUpdate) SetFromUserId(s string) *ChatRecordUpdate {
	cru.mutation.SetFromUserId(s)
	return cru
}

// SetNillableFromUserId sets the "fromUserId" field if the given value is not nil.
func (cru *ChatRecordUpdate) SetNillableFromUserId(s *string) *ChatRecordUpdate {
	if s != nil {
		cru.SetFromUserId(*s)
	}
	return cru
}

// SetToUserId sets the "toUserId" field.
func (cru *ChatRecordUpdate) SetToUserId(s string) *ChatRecordUpdate {
	cru.mutation.SetToUserId(s)
	return cru
}

// SetNillableToUserId sets the "toUserId" field if the given value is not nil.
func (cru *ChatRecordUpdate) SetNillableToUserId(s *string) *ChatRecordUpdate {
	if s != nil {
		cru.SetToUserId(*s)
	}
	return cru
}

// SetMsgType sets the "msgType" field.
func (cru *ChatRecordUpdate) SetMsgType(s string) *ChatRecordUpdate {
	cru.mutation.SetMsgType(s)
	return cru
}

// SetNillableMsgType sets the "msgType" field if the given value is not nil.
func (cru *ChatRecordUpdate) SetNillableMsgType(s *string) *ChatRecordUpdate {
	if s != nil {
		cru.SetMsgType(*s)
	}
	return cru
}

// SetCreateTime sets the "createTime" field.
func (cru *ChatRecordUpdate) SetCreateTime(t time.Time) *ChatRecordUpdate {
	cru.mutation.SetCreateTime(t)
	return cru
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (cru *ChatRecordUpdate) SetNillableCreateTime(t *time.Time) *ChatRecordUpdate {
	if t != nil {
		cru.SetCreateTime(*t)
	}
	return cru
}

// Mutation returns the ChatRecordMutation object of the builder.
func (cru *ChatRecordUpdate) Mutation() *ChatRecordMutation {
	return cru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *ChatRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cru.sqlSave, cru.mutation, cru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cru *ChatRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *ChatRecordUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *ChatRecordUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cru *ChatRecordUpdate) check() error {
	if v, ok := cru.mutation.MsgId(); ok {
		if err := chatrecord.MsgIdValidator(v); err != nil {
			return &ValidationError{Name: "msgId", err: fmt.Errorf(`ent: validator failed for field "ChatRecord.msgId": %w`, err)}
		}
	}
	if v, ok := cru.mutation.FromUserId(); ok {
		if err := chatrecord.FromUserIdValidator(v); err != nil {
			return &ValidationError{Name: "fromUserId", err: fmt.Errorf(`ent: validator failed for field "ChatRecord.fromUserId": %w`, err)}
		}
	}
	if v, ok := cru.mutation.ToUserId(); ok {
		if err := chatrecord.ToUserIdValidator(v); err != nil {
			return &ValidationError{Name: "toUserId", err: fmt.Errorf(`ent: validator failed for field "ChatRecord.toUserId": %w`, err)}
		}
	}
	if v, ok := cru.mutation.MsgType(); ok {
		if err := chatrecord.MsgTypeValidator(v); err != nil {
			return &ValidationError{Name: "msgType", err: fmt.Errorf(`ent: validator failed for field "ChatRecord.msgType": %w`, err)}
		}
	}
	return nil
}

func (cru *ChatRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatrecord.Table, chatrecord.Columns, sqlgraph.NewFieldSpec(chatrecord.FieldID, field.TypeInt))
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.MsgId(); ok {
		_spec.SetField(chatrecord.FieldMsgId, field.TypeString, value)
	}
	if value, ok := cru.mutation.FromUserId(); ok {
		_spec.SetField(chatrecord.FieldFromUserId, field.TypeString, value)
	}
	if value, ok := cru.mutation.ToUserId(); ok {
		_spec.SetField(chatrecord.FieldToUserId, field.TypeString, value)
	}
	if value, ok := cru.mutation.MsgType(); ok {
		_spec.SetField(chatrecord.FieldMsgType, field.TypeString, value)
	}
	if value, ok := cru.mutation.CreateTime(); ok {
		_spec.SetField(chatrecord.FieldCreateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cru.mutation.done = true
	return n, nil
}

// ChatRecordUpdateOne is the builder for updating a single ChatRecord entity.
type ChatRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatRecordMutation
}

// SetMsgId sets the "msgId" field.
func (cruo *ChatRecordUpdateOne) SetMsgId(s string) *ChatRecordUpdateOne {
	cruo.mutation.SetMsgId(s)
	return cruo
}

// SetNillableMsgId sets the "msgId" field if the given value is not nil.
func (cruo *ChatRecordUpdateOne) SetNillableMsgId(s *string) *ChatRecordUpdateOne {
	if s != nil {
		cruo.SetMsgId(*s)
	}
	return cruo
}

// SetFromUserId sets the "fromUserId" field.
func (cruo *ChatRecordUpdateOne) SetFromUserId(s string) *ChatRecordUpdateOne {
	cruo.mutation.SetFromUserId(s)
	return cruo
}

// SetNillableFromUserId sets the "fromUserId" field if the given value is not nil.
func (cruo *ChatRecordUpdateOne) SetNillableFromUserId(s *string) *ChatRecordUpdateOne {
	if s != nil {
		cruo.SetFromUserId(*s)
	}
	return cruo
}

// SetToUserId sets the "toUserId" field.
func (cruo *ChatRecordUpdateOne) SetToUserId(s string) *ChatRecordUpdateOne {
	cruo.mutation.SetToUserId(s)
	return cruo
}

// SetNillableToUserId sets the "toUserId" field if the given value is not nil.
func (cruo *ChatRecordUpdateOne) SetNillableToUserId(s *string) *ChatRecordUpdateOne {
	if s != nil {
		cruo.SetToUserId(*s)
	}
	return cruo
}

// SetMsgType sets the "msgType" field.
func (cruo *ChatRecordUpdateOne) SetMsgType(s string) *ChatRecordUpdateOne {
	cruo.mutation.SetMsgType(s)
	return cruo
}

// SetNillableMsgType sets the "msgType" field if the given value is not nil.
func (cruo *ChatRecordUpdateOne) SetNillableMsgType(s *string) *ChatRecordUpdateOne {
	if s != nil {
		cruo.SetMsgType(*s)
	}
	return cruo
}

// SetCreateTime sets the "createTime" field.
func (cruo *ChatRecordUpdateOne) SetCreateTime(t time.Time) *ChatRecordUpdateOne {
	cruo.mutation.SetCreateTime(t)
	return cruo
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (cruo *ChatRecordUpdateOne) SetNillableCreateTime(t *time.Time) *ChatRecordUpdateOne {
	if t != nil {
		cruo.SetCreateTime(*t)
	}
	return cruo
}

// Mutation returns the ChatRecordMutation object of the builder.
func (cruo *ChatRecordUpdateOne) Mutation() *ChatRecordMutation {
	return cruo.mutation
}

// Where appends a list predicates to the ChatRecordUpdate builder.
func (cruo *ChatRecordUpdateOne) Where(ps ...predicate.ChatRecord) *ChatRecordUpdateOne {
	cruo.mutation.Where(ps...)
	return cruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *ChatRecordUpdateOne) Select(field string, fields ...string) *ChatRecordUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated ChatRecord entity.
func (cruo *ChatRecordUpdateOne) Save(ctx context.Context) (*ChatRecord, error) {
	return withHooks(ctx, cruo.sqlSave, cruo.mutation, cruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *ChatRecordUpdateOne) SaveX(ctx context.Context) *ChatRecord {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *ChatRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *ChatRecordUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cruo *ChatRecordUpdateOne) check() error {
	if v, ok := cruo.mutation.MsgId(); ok {
		if err := chatrecord.MsgIdValidator(v); err != nil {
			return &ValidationError{Name: "msgId", err: fmt.Errorf(`ent: validator failed for field "ChatRecord.msgId": %w`, err)}
		}
	}
	if v, ok := cruo.mutation.FromUserId(); ok {
		if err := chatrecord.FromUserIdValidator(v); err != nil {
			return &ValidationError{Name: "fromUserId", err: fmt.Errorf(`ent: validator failed for field "ChatRecord.fromUserId": %w`, err)}
		}
	}
	if v, ok := cruo.mutation.ToUserId(); ok {
		if err := chatrecord.ToUserIdValidator(v); err != nil {
			return &ValidationError{Name: "toUserId", err: fmt.Errorf(`ent: validator failed for field "ChatRecord.toUserId": %w`, err)}
		}
	}
	if v, ok := cruo.mutation.MsgType(); ok {
		if err := chatrecord.MsgTypeValidator(v); err != nil {
			return &ValidationError{Name: "msgType", err: fmt.Errorf(`ent: validator failed for field "ChatRecord.msgType": %w`, err)}
		}
	}
	return nil
}

func (cruo *ChatRecordUpdateOne) sqlSave(ctx context.Context) (_node *ChatRecord, err error) {
	if err := cruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatrecord.Table, chatrecord.Columns, sqlgraph.NewFieldSpec(chatrecord.FieldID, field.TypeInt))
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChatRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatrecord.FieldID)
		for _, f := range fields {
			if !chatrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chatrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.MsgId(); ok {
		_spec.SetField(chatrecord.FieldMsgId, field.TypeString, value)
	}
	if value, ok := cruo.mutation.FromUserId(); ok {
		_spec.SetField(chatrecord.FieldFromUserId, field.TypeString, value)
	}
	if value, ok := cruo.mutation.ToUserId(); ok {
		_spec.SetField(chatrecord.FieldToUserId, field.TypeString, value)
	}
	if value, ok := cruo.mutation.MsgType(); ok {
		_spec.SetField(chatrecord.FieldMsgType, field.TypeString, value)
	}
	if value, ok := cruo.mutation.CreateTime(); ok {
		_spec.SetField(chatrecord.FieldCreateTime, field.TypeTime, value)
	}
	_node = &ChatRecord{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cruo.mutation.done = true
	return _node, nil
}
