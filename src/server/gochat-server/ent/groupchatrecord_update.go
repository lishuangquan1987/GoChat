// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/groupchatrecord"
	"gochat_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupChatRecordUpdate is the builder for updating GroupChatRecord entities.
type GroupChatRecordUpdate struct {
	config
	hooks    []Hook
	mutation *GroupChatRecordMutation
}

// Where appends a list predicates to the GroupChatRecordUpdate builder.
func (gcru *GroupChatRecordUpdate) Where(ps ...predicate.GroupChatRecord) *GroupChatRecordUpdate {
	gcru.mutation.Where(ps...)
	return gcru
}

// SetMsgId sets the "msgId" field.
func (gcru *GroupChatRecordUpdate) SetMsgId(s string) *GroupChatRecordUpdate {
	gcru.mutation.SetMsgId(s)
	return gcru
}

// SetNillableMsgId sets the "msgId" field if the given value is not nil.
func (gcru *GroupChatRecordUpdate) SetNillableMsgId(s *string) *GroupChatRecordUpdate {
	if s != nil {
		gcru.SetMsgId(*s)
	}
	return gcru
}

// SetFromUserId sets the "fromUserId" field.
func (gcru *GroupChatRecordUpdate) SetFromUserId(s string) *GroupChatRecordUpdate {
	gcru.mutation.SetFromUserId(s)
	return gcru
}

// SetNillableFromUserId sets the "fromUserId" field if the given value is not nil.
func (gcru *GroupChatRecordUpdate) SetNillableFromUserId(s *string) *GroupChatRecordUpdate {
	if s != nil {
		gcru.SetFromUserId(*s)
	}
	return gcru
}

// SetGroupId sets the "groupId" field.
func (gcru *GroupChatRecordUpdate) SetGroupId(s string) *GroupChatRecordUpdate {
	gcru.mutation.SetGroupId(s)
	return gcru
}

// SetNillableGroupId sets the "groupId" field if the given value is not nil.
func (gcru *GroupChatRecordUpdate) SetNillableGroupId(s *string) *GroupChatRecordUpdate {
	if s != nil {
		gcru.SetGroupId(*s)
	}
	return gcru
}

// SetMsgType sets the "msgType" field.
func (gcru *GroupChatRecordUpdate) SetMsgType(s string) *GroupChatRecordUpdate {
	gcru.mutation.SetMsgType(s)
	return gcru
}

// SetNillableMsgType sets the "msgType" field if the given value is not nil.
func (gcru *GroupChatRecordUpdate) SetNillableMsgType(s *string) *GroupChatRecordUpdate {
	if s != nil {
		gcru.SetMsgType(*s)
	}
	return gcru
}

// SetCreateTime sets the "createTime" field.
func (gcru *GroupChatRecordUpdate) SetCreateTime(t time.Time) *GroupChatRecordUpdate {
	gcru.mutation.SetCreateTime(t)
	return gcru
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (gcru *GroupChatRecordUpdate) SetNillableCreateTime(t *time.Time) *GroupChatRecordUpdate {
	if t != nil {
		gcru.SetCreateTime(*t)
	}
	return gcru
}

// Mutation returns the GroupChatRecordMutation object of the builder.
func (gcru *GroupChatRecordUpdate) Mutation() *GroupChatRecordMutation {
	return gcru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gcru *GroupChatRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gcru.sqlSave, gcru.mutation, gcru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gcru *GroupChatRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := gcru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gcru *GroupChatRecordUpdate) Exec(ctx context.Context) error {
	_, err := gcru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcru *GroupChatRecordUpdate) ExecX(ctx context.Context) {
	if err := gcru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gcru *GroupChatRecordUpdate) check() error {
	if v, ok := gcru.mutation.MsgId(); ok {
		if err := groupchatrecord.MsgIdValidator(v); err != nil {
			return &ValidationError{Name: "msgId", err: fmt.Errorf(`ent: validator failed for field "GroupChatRecord.msgId": %w`, err)}
		}
	}
	if v, ok := gcru.mutation.FromUserId(); ok {
		if err := groupchatrecord.FromUserIdValidator(v); err != nil {
			return &ValidationError{Name: "fromUserId", err: fmt.Errorf(`ent: validator failed for field "GroupChatRecord.fromUserId": %w`, err)}
		}
	}
	if v, ok := gcru.mutation.GroupId(); ok {
		if err := groupchatrecord.GroupIdValidator(v); err != nil {
			return &ValidationError{Name: "groupId", err: fmt.Errorf(`ent: validator failed for field "GroupChatRecord.groupId": %w`, err)}
		}
	}
	if v, ok := gcru.mutation.MsgType(); ok {
		if err := groupchatrecord.MsgTypeValidator(v); err != nil {
			return &ValidationError{Name: "msgType", err: fmt.Errorf(`ent: validator failed for field "GroupChatRecord.msgType": %w`, err)}
		}
	}
	return nil
}

func (gcru *GroupChatRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gcru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(groupchatrecord.Table, groupchatrecord.Columns, sqlgraph.NewFieldSpec(groupchatrecord.FieldID, field.TypeInt))
	if ps := gcru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcru.mutation.MsgId(); ok {
		_spec.SetField(groupchatrecord.FieldMsgId, field.TypeString, value)
	}
	if value, ok := gcru.mutation.FromUserId(); ok {
		_spec.SetField(groupchatrecord.FieldFromUserId, field.TypeString, value)
	}
	if value, ok := gcru.mutation.GroupId(); ok {
		_spec.SetField(groupchatrecord.FieldGroupId, field.TypeString, value)
	}
	if value, ok := gcru.mutation.MsgType(); ok {
		_spec.SetField(groupchatrecord.FieldMsgType, field.TypeString, value)
	}
	if value, ok := gcru.mutation.CreateTime(); ok {
		_spec.SetField(groupchatrecord.FieldCreateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gcru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupchatrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gcru.mutation.done = true
	return n, nil
}

// GroupChatRecordUpdateOne is the builder for updating a single GroupChatRecord entity.
type GroupChatRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupChatRecordMutation
}

// SetMsgId sets the "msgId" field.
func (gcruo *GroupChatRecordUpdateOne) SetMsgId(s string) *GroupChatRecordUpdateOne {
	gcruo.mutation.SetMsgId(s)
	return gcruo
}

// SetNillableMsgId sets the "msgId" field if the given value is not nil.
func (gcruo *GroupChatRecordUpdateOne) SetNillableMsgId(s *string) *GroupChatRecordUpdateOne {
	if s != nil {
		gcruo.SetMsgId(*s)
	}
	return gcruo
}

// SetFromUserId sets the "fromUserId" field.
func (gcruo *GroupChatRecordUpdateOne) SetFromUserId(s string) *GroupChatRecordUpdateOne {
	gcruo.mutation.SetFromUserId(s)
	return gcruo
}

// SetNillableFromUserId sets the "fromUserId" field if the given value is not nil.
func (gcruo *GroupChatRecordUpdateOne) SetNillableFromUserId(s *string) *GroupChatRecordUpdateOne {
	if s != nil {
		gcruo.SetFromUserId(*s)
	}
	return gcruo
}

// SetGroupId sets the "groupId" field.
func (gcruo *GroupChatRecordUpdateOne) SetGroupId(s string) *GroupChatRecordUpdateOne {
	gcruo.mutation.SetGroupId(s)
	return gcruo
}

// SetNillableGroupId sets the "groupId" field if the given value is not nil.
func (gcruo *GroupChatRecordUpdateOne) SetNillableGroupId(s *string) *GroupChatRecordUpdateOne {
	if s != nil {
		gcruo.SetGroupId(*s)
	}
	return gcruo
}

// SetMsgType sets the "msgType" field.
func (gcruo *GroupChatRecordUpdateOne) SetMsgType(s string) *GroupChatRecordUpdateOne {
	gcruo.mutation.SetMsgType(s)
	return gcruo
}

// SetNillableMsgType sets the "msgType" field if the given value is not nil.
func (gcruo *GroupChatRecordUpdateOne) SetNillableMsgType(s *string) *GroupChatRecordUpdateOne {
	if s != nil {
		gcruo.SetMsgType(*s)
	}
	return gcruo
}

// SetCreateTime sets the "createTime" field.
func (gcruo *GroupChatRecordUpdateOne) SetCreateTime(t time.Time) *GroupChatRecordUpdateOne {
	gcruo.mutation.SetCreateTime(t)
	return gcruo
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (gcruo *GroupChatRecordUpdateOne) SetNillableCreateTime(t *time.Time) *GroupChatRecordUpdateOne {
	if t != nil {
		gcruo.SetCreateTime(*t)
	}
	return gcruo
}

// Mutation returns the GroupChatRecordMutation object of the builder.
func (gcruo *GroupChatRecordUpdateOne) Mutation() *GroupChatRecordMutation {
	return gcruo.mutation
}

// Where appends a list predicates to the GroupChatRecordUpdate builder.
func (gcruo *GroupChatRecordUpdateOne) Where(ps ...predicate.GroupChatRecord) *GroupChatRecordUpdateOne {
	gcruo.mutation.Where(ps...)
	return gcruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gcruo *GroupChatRecordUpdateOne) Select(field string, fields ...string) *GroupChatRecordUpdateOne {
	gcruo.fields = append([]string{field}, fields...)
	return gcruo
}

// Save executes the query and returns the updated GroupChatRecord entity.
func (gcruo *GroupChatRecordUpdateOne) Save(ctx context.Context) (*GroupChatRecord, error) {
	return withHooks(ctx, gcruo.sqlSave, gcruo.mutation, gcruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gcruo *GroupChatRecordUpdateOne) SaveX(ctx context.Context) *GroupChatRecord {
	node, err := gcruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gcruo *GroupChatRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := gcruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcruo *GroupChatRecordUpdateOne) ExecX(ctx context.Context) {
	if err := gcruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gcruo *GroupChatRecordUpdateOne) check() error {
	if v, ok := gcruo.mutation.MsgId(); ok {
		if err := groupchatrecord.MsgIdValidator(v); err != nil {
			return &ValidationError{Name: "msgId", err: fmt.Errorf(`ent: validator failed for field "GroupChatRecord.msgId": %w`, err)}
		}
	}
	if v, ok := gcruo.mutation.FromUserId(); ok {
		if err := groupchatrecord.FromUserIdValidator(v); err != nil {
			return &ValidationError{Name: "fromUserId", err: fmt.Errorf(`ent: validator failed for field "GroupChatRecord.fromUserId": %w`, err)}
		}
	}
	if v, ok := gcruo.mutation.GroupId(); ok {
		if err := groupchatrecord.GroupIdValidator(v); err != nil {
			return &ValidationError{Name: "groupId", err: fmt.Errorf(`ent: validator failed for field "GroupChatRecord.groupId": %w`, err)}
		}
	}
	if v, ok := gcruo.mutation.MsgType(); ok {
		if err := groupchatrecord.MsgTypeValidator(v); err != nil {
			return &ValidationError{Name: "msgType", err: fmt.Errorf(`ent: validator failed for field "GroupChatRecord.msgType": %w`, err)}
		}
	}
	return nil
}

func (gcruo *GroupChatRecordUpdateOne) sqlSave(ctx context.Context) (_node *GroupChatRecord, err error) {
	if err := gcruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(groupchatrecord.Table, groupchatrecord.Columns, sqlgraph.NewFieldSpec(groupchatrecord.FieldID, field.TypeInt))
	id, ok := gcruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GroupChatRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gcruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupchatrecord.FieldID)
		for _, f := range fields {
			if !groupchatrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != groupchatrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gcruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcruo.mutation.MsgId(); ok {
		_spec.SetField(groupchatrecord.FieldMsgId, field.TypeString, value)
	}
	if value, ok := gcruo.mutation.FromUserId(); ok {
		_spec.SetField(groupchatrecord.FieldFromUserId, field.TypeString, value)
	}
	if value, ok := gcruo.mutation.GroupId(); ok {
		_spec.SetField(groupchatrecord.FieldGroupId, field.TypeString, value)
	}
	if value, ok := gcruo.mutation.MsgType(); ok {
		_spec.SetField(groupchatrecord.FieldMsgType, field.TypeString, value)
	}
	if value, ok := gcruo.mutation.CreateTime(); ok {
		_spec.SetField(groupchatrecord.FieldCreateTime, field.TypeTime, value)
	}
	_node = &GroupChatRecord{config: gcruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gcruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupchatrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gcruo.mutation.done = true
	return _node, nil
}
