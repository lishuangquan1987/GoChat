// Code generated by ent, DO NOT EDIT.

package group

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the group type in the database.
	Label = "group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGroupId holds the string denoting the groupid field in the database.
	FieldGroupId = "group_id"
	// FieldGroupName holds the string denoting the groupname field in the database.
	FieldGroupName = "group_name"
	// FieldOwnerId holds the string denoting the ownerid field in the database.
	FieldOwnerId = "owner_id"
	// FieldCreateUserId holds the string denoting the createuserid field in the database.
	FieldCreateUserId = "create_user_id"
	// FieldCreateTime holds the string denoting the createtime field in the database.
	FieldCreateTime = "create_time"
	// FieldMembers holds the string denoting the members field in the database.
	FieldMembers = "members"
	// Table holds the table name of the group in the database.
	Table = "groups"
)

// Columns holds all SQL columns for group fields.
var Columns = []string{
	FieldID,
	FieldGroupId,
	FieldGroupName,
	FieldOwnerId,
	FieldCreateUserId,
	FieldCreateTime,
	FieldMembers,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// GroupIdValidator is a validator for the "groupId" field. It is called by the builders before save.
	GroupIdValidator func(string) error
	// GroupNameValidator is a validator for the "groupName" field. It is called by the builders before save.
	GroupNameValidator func(string) error
	// DefaultCreateTime holds the default value on creation for the "createTime" field.
	DefaultCreateTime func() time.Time
)

// OrderOption defines the ordering options for the Group queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGroupId orders the results by the groupId field.
func ByGroupId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupId, opts...).ToFunc()
}

// ByGroupName orders the results by the groupName field.
func ByGroupName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupName, opts...).ToFunc()
}

// ByOwnerId orders the results by the ownerId field.
func ByOwnerId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerId, opts...).ToFunc()
}

// ByCreateUserId orders the results by the createUserId field.
func ByCreateUserId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateUserId, opts...).ToFunc()
}

// ByCreateTime orders the results by the createTime field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}
