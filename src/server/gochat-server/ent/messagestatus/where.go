// Code generated by ent, DO NOT EDIT.

package messagestatus

import (
	"gochat_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLTE(FieldID, id))
}

// ChatRecordId applies equality check predicate on the "chatRecordId" field. It's identical to ChatRecordIdEQ.
func ChatRecordId(v int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldChatRecordId, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldStatus, v))
}

// FailReason applies equality check predicate on the "failReason" field. It's identical to FailReasonEQ.
func FailReason(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldFailReason, v))
}

// UpdateTime applies equality check predicate on the "updateTime" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldUpdateTime, v))
}

// ChatRecordIdEQ applies the EQ predicate on the "chatRecordId" field.
func ChatRecordIdEQ(v int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldChatRecordId, v))
}

// ChatRecordIdNEQ applies the NEQ predicate on the "chatRecordId" field.
func ChatRecordIdNEQ(v int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNEQ(FieldChatRecordId, v))
}

// ChatRecordIdIn applies the In predicate on the "chatRecordId" field.
func ChatRecordIdIn(vs ...int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldIn(FieldChatRecordId, vs...))
}

// ChatRecordIdNotIn applies the NotIn predicate on the "chatRecordId" field.
func ChatRecordIdNotIn(vs ...int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNotIn(FieldChatRecordId, vs...))
}

// ChatRecordIdGT applies the GT predicate on the "chatRecordId" field.
func ChatRecordIdGT(v int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGT(FieldChatRecordId, v))
}

// ChatRecordIdGTE applies the GTE predicate on the "chatRecordId" field.
func ChatRecordIdGTE(v int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGTE(FieldChatRecordId, v))
}

// ChatRecordIdLT applies the LT predicate on the "chatRecordId" field.
func ChatRecordIdLT(v int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLT(FieldChatRecordId, v))
}

// ChatRecordIdLTE applies the LTE predicate on the "chatRecordId" field.
func ChatRecordIdLTE(v int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLTE(FieldChatRecordId, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldContainsFold(FieldStatus, v))
}

// FailReasonEQ applies the EQ predicate on the "failReason" field.
func FailReasonEQ(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldFailReason, v))
}

// FailReasonNEQ applies the NEQ predicate on the "failReason" field.
func FailReasonNEQ(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNEQ(FieldFailReason, v))
}

// FailReasonIn applies the In predicate on the "failReason" field.
func FailReasonIn(vs ...string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldIn(FieldFailReason, vs...))
}

// FailReasonNotIn applies the NotIn predicate on the "failReason" field.
func FailReasonNotIn(vs ...string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNotIn(FieldFailReason, vs...))
}

// FailReasonGT applies the GT predicate on the "failReason" field.
func FailReasonGT(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGT(FieldFailReason, v))
}

// FailReasonGTE applies the GTE predicate on the "failReason" field.
func FailReasonGTE(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGTE(FieldFailReason, v))
}

// FailReasonLT applies the LT predicate on the "failReason" field.
func FailReasonLT(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLT(FieldFailReason, v))
}

// FailReasonLTE applies the LTE predicate on the "failReason" field.
func FailReasonLTE(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLTE(FieldFailReason, v))
}

// FailReasonContains applies the Contains predicate on the "failReason" field.
func FailReasonContains(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldContains(FieldFailReason, v))
}

// FailReasonHasPrefix applies the HasPrefix predicate on the "failReason" field.
func FailReasonHasPrefix(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldHasPrefix(FieldFailReason, v))
}

// FailReasonHasSuffix applies the HasSuffix predicate on the "failReason" field.
func FailReasonHasSuffix(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldHasSuffix(FieldFailReason, v))
}

// FailReasonIsNil applies the IsNil predicate on the "failReason" field.
func FailReasonIsNil() predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldIsNull(FieldFailReason))
}

// FailReasonNotNil applies the NotNil predicate on the "failReason" field.
func FailReasonNotNil() predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNotNull(FieldFailReason))
}

// FailReasonEqualFold applies the EqualFold predicate on the "failReason" field.
func FailReasonEqualFold(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEqualFold(FieldFailReason, v))
}

// FailReasonContainsFold applies the ContainsFold predicate on the "failReason" field.
func FailReasonContainsFold(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldContainsFold(FieldFailReason, v))
}

// UpdateTimeEQ applies the EQ predicate on the "updateTime" field.
func UpdateTimeEQ(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "updateTime" field.
func UpdateTimeNEQ(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "updateTime" field.
func UpdateTimeIn(vs ...time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "updateTime" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "updateTime" field.
func UpdateTimeGT(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "updateTime" field.
func UpdateTimeGTE(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "updateTime" field.
func UpdateTimeLT(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "updateTime" field.
func UpdateTimeLTE(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MessageStatus) predicate.MessageStatus {
	return predicate.MessageStatus(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MessageStatus) predicate.MessageStatus {
	return predicate.MessageStatus(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MessageStatus) predicate.MessageStatus {
	return predicate.MessageStatus(sql.NotPredicates(p))
}
