// Code generated by ent, DO NOT EDIT.

package messagestatus

import (
	"gochat_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLTE(FieldID, id))
}

// MsgId applies equality check predicate on the "msgId" field. It's identical to MsgIdEQ.
func MsgId(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldMsgId, v))
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldUserId, v))
}

// IsDelivered applies equality check predicate on the "isDelivered" field. It's identical to IsDeliveredEQ.
func IsDelivered(v bool) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldIsDelivered, v))
}

// IsRead applies equality check predicate on the "isRead" field. It's identical to IsReadEQ.
func IsRead(v bool) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldIsRead, v))
}

// DeliveredTime applies equality check predicate on the "deliveredTime" field. It's identical to DeliveredTimeEQ.
func DeliveredTime(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldDeliveredTime, v))
}

// ReadTime applies equality check predicate on the "readTime" field. It's identical to ReadTimeEQ.
func ReadTime(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldReadTime, v))
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldCreateTime, v))
}

// MsgIdEQ applies the EQ predicate on the "msgId" field.
func MsgIdEQ(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldMsgId, v))
}

// MsgIdNEQ applies the NEQ predicate on the "msgId" field.
func MsgIdNEQ(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNEQ(FieldMsgId, v))
}

// MsgIdIn applies the In predicate on the "msgId" field.
func MsgIdIn(vs ...string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldIn(FieldMsgId, vs...))
}

// MsgIdNotIn applies the NotIn predicate on the "msgId" field.
func MsgIdNotIn(vs ...string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNotIn(FieldMsgId, vs...))
}

// MsgIdGT applies the GT predicate on the "msgId" field.
func MsgIdGT(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGT(FieldMsgId, v))
}

// MsgIdGTE applies the GTE predicate on the "msgId" field.
func MsgIdGTE(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGTE(FieldMsgId, v))
}

// MsgIdLT applies the LT predicate on the "msgId" field.
func MsgIdLT(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLT(FieldMsgId, v))
}

// MsgIdLTE applies the LTE predicate on the "msgId" field.
func MsgIdLTE(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLTE(FieldMsgId, v))
}

// MsgIdContains applies the Contains predicate on the "msgId" field.
func MsgIdContains(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldContains(FieldMsgId, v))
}

// MsgIdHasPrefix applies the HasPrefix predicate on the "msgId" field.
func MsgIdHasPrefix(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldHasPrefix(FieldMsgId, v))
}

// MsgIdHasSuffix applies the HasSuffix predicate on the "msgId" field.
func MsgIdHasSuffix(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldHasSuffix(FieldMsgId, v))
}

// MsgIdEqualFold applies the EqualFold predicate on the "msgId" field.
func MsgIdEqualFold(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEqualFold(FieldMsgId, v))
}

// MsgIdContainsFold applies the ContainsFold predicate on the "msgId" field.
func MsgIdContainsFold(v string) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldContainsFold(FieldMsgId, v))
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldUserId, v))
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNEQ(FieldUserId, v))
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldIn(FieldUserId, vs...))
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNotIn(FieldUserId, vs...))
}

// UserIdGT applies the GT predicate on the "userId" field.
func UserIdGT(v int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGT(FieldUserId, v))
}

// UserIdGTE applies the GTE predicate on the "userId" field.
func UserIdGTE(v int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGTE(FieldUserId, v))
}

// UserIdLT applies the LT predicate on the "userId" field.
func UserIdLT(v int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLT(FieldUserId, v))
}

// UserIdLTE applies the LTE predicate on the "userId" field.
func UserIdLTE(v int) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLTE(FieldUserId, v))
}

// IsDeliveredEQ applies the EQ predicate on the "isDelivered" field.
func IsDeliveredEQ(v bool) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldIsDelivered, v))
}

// IsDeliveredNEQ applies the NEQ predicate on the "isDelivered" field.
func IsDeliveredNEQ(v bool) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNEQ(FieldIsDelivered, v))
}

// IsReadEQ applies the EQ predicate on the "isRead" field.
func IsReadEQ(v bool) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldIsRead, v))
}

// IsReadNEQ applies the NEQ predicate on the "isRead" field.
func IsReadNEQ(v bool) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNEQ(FieldIsRead, v))
}

// DeliveredTimeEQ applies the EQ predicate on the "deliveredTime" field.
func DeliveredTimeEQ(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldDeliveredTime, v))
}

// DeliveredTimeNEQ applies the NEQ predicate on the "deliveredTime" field.
func DeliveredTimeNEQ(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNEQ(FieldDeliveredTime, v))
}

// DeliveredTimeIn applies the In predicate on the "deliveredTime" field.
func DeliveredTimeIn(vs ...time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldIn(FieldDeliveredTime, vs...))
}

// DeliveredTimeNotIn applies the NotIn predicate on the "deliveredTime" field.
func DeliveredTimeNotIn(vs ...time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNotIn(FieldDeliveredTime, vs...))
}

// DeliveredTimeGT applies the GT predicate on the "deliveredTime" field.
func DeliveredTimeGT(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGT(FieldDeliveredTime, v))
}

// DeliveredTimeGTE applies the GTE predicate on the "deliveredTime" field.
func DeliveredTimeGTE(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGTE(FieldDeliveredTime, v))
}

// DeliveredTimeLT applies the LT predicate on the "deliveredTime" field.
func DeliveredTimeLT(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLT(FieldDeliveredTime, v))
}

// DeliveredTimeLTE applies the LTE predicate on the "deliveredTime" field.
func DeliveredTimeLTE(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLTE(FieldDeliveredTime, v))
}

// DeliveredTimeIsNil applies the IsNil predicate on the "deliveredTime" field.
func DeliveredTimeIsNil() predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldIsNull(FieldDeliveredTime))
}

// DeliveredTimeNotNil applies the NotNil predicate on the "deliveredTime" field.
func DeliveredTimeNotNil() predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNotNull(FieldDeliveredTime))
}

// ReadTimeEQ applies the EQ predicate on the "readTime" field.
func ReadTimeEQ(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldReadTime, v))
}

// ReadTimeNEQ applies the NEQ predicate on the "readTime" field.
func ReadTimeNEQ(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNEQ(FieldReadTime, v))
}

// ReadTimeIn applies the In predicate on the "readTime" field.
func ReadTimeIn(vs ...time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldIn(FieldReadTime, vs...))
}

// ReadTimeNotIn applies the NotIn predicate on the "readTime" field.
func ReadTimeNotIn(vs ...time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNotIn(FieldReadTime, vs...))
}

// ReadTimeGT applies the GT predicate on the "readTime" field.
func ReadTimeGT(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGT(FieldReadTime, v))
}

// ReadTimeGTE applies the GTE predicate on the "readTime" field.
func ReadTimeGTE(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGTE(FieldReadTime, v))
}

// ReadTimeLT applies the LT predicate on the "readTime" field.
func ReadTimeLT(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLT(FieldReadTime, v))
}

// ReadTimeLTE applies the LTE predicate on the "readTime" field.
func ReadTimeLTE(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLTE(FieldReadTime, v))
}

// ReadTimeIsNil applies the IsNil predicate on the "readTime" field.
func ReadTimeIsNil() predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldIsNull(FieldReadTime))
}

// ReadTimeNotNil applies the NotNil predicate on the "readTime" field.
func ReadTimeNotNil() predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNotNull(FieldReadTime))
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v time.Time) predicate.MessageStatus {
	return predicate.MessageStatus(sql.FieldLTE(FieldCreateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MessageStatus) predicate.MessageStatus {
	return predicate.MessageStatus(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MessageStatus) predicate.MessageStatus {
	return predicate.MessageStatus(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MessageStatus) predicate.MessageStatus {
	return predicate.MessageStatus(sql.NotPredicates(p))
}
