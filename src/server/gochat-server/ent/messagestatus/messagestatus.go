// Code generated by ent, DO NOT EDIT.

package messagestatus

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the messagestatus type in the database.
	Label = "message_status"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMsgId holds the string denoting the msgid field in the database.
	FieldMsgId = "msg_id"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "user_id"
	// FieldIsDelivered holds the string denoting the isdelivered field in the database.
	FieldIsDelivered = "is_delivered"
	// FieldIsRead holds the string denoting the isread field in the database.
	FieldIsRead = "is_read"
	// FieldDeliveredTime holds the string denoting the deliveredtime field in the database.
	FieldDeliveredTime = "delivered_time"
	// FieldReadTime holds the string denoting the readtime field in the database.
	FieldReadTime = "read_time"
	// FieldCreateTime holds the string denoting the createtime field in the database.
	FieldCreateTime = "create_time"
	// Table holds the table name of the messagestatus in the database.
	Table = "message_status"
)

// Columns holds all SQL columns for messagestatus fields.
var Columns = []string{
	FieldID,
	FieldMsgId,
	FieldUserId,
	FieldIsDelivered,
	FieldIsRead,
	FieldDeliveredTime,
	FieldReadTime,
	FieldCreateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// MsgIdValidator is a validator for the "msgId" field. It is called by the builders before save.
	MsgIdValidator func(string) error
	// DefaultIsDelivered holds the default value on creation for the "isDelivered" field.
	DefaultIsDelivered bool
	// DefaultIsRead holds the default value on creation for the "isRead" field.
	DefaultIsRead bool
	// DefaultCreateTime holds the default value on creation for the "createTime" field.
	DefaultCreateTime func() time.Time
)

// OrderOption defines the ordering options for the MessageStatus queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMsgId orders the results by the msgId field.
func ByMsgId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMsgId, opts...).ToFunc()
}

// ByUserId orders the results by the userId field.
func ByUserId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserId, opts...).ToFunc()
}

// ByIsDelivered orders the results by the isDelivered field.
func ByIsDelivered(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDelivered, opts...).ToFunc()
}

// ByIsRead orders the results by the isRead field.
func ByIsRead(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRead, opts...).ToFunc()
}

// ByDeliveredTime orders the results by the deliveredTime field.
func ByDeliveredTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveredTime, opts...).ToFunc()
}

// ByReadTime orders the results by the readTime field.
func ByReadTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReadTime, opts...).ToFunc()
}

// ByCreateTime orders the results by the createTime field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}
