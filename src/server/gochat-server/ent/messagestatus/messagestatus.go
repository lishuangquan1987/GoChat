// Code generated by ent, DO NOT EDIT.

package messagestatus

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the messagestatus type in the database.
	Label = "message_status"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChatRecordId holds the string denoting the chatrecordid field in the database.
	FieldChatRecordId = "chat_record_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldFailReason holds the string denoting the failreason field in the database.
	FieldFailReason = "fail_reason"
	// FieldUpdateTime holds the string denoting the updatetime field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the messagestatus in the database.
	Table = "message_status"
)

// Columns holds all SQL columns for messagestatus fields.
var Columns = []string{
	FieldID,
	FieldChatRecordId,
	FieldStatus,
	FieldFailReason,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(string) error
	// DefaultUpdateTime holds the default value on creation for the "updateTime" field.
	DefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the MessageStatus queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByChatRecordId orders the results by the chatRecordId field.
func ByChatRecordId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChatRecordId, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByFailReason orders the results by the failReason field.
func ByFailReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFailReason, opts...).ToFunc()
}

// ByUpdateTime orders the results by the updateTime field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
