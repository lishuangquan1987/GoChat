// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/imagemessage"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImageMessageCreate is the builder for creating a ImageMessage entity.
type ImageMessageCreate struct {
	config
	mutation *ImageMessageMutation
	hooks    []Hook
}

// SetMsgId sets the "msgId" field.
func (imc *ImageMessageCreate) SetMsgId(s string) *ImageMessageCreate {
	imc.mutation.SetMsgId(s)
	return imc
}

// SetImageUrl sets the "imageUrl" field.
func (imc *ImageMessageCreate) SetImageUrl(s string) *ImageMessageCreate {
	imc.mutation.SetImageUrl(s)
	return imc
}

// Mutation returns the ImageMessageMutation object of the builder.
func (imc *ImageMessageCreate) Mutation() *ImageMessageMutation {
	return imc.mutation
}

// Save creates the ImageMessage in the database.
func (imc *ImageMessageCreate) Save(ctx context.Context) (*ImageMessage, error) {
	return withHooks(ctx, imc.sqlSave, imc.mutation, imc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (imc *ImageMessageCreate) SaveX(ctx context.Context) *ImageMessage {
	v, err := imc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (imc *ImageMessageCreate) Exec(ctx context.Context) error {
	_, err := imc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imc *ImageMessageCreate) ExecX(ctx context.Context) {
	if err := imc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (imc *ImageMessageCreate) check() error {
	if _, ok := imc.mutation.MsgId(); !ok {
		return &ValidationError{Name: "msgId", err: errors.New(`ent: missing required field "ImageMessage.msgId"`)}
	}
	if v, ok := imc.mutation.MsgId(); ok {
		if err := imagemessage.MsgIdValidator(v); err != nil {
			return &ValidationError{Name: "msgId", err: fmt.Errorf(`ent: validator failed for field "ImageMessage.msgId": %w`, err)}
		}
	}
	if _, ok := imc.mutation.ImageUrl(); !ok {
		return &ValidationError{Name: "imageUrl", err: errors.New(`ent: missing required field "ImageMessage.imageUrl"`)}
	}
	if v, ok := imc.mutation.ImageUrl(); ok {
		if err := imagemessage.ImageUrlValidator(v); err != nil {
			return &ValidationError{Name: "imageUrl", err: fmt.Errorf(`ent: validator failed for field "ImageMessage.imageUrl": %w`, err)}
		}
	}
	return nil
}

func (imc *ImageMessageCreate) sqlSave(ctx context.Context) (*ImageMessage, error) {
	if err := imc.check(); err != nil {
		return nil, err
	}
	_node, _spec := imc.createSpec()
	if err := sqlgraph.CreateNode(ctx, imc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	imc.mutation.id = &_node.ID
	imc.mutation.done = true
	return _node, nil
}

func (imc *ImageMessageCreate) createSpec() (*ImageMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &ImageMessage{config: imc.config}
		_spec = sqlgraph.NewCreateSpec(imagemessage.Table, sqlgraph.NewFieldSpec(imagemessage.FieldID, field.TypeInt))
	)
	if value, ok := imc.mutation.MsgId(); ok {
		_spec.SetField(imagemessage.FieldMsgId, field.TypeString, value)
		_node.MsgId = value
	}
	if value, ok := imc.mutation.ImageUrl(); ok {
		_spec.SetField(imagemessage.FieldImageUrl, field.TypeString, value)
		_node.ImageUrl = value
	}
	return _node, _spec
}

// ImageMessageCreateBulk is the builder for creating many ImageMessage entities in bulk.
type ImageMessageCreateBulk struct {
	config
	err      error
	builders []*ImageMessageCreate
}

// Save creates the ImageMessage entities in the database.
func (imcb *ImageMessageCreateBulk) Save(ctx context.Context) ([]*ImageMessage, error) {
	if imcb.err != nil {
		return nil, imcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(imcb.builders))
	nodes := make([]*ImageMessage, len(imcb.builders))
	mutators := make([]Mutator, len(imcb.builders))
	for i := range imcb.builders {
		func(i int, root context.Context) {
			builder := imcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImageMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, imcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, imcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, imcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (imcb *ImageMessageCreateBulk) SaveX(ctx context.Context) []*ImageMessage {
	v, err := imcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (imcb *ImageMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := imcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imcb *ImageMessageCreateBulk) ExecX(ctx context.Context) {
	if err := imcb.Exec(ctx); err != nil {
		panic(err)
	}
}
