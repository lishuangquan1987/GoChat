// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gochat_server/ent/messagestatus"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageStatusCreate is the builder for creating a MessageStatus entity.
type MessageStatusCreate struct {
	config
	mutation *MessageStatusMutation
	hooks    []Hook
}

// SetChatRecordId sets the "chatRecordId" field.
func (msc *MessageStatusCreate) SetChatRecordId(i int) *MessageStatusCreate {
	msc.mutation.SetChatRecordId(i)
	return msc
}

// SetStatus sets the "status" field.
func (msc *MessageStatusCreate) SetStatus(s string) *MessageStatusCreate {
	msc.mutation.SetStatus(s)
	return msc
}

// SetFailReason sets the "failReason" field.
func (msc *MessageStatusCreate) SetFailReason(s string) *MessageStatusCreate {
	msc.mutation.SetFailReason(s)
	return msc
}

// SetNillableFailReason sets the "failReason" field if the given value is not nil.
func (msc *MessageStatusCreate) SetNillableFailReason(s *string) *MessageStatusCreate {
	if s != nil {
		msc.SetFailReason(*s)
	}
	return msc
}

// SetUpdateTime sets the "updateTime" field.
func (msc *MessageStatusCreate) SetUpdateTime(t time.Time) *MessageStatusCreate {
	msc.mutation.SetUpdateTime(t)
	return msc
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (msc *MessageStatusCreate) SetNillableUpdateTime(t *time.Time) *MessageStatusCreate {
	if t != nil {
		msc.SetUpdateTime(*t)
	}
	return msc
}

// Mutation returns the MessageStatusMutation object of the builder.
func (msc *MessageStatusCreate) Mutation() *MessageStatusMutation {
	return msc.mutation
}

// Save creates the MessageStatus in the database.
func (msc *MessageStatusCreate) Save(ctx context.Context) (*MessageStatus, error) {
	msc.defaults()
	return withHooks(ctx, msc.sqlSave, msc.mutation, msc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (msc *MessageStatusCreate) SaveX(ctx context.Context) *MessageStatus {
	v, err := msc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (msc *MessageStatusCreate) Exec(ctx context.Context) error {
	_, err := msc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msc *MessageStatusCreate) ExecX(ctx context.Context) {
	if err := msc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msc *MessageStatusCreate) defaults() {
	if _, ok := msc.mutation.UpdateTime(); !ok {
		v := messagestatus.DefaultUpdateTime()
		msc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msc *MessageStatusCreate) check() error {
	if _, ok := msc.mutation.ChatRecordId(); !ok {
		return &ValidationError{Name: "chatRecordId", err: errors.New(`ent: missing required field "MessageStatus.chatRecordId"`)}
	}
	if _, ok := msc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "MessageStatus.status"`)}
	}
	if v, ok := msc.mutation.Status(); ok {
		if err := messagestatus.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MessageStatus.status": %w`, err)}
		}
	}
	if _, ok := msc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "updateTime", err: errors.New(`ent: missing required field "MessageStatus.updateTime"`)}
	}
	return nil
}

func (msc *MessageStatusCreate) sqlSave(ctx context.Context) (*MessageStatus, error) {
	if err := msc.check(); err != nil {
		return nil, err
	}
	_node, _spec := msc.createSpec()
	if err := sqlgraph.CreateNode(ctx, msc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	msc.mutation.id = &_node.ID
	msc.mutation.done = true
	return _node, nil
}

func (msc *MessageStatusCreate) createSpec() (*MessageStatus, *sqlgraph.CreateSpec) {
	var (
		_node = &MessageStatus{config: msc.config}
		_spec = sqlgraph.NewCreateSpec(messagestatus.Table, sqlgraph.NewFieldSpec(messagestatus.FieldID, field.TypeInt))
	)
	if value, ok := msc.mutation.ChatRecordId(); ok {
		_spec.SetField(messagestatus.FieldChatRecordId, field.TypeInt, value)
		_node.ChatRecordId = value
	}
	if value, ok := msc.mutation.Status(); ok {
		_spec.SetField(messagestatus.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := msc.mutation.FailReason(); ok {
		_spec.SetField(messagestatus.FieldFailReason, field.TypeString, value)
		_node.FailReason = value
	}
	if value, ok := msc.mutation.UpdateTime(); ok {
		_spec.SetField(messagestatus.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// MessageStatusCreateBulk is the builder for creating many MessageStatus entities in bulk.
type MessageStatusCreateBulk struct {
	config
	err      error
	builders []*MessageStatusCreate
}

// Save creates the MessageStatus entities in the database.
func (mscb *MessageStatusCreateBulk) Save(ctx context.Context) ([]*MessageStatus, error) {
	if mscb.err != nil {
		return nil, mscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mscb.builders))
	nodes := make([]*MessageStatus, len(mscb.builders))
	mutators := make([]Mutator, len(mscb.builders))
	for i := range mscb.builders {
		func(i int, root context.Context) {
			builder := mscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageStatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mscb *MessageStatusCreateBulk) SaveX(ctx context.Context) []*MessageStatus {
	v, err := mscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mscb *MessageStatusCreateBulk) Exec(ctx context.Context) error {
	_, err := mscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mscb *MessageStatusCreateBulk) ExecX(ctx context.Context) {
	if err := mscb.Exec(ctx); err != nil {
		panic(err)
	}
}
