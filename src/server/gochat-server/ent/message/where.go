// Code generated by ent, DO NOT EDIT.

package message

import (
	"gochat_server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// MsgId applies equality check predicate on the "msgId" field. It's identical to MsgIdEQ.
func MsgId(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMsgId, v))
}

// MsgType applies equality check predicate on the "msgType" field. It's identical to MsgTypeEQ.
func MsgType(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMsgType, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldContent, v))
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreateTime, v))
}

// MsgIdEQ applies the EQ predicate on the "msgId" field.
func MsgIdEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMsgId, v))
}

// MsgIdNEQ applies the NEQ predicate on the "msgId" field.
func MsgIdNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldMsgId, v))
}

// MsgIdIn applies the In predicate on the "msgId" field.
func MsgIdIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldMsgId, vs...))
}

// MsgIdNotIn applies the NotIn predicate on the "msgId" field.
func MsgIdNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldMsgId, vs...))
}

// MsgIdGT applies the GT predicate on the "msgId" field.
func MsgIdGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldMsgId, v))
}

// MsgIdGTE applies the GTE predicate on the "msgId" field.
func MsgIdGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldMsgId, v))
}

// MsgIdLT applies the LT predicate on the "msgId" field.
func MsgIdLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldMsgId, v))
}

// MsgIdLTE applies the LTE predicate on the "msgId" field.
func MsgIdLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldMsgId, v))
}

// MsgIdContains applies the Contains predicate on the "msgId" field.
func MsgIdContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldMsgId, v))
}

// MsgIdHasPrefix applies the HasPrefix predicate on the "msgId" field.
func MsgIdHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldMsgId, v))
}

// MsgIdHasSuffix applies the HasSuffix predicate on the "msgId" field.
func MsgIdHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldMsgId, v))
}

// MsgIdEqualFold applies the EqualFold predicate on the "msgId" field.
func MsgIdEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldMsgId, v))
}

// MsgIdContainsFold applies the ContainsFold predicate on the "msgId" field.
func MsgIdContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldMsgId, v))
}

// MsgTypeEQ applies the EQ predicate on the "msgType" field.
func MsgTypeEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMsgType, v))
}

// MsgTypeNEQ applies the NEQ predicate on the "msgType" field.
func MsgTypeNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldMsgType, v))
}

// MsgTypeIn applies the In predicate on the "msgType" field.
func MsgTypeIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldMsgType, vs...))
}

// MsgTypeNotIn applies the NotIn predicate on the "msgType" field.
func MsgTypeNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldMsgType, vs...))
}

// MsgTypeGT applies the GT predicate on the "msgType" field.
func MsgTypeGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldMsgType, v))
}

// MsgTypeGTE applies the GTE predicate on the "msgType" field.
func MsgTypeGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldMsgType, v))
}

// MsgTypeLT applies the LT predicate on the "msgType" field.
func MsgTypeLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldMsgType, v))
}

// MsgTypeLTE applies the LTE predicate on the "msgType" field.
func MsgTypeLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldMsgType, v))
}

// MsgTypeContains applies the Contains predicate on the "msgType" field.
func MsgTypeContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldMsgType, v))
}

// MsgTypeHasPrefix applies the HasPrefix predicate on the "msgType" field.
func MsgTypeHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldMsgType, v))
}

// MsgTypeHasSuffix applies the HasSuffix predicate on the "msgType" field.
func MsgTypeHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldMsgType, v))
}

// MsgTypeEqualFold applies the EqualFold predicate on the "msgType" field.
func MsgTypeEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldMsgType, v))
}

// MsgTypeContainsFold applies the ContainsFold predicate on the "msgType" field.
func MsgTypeContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldMsgType, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldContent, v))
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldCreateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(sql.NotPredicates(p))
}
